
display-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08003400  08003400  00003400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a4  08003510  08003510  00003510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800f6b4  0800f6b4  0000f6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc90  0800fc90  000101d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc90  0800fc90  000101d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc90  0800fc90  000101d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc90  0800fc90  0000fc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc94  0800fc94  0000fc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800fc98  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  200001d0  0800fe68  000101d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  0800fe68  00010c84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044b62  00000000  00000000  000101f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ee1  00000000  00000000  00054d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec8  00000000  00000000  0005ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c90  00000000  00000000  0005cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204ac  00000000  00000000  0005e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a3a5  00000000  00000000  0007ec44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f71  00000000  00000000  000a8fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f44  00000000  00000000  00141fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08003510 <__do_global_dtors_aux>:
 8003510:	b510      	push	{r4, lr}
 8003512:	4c05      	ldr	r4, [pc, #20]	; (8003528 <__do_global_dtors_aux+0x18>)
 8003514:	7823      	ldrb	r3, [r4, #0]
 8003516:	b933      	cbnz	r3, 8003526 <__do_global_dtors_aux+0x16>
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <__do_global_dtors_aux+0x1c>)
 800351a:	b113      	cbz	r3, 8003522 <__do_global_dtors_aux+0x12>
 800351c:	4804      	ldr	r0, [pc, #16]	; (8003530 <__do_global_dtors_aux+0x20>)
 800351e:	f3af 8000 	nop.w
 8003522:	2301      	movs	r3, #1
 8003524:	7023      	strb	r3, [r4, #0]
 8003526:	bd10      	pop	{r4, pc}
 8003528:	200001d0 	.word	0x200001d0
 800352c:	00000000 	.word	0x00000000
 8003530:	0800f69c 	.word	0x0800f69c

08003534 <frame_dummy>:
 8003534:	b508      	push	{r3, lr}
 8003536:	4b03      	ldr	r3, [pc, #12]	; (8003544 <frame_dummy+0x10>)
 8003538:	b11b      	cbz	r3, 8003542 <frame_dummy+0xe>
 800353a:	4903      	ldr	r1, [pc, #12]	; (8003548 <frame_dummy+0x14>)
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <frame_dummy+0x18>)
 800353e:	f3af 8000 	nop.w
 8003542:	bd08      	pop	{r3, pc}
 8003544:	00000000 	.word	0x00000000
 8003548:	200001d4 	.word	0x200001d4
 800354c:	0800f69c 	.word	0x0800f69c

08003550 <strlen>:
 8003550:	4603      	mov	r3, r0
 8003552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003556:	2a00      	cmp	r2, #0
 8003558:	d1fb      	bne.n	8003552 <strlen+0x2>
 800355a:	1a18      	subs	r0, r3, r0
 800355c:	3801      	subs	r0, #1
 800355e:	4770      	bx	lr

08003560 <__aeabi_drsub>:
 8003560:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003564:	e002      	b.n	800356c <__adddf3>
 8003566:	bf00      	nop

08003568 <__aeabi_dsub>:
 8003568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800356c <__adddf3>:
 800356c:	b530      	push	{r4, r5, lr}
 800356e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003572:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003576:	ea94 0f05 	teq	r4, r5
 800357a:	bf08      	it	eq
 800357c:	ea90 0f02 	teqeq	r0, r2
 8003580:	bf1f      	itttt	ne
 8003582:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003586:	ea55 0c02 	orrsne.w	ip, r5, r2
 800358a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800358e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003592:	f000 80e2 	beq.w	800375a <__adddf3+0x1ee>
 8003596:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800359a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800359e:	bfb8      	it	lt
 80035a0:	426d      	neglt	r5, r5
 80035a2:	dd0c      	ble.n	80035be <__adddf3+0x52>
 80035a4:	442c      	add	r4, r5
 80035a6:	ea80 0202 	eor.w	r2, r0, r2
 80035aa:	ea81 0303 	eor.w	r3, r1, r3
 80035ae:	ea82 0000 	eor.w	r0, r2, r0
 80035b2:	ea83 0101 	eor.w	r1, r3, r1
 80035b6:	ea80 0202 	eor.w	r2, r0, r2
 80035ba:	ea81 0303 	eor.w	r3, r1, r3
 80035be:	2d36      	cmp	r5, #54	; 0x36
 80035c0:	bf88      	it	hi
 80035c2:	bd30      	pophi	{r4, r5, pc}
 80035c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80035c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80035cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80035d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80035d4:	d002      	beq.n	80035dc <__adddf3+0x70>
 80035d6:	4240      	negs	r0, r0
 80035d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80035dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80035e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80035e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80035e8:	d002      	beq.n	80035f0 <__adddf3+0x84>
 80035ea:	4252      	negs	r2, r2
 80035ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80035f0:	ea94 0f05 	teq	r4, r5
 80035f4:	f000 80a7 	beq.w	8003746 <__adddf3+0x1da>
 80035f8:	f1a4 0401 	sub.w	r4, r4, #1
 80035fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8003600:	db0d      	blt.n	800361e <__adddf3+0xb2>
 8003602:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003606:	fa22 f205 	lsr.w	r2, r2, r5
 800360a:	1880      	adds	r0, r0, r2
 800360c:	f141 0100 	adc.w	r1, r1, #0
 8003610:	fa03 f20e 	lsl.w	r2, r3, lr
 8003614:	1880      	adds	r0, r0, r2
 8003616:	fa43 f305 	asr.w	r3, r3, r5
 800361a:	4159      	adcs	r1, r3
 800361c:	e00e      	b.n	800363c <__adddf3+0xd0>
 800361e:	f1a5 0520 	sub.w	r5, r5, #32
 8003622:	f10e 0e20 	add.w	lr, lr, #32
 8003626:	2a01      	cmp	r2, #1
 8003628:	fa03 fc0e 	lsl.w	ip, r3, lr
 800362c:	bf28      	it	cs
 800362e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003632:	fa43 f305 	asr.w	r3, r3, r5
 8003636:	18c0      	adds	r0, r0, r3
 8003638:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800363c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003640:	d507      	bpl.n	8003652 <__adddf3+0xe6>
 8003642:	f04f 0e00 	mov.w	lr, #0
 8003646:	f1dc 0c00 	rsbs	ip, ip, #0
 800364a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800364e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003652:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003656:	d31b      	bcc.n	8003690 <__adddf3+0x124>
 8003658:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800365c:	d30c      	bcc.n	8003678 <__adddf3+0x10c>
 800365e:	0849      	lsrs	r1, r1, #1
 8003660:	ea5f 0030 	movs.w	r0, r0, rrx
 8003664:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003668:	f104 0401 	add.w	r4, r4, #1
 800366c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003670:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003674:	f080 809a 	bcs.w	80037ac <__adddf3+0x240>
 8003678:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800367c:	bf08      	it	eq
 800367e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003682:	f150 0000 	adcs.w	r0, r0, #0
 8003686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800368a:	ea41 0105 	orr.w	r1, r1, r5
 800368e:	bd30      	pop	{r4, r5, pc}
 8003690:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003694:	4140      	adcs	r0, r0
 8003696:	eb41 0101 	adc.w	r1, r1, r1
 800369a:	3c01      	subs	r4, #1
 800369c:	bf28      	it	cs
 800369e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80036a2:	d2e9      	bcs.n	8003678 <__adddf3+0x10c>
 80036a4:	f091 0f00 	teq	r1, #0
 80036a8:	bf04      	itt	eq
 80036aa:	4601      	moveq	r1, r0
 80036ac:	2000      	moveq	r0, #0
 80036ae:	fab1 f381 	clz	r3, r1
 80036b2:	bf08      	it	eq
 80036b4:	3320      	addeq	r3, #32
 80036b6:	f1a3 030b 	sub.w	r3, r3, #11
 80036ba:	f1b3 0220 	subs.w	r2, r3, #32
 80036be:	da0c      	bge.n	80036da <__adddf3+0x16e>
 80036c0:	320c      	adds	r2, #12
 80036c2:	dd08      	ble.n	80036d6 <__adddf3+0x16a>
 80036c4:	f102 0c14 	add.w	ip, r2, #20
 80036c8:	f1c2 020c 	rsb	r2, r2, #12
 80036cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80036d0:	fa21 f102 	lsr.w	r1, r1, r2
 80036d4:	e00c      	b.n	80036f0 <__adddf3+0x184>
 80036d6:	f102 0214 	add.w	r2, r2, #20
 80036da:	bfd8      	it	le
 80036dc:	f1c2 0c20 	rsble	ip, r2, #32
 80036e0:	fa01 f102 	lsl.w	r1, r1, r2
 80036e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80036e8:	bfdc      	itt	le
 80036ea:	ea41 010c 	orrle.w	r1, r1, ip
 80036ee:	4090      	lslle	r0, r2
 80036f0:	1ae4      	subs	r4, r4, r3
 80036f2:	bfa2      	ittt	ge
 80036f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80036f8:	4329      	orrge	r1, r5
 80036fa:	bd30      	popge	{r4, r5, pc}
 80036fc:	ea6f 0404 	mvn.w	r4, r4
 8003700:	3c1f      	subs	r4, #31
 8003702:	da1c      	bge.n	800373e <__adddf3+0x1d2>
 8003704:	340c      	adds	r4, #12
 8003706:	dc0e      	bgt.n	8003726 <__adddf3+0x1ba>
 8003708:	f104 0414 	add.w	r4, r4, #20
 800370c:	f1c4 0220 	rsb	r2, r4, #32
 8003710:	fa20 f004 	lsr.w	r0, r0, r4
 8003714:	fa01 f302 	lsl.w	r3, r1, r2
 8003718:	ea40 0003 	orr.w	r0, r0, r3
 800371c:	fa21 f304 	lsr.w	r3, r1, r4
 8003720:	ea45 0103 	orr.w	r1, r5, r3
 8003724:	bd30      	pop	{r4, r5, pc}
 8003726:	f1c4 040c 	rsb	r4, r4, #12
 800372a:	f1c4 0220 	rsb	r2, r4, #32
 800372e:	fa20 f002 	lsr.w	r0, r0, r2
 8003732:	fa01 f304 	lsl.w	r3, r1, r4
 8003736:	ea40 0003 	orr.w	r0, r0, r3
 800373a:	4629      	mov	r1, r5
 800373c:	bd30      	pop	{r4, r5, pc}
 800373e:	fa21 f004 	lsr.w	r0, r1, r4
 8003742:	4629      	mov	r1, r5
 8003744:	bd30      	pop	{r4, r5, pc}
 8003746:	f094 0f00 	teq	r4, #0
 800374a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800374e:	bf06      	itte	eq
 8003750:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003754:	3401      	addeq	r4, #1
 8003756:	3d01      	subne	r5, #1
 8003758:	e74e      	b.n	80035f8 <__adddf3+0x8c>
 800375a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800375e:	bf18      	it	ne
 8003760:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003764:	d029      	beq.n	80037ba <__adddf3+0x24e>
 8003766:	ea94 0f05 	teq	r4, r5
 800376a:	bf08      	it	eq
 800376c:	ea90 0f02 	teqeq	r0, r2
 8003770:	d005      	beq.n	800377e <__adddf3+0x212>
 8003772:	ea54 0c00 	orrs.w	ip, r4, r0
 8003776:	bf04      	itt	eq
 8003778:	4619      	moveq	r1, r3
 800377a:	4610      	moveq	r0, r2
 800377c:	bd30      	pop	{r4, r5, pc}
 800377e:	ea91 0f03 	teq	r1, r3
 8003782:	bf1e      	ittt	ne
 8003784:	2100      	movne	r1, #0
 8003786:	2000      	movne	r0, #0
 8003788:	bd30      	popne	{r4, r5, pc}
 800378a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800378e:	d105      	bne.n	800379c <__adddf3+0x230>
 8003790:	0040      	lsls	r0, r0, #1
 8003792:	4149      	adcs	r1, r1
 8003794:	bf28      	it	cs
 8003796:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800379a:	bd30      	pop	{r4, r5, pc}
 800379c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80037a0:	bf3c      	itt	cc
 80037a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80037a6:	bd30      	popcc	{r4, r5, pc}
 80037a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80037ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80037b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037b4:	f04f 0000 	mov.w	r0, #0
 80037b8:	bd30      	pop	{r4, r5, pc}
 80037ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80037be:	bf1a      	itte	ne
 80037c0:	4619      	movne	r1, r3
 80037c2:	4610      	movne	r0, r2
 80037c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80037c8:	bf1c      	itt	ne
 80037ca:	460b      	movne	r3, r1
 80037cc:	4602      	movne	r2, r0
 80037ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80037d2:	bf06      	itte	eq
 80037d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80037d8:	ea91 0f03 	teqeq	r1, r3
 80037dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80037e0:	bd30      	pop	{r4, r5, pc}
 80037e2:	bf00      	nop

080037e4 <__aeabi_ui2d>:
 80037e4:	f090 0f00 	teq	r0, #0
 80037e8:	bf04      	itt	eq
 80037ea:	2100      	moveq	r1, #0
 80037ec:	4770      	bxeq	lr
 80037ee:	b530      	push	{r4, r5, lr}
 80037f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80037f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80037f8:	f04f 0500 	mov.w	r5, #0
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	e750      	b.n	80036a4 <__adddf3+0x138>
 8003802:	bf00      	nop

08003804 <__aeabi_i2d>:
 8003804:	f090 0f00 	teq	r0, #0
 8003808:	bf04      	itt	eq
 800380a:	2100      	moveq	r1, #0
 800380c:	4770      	bxeq	lr
 800380e:	b530      	push	{r4, r5, lr}
 8003810:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003814:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003818:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800381c:	bf48      	it	mi
 800381e:	4240      	negmi	r0, r0
 8003820:	f04f 0100 	mov.w	r1, #0
 8003824:	e73e      	b.n	80036a4 <__adddf3+0x138>
 8003826:	bf00      	nop

08003828 <__aeabi_f2d>:
 8003828:	0042      	lsls	r2, r0, #1
 800382a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800382e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003832:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003836:	bf1f      	itttt	ne
 8003838:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800383c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003840:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003844:	4770      	bxne	lr
 8003846:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800384a:	bf08      	it	eq
 800384c:	4770      	bxeq	lr
 800384e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003852:	bf04      	itt	eq
 8003854:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003858:	4770      	bxeq	lr
 800385a:	b530      	push	{r4, r5, lr}
 800385c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003868:	e71c      	b.n	80036a4 <__adddf3+0x138>
 800386a:	bf00      	nop

0800386c <__aeabi_ul2d>:
 800386c:	ea50 0201 	orrs.w	r2, r0, r1
 8003870:	bf08      	it	eq
 8003872:	4770      	bxeq	lr
 8003874:	b530      	push	{r4, r5, lr}
 8003876:	f04f 0500 	mov.w	r5, #0
 800387a:	e00a      	b.n	8003892 <__aeabi_l2d+0x16>

0800387c <__aeabi_l2d>:
 800387c:	ea50 0201 	orrs.w	r2, r0, r1
 8003880:	bf08      	it	eq
 8003882:	4770      	bxeq	lr
 8003884:	b530      	push	{r4, r5, lr}
 8003886:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800388a:	d502      	bpl.n	8003892 <__aeabi_l2d+0x16>
 800388c:	4240      	negs	r0, r0
 800388e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003892:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003896:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800389a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800389e:	f43f aed8 	beq.w	8003652 <__adddf3+0xe6>
 80038a2:	f04f 0203 	mov.w	r2, #3
 80038a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80038aa:	bf18      	it	ne
 80038ac:	3203      	addne	r2, #3
 80038ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80038b2:	bf18      	it	ne
 80038b4:	3203      	addne	r2, #3
 80038b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80038ba:	f1c2 0320 	rsb	r3, r2, #32
 80038be:	fa00 fc03 	lsl.w	ip, r0, r3
 80038c2:	fa20 f002 	lsr.w	r0, r0, r2
 80038c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80038ca:	ea40 000e 	orr.w	r0, r0, lr
 80038ce:	fa21 f102 	lsr.w	r1, r1, r2
 80038d2:	4414      	add	r4, r2
 80038d4:	e6bd      	b.n	8003652 <__adddf3+0xe6>
 80038d6:	bf00      	nop

080038d8 <__gedf2>:
 80038d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80038dc:	e006      	b.n	80038ec <__cmpdf2+0x4>
 80038de:	bf00      	nop

080038e0 <__ledf2>:
 80038e0:	f04f 0c01 	mov.w	ip, #1
 80038e4:	e002      	b.n	80038ec <__cmpdf2+0x4>
 80038e6:	bf00      	nop

080038e8 <__cmpdf2>:
 80038e8:	f04f 0c01 	mov.w	ip, #1
 80038ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80038f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80038f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80038f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80038fc:	bf18      	it	ne
 80038fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003902:	d01b      	beq.n	800393c <__cmpdf2+0x54>
 8003904:	b001      	add	sp, #4
 8003906:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800390a:	bf0c      	ite	eq
 800390c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003910:	ea91 0f03 	teqne	r1, r3
 8003914:	bf02      	ittt	eq
 8003916:	ea90 0f02 	teqeq	r0, r2
 800391a:	2000      	moveq	r0, #0
 800391c:	4770      	bxeq	lr
 800391e:	f110 0f00 	cmn.w	r0, #0
 8003922:	ea91 0f03 	teq	r1, r3
 8003926:	bf58      	it	pl
 8003928:	4299      	cmppl	r1, r3
 800392a:	bf08      	it	eq
 800392c:	4290      	cmpeq	r0, r2
 800392e:	bf2c      	ite	cs
 8003930:	17d8      	asrcs	r0, r3, #31
 8003932:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003936:	f040 0001 	orr.w	r0, r0, #1
 800393a:	4770      	bx	lr
 800393c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003944:	d102      	bne.n	800394c <__cmpdf2+0x64>
 8003946:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800394a:	d107      	bne.n	800395c <__cmpdf2+0x74>
 800394c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003954:	d1d6      	bne.n	8003904 <__cmpdf2+0x1c>
 8003956:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800395a:	d0d3      	beq.n	8003904 <__cmpdf2+0x1c>
 800395c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop

08003964 <__aeabi_cdrcmple>:
 8003964:	4684      	mov	ip, r0
 8003966:	4610      	mov	r0, r2
 8003968:	4662      	mov	r2, ip
 800396a:	468c      	mov	ip, r1
 800396c:	4619      	mov	r1, r3
 800396e:	4663      	mov	r3, ip
 8003970:	e000      	b.n	8003974 <__aeabi_cdcmpeq>
 8003972:	bf00      	nop

08003974 <__aeabi_cdcmpeq>:
 8003974:	b501      	push	{r0, lr}
 8003976:	f7ff ffb7 	bl	80038e8 <__cmpdf2>
 800397a:	2800      	cmp	r0, #0
 800397c:	bf48      	it	mi
 800397e:	f110 0f00 	cmnmi.w	r0, #0
 8003982:	bd01      	pop	{r0, pc}

08003984 <__aeabi_dcmpeq>:
 8003984:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003988:	f7ff fff4 	bl	8003974 <__aeabi_cdcmpeq>
 800398c:	bf0c      	ite	eq
 800398e:	2001      	moveq	r0, #1
 8003990:	2000      	movne	r0, #0
 8003992:	f85d fb08 	ldr.w	pc, [sp], #8
 8003996:	bf00      	nop

08003998 <__aeabi_dcmplt>:
 8003998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800399c:	f7ff ffea 	bl	8003974 <__aeabi_cdcmpeq>
 80039a0:	bf34      	ite	cc
 80039a2:	2001      	movcc	r0, #1
 80039a4:	2000      	movcs	r0, #0
 80039a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80039aa:	bf00      	nop

080039ac <__aeabi_dcmple>:
 80039ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80039b0:	f7ff ffe0 	bl	8003974 <__aeabi_cdcmpeq>
 80039b4:	bf94      	ite	ls
 80039b6:	2001      	movls	r0, #1
 80039b8:	2000      	movhi	r0, #0
 80039ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80039be:	bf00      	nop

080039c0 <__aeabi_dcmpge>:
 80039c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80039c4:	f7ff ffce 	bl	8003964 <__aeabi_cdrcmple>
 80039c8:	bf94      	ite	ls
 80039ca:	2001      	movls	r0, #1
 80039cc:	2000      	movhi	r0, #0
 80039ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80039d2:	bf00      	nop

080039d4 <__aeabi_dcmpgt>:
 80039d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80039d8:	f7ff ffc4 	bl	8003964 <__aeabi_cdrcmple>
 80039dc:	bf34      	ite	cc
 80039de:	2001      	movcc	r0, #1
 80039e0:	2000      	movcs	r0, #0
 80039e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80039e6:	bf00      	nop

080039e8 <__aeabi_d2f>:
 80039e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80039ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80039f0:	bf24      	itt	cs
 80039f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80039f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80039fa:	d90d      	bls.n	8003a18 <__aeabi_d2f+0x30>
 80039fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003a00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003a04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003a08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003a0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003a10:	bf08      	it	eq
 8003a12:	f020 0001 	biceq.w	r0, r0, #1
 8003a16:	4770      	bx	lr
 8003a18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003a1c:	d121      	bne.n	8003a62 <__aeabi_d2f+0x7a>
 8003a1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8003a22:	bfbc      	itt	lt
 8003a24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003a28:	4770      	bxlt	lr
 8003a2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003a2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003a32:	f1c2 0218 	rsb	r2, r2, #24
 8003a36:	f1c2 0c20 	rsb	ip, r2, #32
 8003a3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8003a3e:	fa20 f002 	lsr.w	r0, r0, r2
 8003a42:	bf18      	it	ne
 8003a44:	f040 0001 	orrne.w	r0, r0, #1
 8003a48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003a4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8003a50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8003a54:	ea40 000c 	orr.w	r0, r0, ip
 8003a58:	fa23 f302 	lsr.w	r3, r3, r2
 8003a5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003a60:	e7cc      	b.n	80039fc <__aeabi_d2f+0x14>
 8003a62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8003a66:	d107      	bne.n	8003a78 <__aeabi_d2f+0x90>
 8003a68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003a6c:	bf1e      	ittt	ne
 8003a6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8003a72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003a76:	4770      	bxne	lr
 8003a78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003a7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003a80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop

08003a88 <__aeabi_frsub>:
 8003a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8003a8c:	e002      	b.n	8003a94 <__addsf3>
 8003a8e:	bf00      	nop

08003a90 <__aeabi_fsub>:
 8003a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08003a94 <__addsf3>:
 8003a94:	0042      	lsls	r2, r0, #1
 8003a96:	bf1f      	itttt	ne
 8003a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8003a9c:	ea92 0f03 	teqne	r2, r3
 8003aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8003aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003aa8:	d06a      	beq.n	8003b80 <__addsf3+0xec>
 8003aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8003aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8003ab2:	bfc1      	itttt	gt
 8003ab4:	18d2      	addgt	r2, r2, r3
 8003ab6:	4041      	eorgt	r1, r0
 8003ab8:	4048      	eorgt	r0, r1
 8003aba:	4041      	eorgt	r1, r0
 8003abc:	bfb8      	it	lt
 8003abe:	425b      	neglt	r3, r3
 8003ac0:	2b19      	cmp	r3, #25
 8003ac2:	bf88      	it	hi
 8003ac4:	4770      	bxhi	lr
 8003ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8003aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003ad2:	bf18      	it	ne
 8003ad4:	4240      	negne	r0, r0
 8003ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003ae2:	bf18      	it	ne
 8003ae4:	4249      	negne	r1, r1
 8003ae6:	ea92 0f03 	teq	r2, r3
 8003aea:	d03f      	beq.n	8003b6c <__addsf3+0xd8>
 8003aec:	f1a2 0201 	sub.w	r2, r2, #1
 8003af0:	fa41 fc03 	asr.w	ip, r1, r3
 8003af4:	eb10 000c 	adds.w	r0, r0, ip
 8003af8:	f1c3 0320 	rsb	r3, r3, #32
 8003afc:	fa01 f103 	lsl.w	r1, r1, r3
 8003b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003b04:	d502      	bpl.n	8003b0c <__addsf3+0x78>
 8003b06:	4249      	negs	r1, r1
 8003b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8003b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003b10:	d313      	bcc.n	8003b3a <__addsf3+0xa6>
 8003b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003b16:	d306      	bcc.n	8003b26 <__addsf3+0x92>
 8003b18:	0840      	lsrs	r0, r0, #1
 8003b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8003b1e:	f102 0201 	add.w	r2, r2, #1
 8003b22:	2afe      	cmp	r2, #254	; 0xfe
 8003b24:	d251      	bcs.n	8003bca <__addsf3+0x136>
 8003b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8003b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003b2e:	bf08      	it	eq
 8003b30:	f020 0001 	biceq.w	r0, r0, #1
 8003b34:	ea40 0003 	orr.w	r0, r0, r3
 8003b38:	4770      	bx	lr
 8003b3a:	0049      	lsls	r1, r1, #1
 8003b3c:	eb40 0000 	adc.w	r0, r0, r0
 8003b40:	3a01      	subs	r2, #1
 8003b42:	bf28      	it	cs
 8003b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8003b48:	d2ed      	bcs.n	8003b26 <__addsf3+0x92>
 8003b4a:	fab0 fc80 	clz	ip, r0
 8003b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8003b52:	ebb2 020c 	subs.w	r2, r2, ip
 8003b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8003b5a:	bfaa      	itet	ge
 8003b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8003b60:	4252      	neglt	r2, r2
 8003b62:	4318      	orrge	r0, r3
 8003b64:	bfbc      	itt	lt
 8003b66:	40d0      	lsrlt	r0, r2
 8003b68:	4318      	orrlt	r0, r3
 8003b6a:	4770      	bx	lr
 8003b6c:	f092 0f00 	teq	r2, #0
 8003b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8003b74:	bf06      	itte	eq
 8003b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8003b7a:	3201      	addeq	r2, #1
 8003b7c:	3b01      	subne	r3, #1
 8003b7e:	e7b5      	b.n	8003aec <__addsf3+0x58>
 8003b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003b88:	bf18      	it	ne
 8003b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003b8e:	d021      	beq.n	8003bd4 <__addsf3+0x140>
 8003b90:	ea92 0f03 	teq	r2, r3
 8003b94:	d004      	beq.n	8003ba0 <__addsf3+0x10c>
 8003b96:	f092 0f00 	teq	r2, #0
 8003b9a:	bf08      	it	eq
 8003b9c:	4608      	moveq	r0, r1
 8003b9e:	4770      	bx	lr
 8003ba0:	ea90 0f01 	teq	r0, r1
 8003ba4:	bf1c      	itt	ne
 8003ba6:	2000      	movne	r0, #0
 8003ba8:	4770      	bxne	lr
 8003baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8003bae:	d104      	bne.n	8003bba <__addsf3+0x126>
 8003bb0:	0040      	lsls	r0, r0, #1
 8003bb2:	bf28      	it	cs
 8003bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8003bb8:	4770      	bx	lr
 8003bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8003bbe:	bf3c      	itt	cc
 8003bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8003bc4:	4770      	bxcc	lr
 8003bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8003bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003bd2:	4770      	bx	lr
 8003bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8003bd8:	bf16      	itet	ne
 8003bda:	4608      	movne	r0, r1
 8003bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8003be0:	4601      	movne	r1, r0
 8003be2:	0242      	lsls	r2, r0, #9
 8003be4:	bf06      	itte	eq
 8003be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8003bea:	ea90 0f01 	teqeq	r0, r1
 8003bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8003bf2:	4770      	bx	lr

08003bf4 <__aeabi_ui2f>:
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e004      	b.n	8003c04 <__aeabi_i2f+0x8>
 8003bfa:	bf00      	nop

08003bfc <__aeabi_i2f>:
 8003bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8003c00:	bf48      	it	mi
 8003c02:	4240      	negmi	r0, r0
 8003c04:	ea5f 0c00 	movs.w	ip, r0
 8003c08:	bf08      	it	eq
 8003c0a:	4770      	bxeq	lr
 8003c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8003c10:	4601      	mov	r1, r0
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	e01c      	b.n	8003c52 <__aeabi_l2f+0x2a>

08003c18 <__aeabi_ul2f>:
 8003c18:	ea50 0201 	orrs.w	r2, r0, r1
 8003c1c:	bf08      	it	eq
 8003c1e:	4770      	bxeq	lr
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e00a      	b.n	8003c3c <__aeabi_l2f+0x14>
 8003c26:	bf00      	nop

08003c28 <__aeabi_l2f>:
 8003c28:	ea50 0201 	orrs.w	r2, r0, r1
 8003c2c:	bf08      	it	eq
 8003c2e:	4770      	bxeq	lr
 8003c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8003c34:	d502      	bpl.n	8003c3c <__aeabi_l2f+0x14>
 8003c36:	4240      	negs	r0, r0
 8003c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003c3c:	ea5f 0c01 	movs.w	ip, r1
 8003c40:	bf02      	ittt	eq
 8003c42:	4684      	moveq	ip, r0
 8003c44:	4601      	moveq	r1, r0
 8003c46:	2000      	moveq	r0, #0
 8003c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8003c4c:	bf08      	it	eq
 8003c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8003c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8003c56:	fabc f28c 	clz	r2, ip
 8003c5a:	3a08      	subs	r2, #8
 8003c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8003c60:	db10      	blt.n	8003c84 <__aeabi_l2f+0x5c>
 8003c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8003c66:	4463      	add	r3, ip
 8003c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8003c6c:	f1c2 0220 	rsb	r2, r2, #32
 8003c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003c74:	fa20 f202 	lsr.w	r2, r0, r2
 8003c78:	eb43 0002 	adc.w	r0, r3, r2
 8003c7c:	bf08      	it	eq
 8003c7e:	f020 0001 	biceq.w	r0, r0, #1
 8003c82:	4770      	bx	lr
 8003c84:	f102 0220 	add.w	r2, r2, #32
 8003c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8003c8c:	f1c2 0220 	rsb	r2, r2, #32
 8003c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8003c94:	fa21 f202 	lsr.w	r2, r1, r2
 8003c98:	eb43 0002 	adc.w	r0, r3, r2
 8003c9c:	bf08      	it	eq
 8003c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8003ca2:	4770      	bx	lr

08003ca4 <__aeabi_fmul>:
 8003ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8003cac:	bf1e      	ittt	ne
 8003cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003cb2:	ea92 0f0c 	teqne	r2, ip
 8003cb6:	ea93 0f0c 	teqne	r3, ip
 8003cba:	d06f      	beq.n	8003d9c <__aeabi_fmul+0xf8>
 8003cbc:	441a      	add	r2, r3
 8003cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8003cc2:	0240      	lsls	r0, r0, #9
 8003cc4:	bf18      	it	ne
 8003cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8003cca:	d01e      	beq.n	8003d0a <__aeabi_fmul+0x66>
 8003ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8003cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8003cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8003cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003ce4:	bf3e      	ittt	cc
 8003ce6:	0049      	lslcc	r1, r1, #1
 8003ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8003cec:	005b      	lslcc	r3, r3, #1
 8003cee:	ea40 0001 	orr.w	r0, r0, r1
 8003cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8003cf6:	2afd      	cmp	r2, #253	; 0xfd
 8003cf8:	d81d      	bhi.n	8003d36 <__aeabi_fmul+0x92>
 8003cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003d02:	bf08      	it	eq
 8003d04:	f020 0001 	biceq.w	r0, r0, #1
 8003d08:	4770      	bx	lr
 8003d0a:	f090 0f00 	teq	r0, #0
 8003d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8003d12:	bf08      	it	eq
 8003d14:	0249      	lsleq	r1, r1, #9
 8003d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8003d1e:	3a7f      	subs	r2, #127	; 0x7f
 8003d20:	bfc2      	ittt	gt
 8003d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8003d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003d2a:	4770      	bxgt	lr
 8003d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	3a01      	subs	r2, #1
 8003d36:	dc5d      	bgt.n	8003df4 <__aeabi_fmul+0x150>
 8003d38:	f112 0f19 	cmn.w	r2, #25
 8003d3c:	bfdc      	itt	le
 8003d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8003d42:	4770      	bxle	lr
 8003d44:	f1c2 0200 	rsb	r2, r2, #0
 8003d48:	0041      	lsls	r1, r0, #1
 8003d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8003d4e:	f1c2 0220 	rsb	r2, r2, #32
 8003d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8003d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8003d5a:	f140 0000 	adc.w	r0, r0, #0
 8003d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8003d62:	bf08      	it	eq
 8003d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8003d68:	4770      	bx	lr
 8003d6a:	f092 0f00 	teq	r2, #0
 8003d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8003d72:	bf02      	ittt	eq
 8003d74:	0040      	lsleq	r0, r0, #1
 8003d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8003d7a:	3a01      	subeq	r2, #1
 8003d7c:	d0f9      	beq.n	8003d72 <__aeabi_fmul+0xce>
 8003d7e:	ea40 000c 	orr.w	r0, r0, ip
 8003d82:	f093 0f00 	teq	r3, #0
 8003d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003d8a:	bf02      	ittt	eq
 8003d8c:	0049      	lsleq	r1, r1, #1
 8003d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8003d92:	3b01      	subeq	r3, #1
 8003d94:	d0f9      	beq.n	8003d8a <__aeabi_fmul+0xe6>
 8003d96:	ea41 010c 	orr.w	r1, r1, ip
 8003d9a:	e78f      	b.n	8003cbc <__aeabi_fmul+0x18>
 8003d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003da0:	ea92 0f0c 	teq	r2, ip
 8003da4:	bf18      	it	ne
 8003da6:	ea93 0f0c 	teqne	r3, ip
 8003daa:	d00a      	beq.n	8003dc2 <__aeabi_fmul+0x11e>
 8003dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003db0:	bf18      	it	ne
 8003db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003db6:	d1d8      	bne.n	8003d6a <__aeabi_fmul+0xc6>
 8003db8:	ea80 0001 	eor.w	r0, r0, r1
 8003dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003dc0:	4770      	bx	lr
 8003dc2:	f090 0f00 	teq	r0, #0
 8003dc6:	bf17      	itett	ne
 8003dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8003dcc:	4608      	moveq	r0, r1
 8003dce:	f091 0f00 	teqne	r1, #0
 8003dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8003dd6:	d014      	beq.n	8003e02 <__aeabi_fmul+0x15e>
 8003dd8:	ea92 0f0c 	teq	r2, ip
 8003ddc:	d101      	bne.n	8003de2 <__aeabi_fmul+0x13e>
 8003dde:	0242      	lsls	r2, r0, #9
 8003de0:	d10f      	bne.n	8003e02 <__aeabi_fmul+0x15e>
 8003de2:	ea93 0f0c 	teq	r3, ip
 8003de6:	d103      	bne.n	8003df0 <__aeabi_fmul+0x14c>
 8003de8:	024b      	lsls	r3, r1, #9
 8003dea:	bf18      	it	ne
 8003dec:	4608      	movne	r0, r1
 8003dee:	d108      	bne.n	8003e02 <__aeabi_fmul+0x15e>
 8003df0:	ea80 0001 	eor.w	r0, r0, r1
 8003df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003e00:	4770      	bx	lr
 8003e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8003e0a:	4770      	bx	lr

08003e0c <__aeabi_fdiv>:
 8003e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8003e14:	bf1e      	ittt	ne
 8003e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003e1a:	ea92 0f0c 	teqne	r2, ip
 8003e1e:	ea93 0f0c 	teqne	r3, ip
 8003e22:	d069      	beq.n	8003ef8 <__aeabi_fdiv+0xec>
 8003e24:	eba2 0203 	sub.w	r2, r2, r3
 8003e28:	ea80 0c01 	eor.w	ip, r0, r1
 8003e2c:	0249      	lsls	r1, r1, #9
 8003e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8003e32:	d037      	beq.n	8003ea4 <__aeabi_fdiv+0x98>
 8003e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8003e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8003e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf38      	it	cc
 8003e48:	005b      	lslcc	r3, r3, #1
 8003e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8003e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8003e52:	428b      	cmp	r3, r1
 8003e54:	bf24      	itt	cs
 8003e56:	1a5b      	subcs	r3, r3, r1
 8003e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8003e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8003e60:	bf24      	itt	cs
 8003e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8003e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8003e6e:	bf24      	itt	cs
 8003e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8003e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8003e7c:	bf24      	itt	cs
 8003e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8003e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	bf18      	it	ne
 8003e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8003e8e:	d1e0      	bne.n	8003e52 <__aeabi_fdiv+0x46>
 8003e90:	2afd      	cmp	r2, #253	; 0xfd
 8003e92:	f63f af50 	bhi.w	8003d36 <__aeabi_fmul+0x92>
 8003e96:	428b      	cmp	r3, r1
 8003e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003e9c:	bf08      	it	eq
 8003e9e:	f020 0001 	biceq.w	r0, r0, #1
 8003ea2:	4770      	bx	lr
 8003ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8003ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003eac:	327f      	adds	r2, #127	; 0x7f
 8003eae:	bfc2      	ittt	gt
 8003eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8003eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003eb8:	4770      	bxgt	lr
 8003eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	e737      	b.n	8003d36 <__aeabi_fmul+0x92>
 8003ec6:	f092 0f00 	teq	r2, #0
 8003eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8003ece:	bf02      	ittt	eq
 8003ed0:	0040      	lsleq	r0, r0, #1
 8003ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8003ed6:	3a01      	subeq	r2, #1
 8003ed8:	d0f9      	beq.n	8003ece <__aeabi_fdiv+0xc2>
 8003eda:	ea40 000c 	orr.w	r0, r0, ip
 8003ede:	f093 0f00 	teq	r3, #0
 8003ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003ee6:	bf02      	ittt	eq
 8003ee8:	0049      	lsleq	r1, r1, #1
 8003eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8003eee:	3b01      	subeq	r3, #1
 8003ef0:	d0f9      	beq.n	8003ee6 <__aeabi_fdiv+0xda>
 8003ef2:	ea41 010c 	orr.w	r1, r1, ip
 8003ef6:	e795      	b.n	8003e24 <__aeabi_fdiv+0x18>
 8003ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003efc:	ea92 0f0c 	teq	r2, ip
 8003f00:	d108      	bne.n	8003f14 <__aeabi_fdiv+0x108>
 8003f02:	0242      	lsls	r2, r0, #9
 8003f04:	f47f af7d 	bne.w	8003e02 <__aeabi_fmul+0x15e>
 8003f08:	ea93 0f0c 	teq	r3, ip
 8003f0c:	f47f af70 	bne.w	8003df0 <__aeabi_fmul+0x14c>
 8003f10:	4608      	mov	r0, r1
 8003f12:	e776      	b.n	8003e02 <__aeabi_fmul+0x15e>
 8003f14:	ea93 0f0c 	teq	r3, ip
 8003f18:	d104      	bne.n	8003f24 <__aeabi_fdiv+0x118>
 8003f1a:	024b      	lsls	r3, r1, #9
 8003f1c:	f43f af4c 	beq.w	8003db8 <__aeabi_fmul+0x114>
 8003f20:	4608      	mov	r0, r1
 8003f22:	e76e      	b.n	8003e02 <__aeabi_fmul+0x15e>
 8003f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003f28:	bf18      	it	ne
 8003f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003f2e:	d1ca      	bne.n	8003ec6 <__aeabi_fdiv+0xba>
 8003f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003f34:	f47f af5c 	bne.w	8003df0 <__aeabi_fmul+0x14c>
 8003f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8003f3c:	f47f af3c 	bne.w	8003db8 <__aeabi_fmul+0x114>
 8003f40:	e75f      	b.n	8003e02 <__aeabi_fmul+0x15e>
 8003f42:	bf00      	nop

08003f44 <__gesf2>:
 8003f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003f48:	e006      	b.n	8003f58 <__cmpsf2+0x4>
 8003f4a:	bf00      	nop

08003f4c <__lesf2>:
 8003f4c:	f04f 0c01 	mov.w	ip, #1
 8003f50:	e002      	b.n	8003f58 <__cmpsf2+0x4>
 8003f52:	bf00      	nop

08003f54 <__cmpsf2>:
 8003f54:	f04f 0c01 	mov.w	ip, #1
 8003f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003f68:	bf18      	it	ne
 8003f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003f6e:	d011      	beq.n	8003f94 <__cmpsf2+0x40>
 8003f70:	b001      	add	sp, #4
 8003f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8003f76:	bf18      	it	ne
 8003f78:	ea90 0f01 	teqne	r0, r1
 8003f7c:	bf58      	it	pl
 8003f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8003f82:	bf88      	it	hi
 8003f84:	17c8      	asrhi	r0, r1, #31
 8003f86:	bf38      	it	cc
 8003f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8003f8c:	bf18      	it	ne
 8003f8e:	f040 0001 	orrne.w	r0, r0, #1
 8003f92:	4770      	bx	lr
 8003f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003f98:	d102      	bne.n	8003fa0 <__cmpsf2+0x4c>
 8003f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8003f9e:	d105      	bne.n	8003fac <__cmpsf2+0x58>
 8003fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003fa4:	d1e4      	bne.n	8003f70 <__cmpsf2+0x1c>
 8003fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8003faa:	d0e1      	beq.n	8003f70 <__cmpsf2+0x1c>
 8003fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop

08003fb4 <__aeabi_cfrcmple>:
 8003fb4:	4684      	mov	ip, r0
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	4661      	mov	r1, ip
 8003fba:	e7ff      	b.n	8003fbc <__aeabi_cfcmpeq>

08003fbc <__aeabi_cfcmpeq>:
 8003fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8003fbe:	f7ff ffc9 	bl	8003f54 <__cmpsf2>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	bf48      	it	mi
 8003fc6:	f110 0f00 	cmnmi.w	r0, #0
 8003fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08003fcc <__aeabi_fcmpeq>:
 8003fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003fd0:	f7ff fff4 	bl	8003fbc <__aeabi_cfcmpeq>
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2001      	moveq	r0, #1
 8003fd8:	2000      	movne	r0, #0
 8003fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8003fde:	bf00      	nop

08003fe0 <__aeabi_fcmplt>:
 8003fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003fe4:	f7ff ffea 	bl	8003fbc <__aeabi_cfcmpeq>
 8003fe8:	bf34      	ite	cc
 8003fea:	2001      	movcc	r0, #1
 8003fec:	2000      	movcs	r0, #0
 8003fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8003ff2:	bf00      	nop

08003ff4 <__aeabi_fcmple>:
 8003ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003ff8:	f7ff ffe0 	bl	8003fbc <__aeabi_cfcmpeq>
 8003ffc:	bf94      	ite	ls
 8003ffe:	2001      	movls	r0, #1
 8004000:	2000      	movhi	r0, #0
 8004002:	f85d fb08 	ldr.w	pc, [sp], #8
 8004006:	bf00      	nop

08004008 <__aeabi_fcmpge>:
 8004008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800400c:	f7ff ffd2 	bl	8003fb4 <__aeabi_cfrcmple>
 8004010:	bf94      	ite	ls
 8004012:	2001      	movls	r0, #1
 8004014:	2000      	movhi	r0, #0
 8004016:	f85d fb08 	ldr.w	pc, [sp], #8
 800401a:	bf00      	nop

0800401c <__aeabi_fcmpgt>:
 800401c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004020:	f7ff ffc8 	bl	8003fb4 <__aeabi_cfrcmple>
 8004024:	bf34      	ite	cc
 8004026:	2001      	movcc	r0, #1
 8004028:	2000      	movcs	r0, #0
 800402a:	f85d fb08 	ldr.w	pc, [sp], #8
 800402e:	bf00      	nop

08004030 <__aeabi_f2iz>:
 8004030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8004034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8004038:	d30f      	bcc.n	800405a <__aeabi_f2iz+0x2a>
 800403a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800403e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8004042:	d90d      	bls.n	8004060 <__aeabi_f2iz+0x30>
 8004044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8004048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800404c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8004050:	fa23 f002 	lsr.w	r0, r3, r2
 8004054:	bf18      	it	ne
 8004056:	4240      	negne	r0, r0
 8004058:	4770      	bx	lr
 800405a:	f04f 0000 	mov.w	r0, #0
 800405e:	4770      	bx	lr
 8004060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8004064:	d101      	bne.n	800406a <__aeabi_f2iz+0x3a>
 8004066:	0242      	lsls	r2, r0, #9
 8004068:	d105      	bne.n	8004076 <__aeabi_f2iz+0x46>
 800406a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800406e:	bf08      	it	eq
 8004070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004074:	4770      	bx	lr
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	4770      	bx	lr

0800407c <check_can_pending>:


extern void pn_can_sync_layer_recCAN(uint32_t id, uint8_t *bytes, uint8_t len);


uint32_t check_can_pending(CAN_HandleTypeDef *can) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

	return HAL_CAN_IsTxMessagePending(can, TxMailboxes);
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <check_can_pending+0x20>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f002 fe68 	bl	8006d60 <HAL_CAN_IsTxMessagePending>
 8004090:	4603      	mov	r3, r0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000270 	.word	0x20000270

080040a0 <abort_can_message_transmit>:


uint8_t abort_can_message_transmit(CAN_HandleTypeDef *can, uint32_t tx_mailbox) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef state;
	state = HAL_CAN_AbortTxRequest(can, tx_mailbox);
 80040aa:	6839      	ldr	r1, [r7, #0]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f002 fddf 	bl	8006c70 <HAL_CAN_AbortTxRequest>
 80040b2:	4603      	mov	r3, r0
 80040b4:	73fb      	strb	r3, [r7, #15]

	if (state == HAL_OK) {
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <abort_can_message_transmit+0x20>

		return 1;
 80040bc:	2301      	movs	r3, #1
 80040be:	e005      	b.n	80040cc <abort_can_message_transmit+0x2c>

	} else if (state == HAL_ERROR) {
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <abort_can_message_transmit+0x2a>

		return 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <abort_can_message_transmit+0x2c>
	}

	return 0;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <check_can_free_mailbox>:


uint32_t check_can_free_mailbox(CAN_HandleTypeDef *can) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

	uint32_t free_mailbox = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
	uint32_t temp_mailbox = HAL_CAN_GetTxMailboxesFreeLevel(can);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f002 fe09 	bl	8006cf8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80040e6:	60b8      	str	r0, [r7, #8]

	switch (temp_mailbox) {
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d00f      	beq.n	800410e <check_can_free_mailbox+0x3a>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d80f      	bhi.n	8004114 <check_can_free_mailbox+0x40>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d003      	beq.n	8004102 <check_can_free_mailbox+0x2e>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d003      	beq.n	8004108 <check_can_free_mailbox+0x34>
 8004100:	e008      	b.n	8004114 <check_can_free_mailbox+0x40>

		case 1:
			free_mailbox = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
			break;
 8004106:	e008      	b.n	800411a <check_can_free_mailbox+0x46>
		case 2:
			free_mailbox = 2;
 8004108:	2302      	movs	r3, #2
 800410a:	60fb      	str	r3, [r7, #12]
			break;
 800410c:	e005      	b.n	800411a <check_can_free_mailbox+0x46>
		case 3:
			free_mailbox = 3;
 800410e:	2303      	movs	r3, #3
 8004110:	60fb      	str	r3, [r7, #12]
			break;
 8004112:	e002      	b.n	800411a <check_can_free_mailbox+0x46>
		default:
			free_mailbox = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
			break;
 8004118:	bf00      	nop
	}

	return free_mailbox;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <canSend>:


int canSend(uint32_t id, uint8_t *bytes, uint8_t len) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	71fb      	strb	r3, [r7, #7]

	return (transmit_can_message(&hcan, id, bytes, len));
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	4803      	ldr	r0, [pc, #12]	; (8004148 <canSend+0x24>)
 800413a:	f000 f807 	bl	800414c <transmit_can_message>
 800413e:	4603      	mov	r3, r0

}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000b14 	.word	0x20000b14

0800414c <transmit_can_message>:


// transmit the can message
CAN_StatusType_Def transmit_can_message(CAN_HandleTypeDef *can, uint32_t can_id, uint8_t data[], uint8_t data_len) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	70fb      	strb	r3, [r7, #3]

	CAN_StatusType_Def can_tx_status = TRANSMIT_ERROR;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]

	if (check_can_free_mailbox(can) == 0) {
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff ffb8 	bl	80040d4 <check_can_free_mailbox>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d113      	bne.n	8004192 <transmit_can_message+0x46>

		if (check_can_pending(can) == -1) {
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ff86 	bl	800407c <check_can_pending>
 8004170:	4603      	mov	r3, r0
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004176:	d10c      	bne.n	8004192 <transmit_can_message+0x46>

			can_tx_status = NO_FREE_MAILBOX;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]

			if (abort_can_message_transmit(can, TxMailboxes) != 1) {
 800417c:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <transmit_can_message+0x8c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff ff8c 	bl	80040a0 <abort_can_message_transmit>
 8004188:	4603      	mov	r3, r0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d001      	beq.n	8004192 <transmit_can_message+0x46>

				can_tx_status = CAN_PENDING;
 800418e:	2302      	movs	r3, #2
 8004190:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	TxHeader.ExtId = can_id;
 8004192:	4a12      	ldr	r2, [pc, #72]	; (80041dc <transmit_can_message+0x90>)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <transmit_can_message+0x90>)
 800419a:	2200      	movs	r2, #0
 800419c:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <transmit_can_message+0x90>)
 80041a0:	2204      	movs	r2, #4
 80041a2:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = data_len;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <transmit_can_message+0x90>)
 80041a8:	6113      	str	r3, [r2, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <transmit_can_message+0x90>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_AddTxMessage(can, &TxHeader, data, &TxMailboxes) != HAL_OK) {
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <transmit_can_message+0x8c>)
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4909      	ldr	r1, [pc, #36]	; (80041dc <transmit_can_message+0x90>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f002 fc80 	bl	8006abc <HAL_CAN_AddTxMessage>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <transmit_can_message+0x7c>

		can_tx_status = TRANSMIT_ERROR;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
 80041c6:	e001      	b.n	80041cc <transmit_can_message+0x80>

	} else {

		can_tx_status = TRANSMIT_OK;
 80041c8:	2303      	movs	r3, #3
 80041ca:	75fb      	strb	r3, [r7, #23]
	}

	return can_tx_status;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000270 	.word	0x20000270
 80041dc:	20000274 	.word	0x20000274

080041e0 <HAL_CAN_RxFifo0MsgPendingCallback>:


// CAN Receive Section
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *can) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxDataCan1) != HAL_OK) {
 80041e8:	4b9b      	ldr	r3, [pc, #620]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80041ea:	4a9c      	ldr	r2, [pc, #624]	; (800445c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80041ec:	2100      	movs	r1, #0
 80041ee:	489c      	ldr	r0, [pc, #624]	; (8004460 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 80041f0:	f002 fdd9 	bl	8006da6 <HAL_CAN_GetRxMessage>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8241 	bne.w	800467e <HAL_CAN_RxFifo0MsgPendingCallback+0x49e>

		return;
	}

	uint32_t Receive_id = RxHeader.ExtId;
 80041fc:	4b97      	ldr	r3, [pc, #604]	; (800445c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	60fb      	str	r3, [r7, #12]
	uint32_t data_len = RxHeader.DLC;
 8004202:	4b96      	ldr	r3, [pc, #600]	; (800445c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	60bb      	str	r3, [r7, #8]

	if ((Receive_id & 0xf4) == 0xf4){
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 800420e:	2bf4      	cmp	r3, #244	; 0xf4
 8004210:	f000 8237 	beq.w	8004682 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a2>
		return;
	}

	switch (Receive_id) {
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a93      	ldr	r2, [pc, #588]	; (8004464 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8004218:	4293      	cmp	r3, r2
 800421a:	f000 80f2 	beq.w	8004402 <HAL_CAN_RxFifo0MsgPendingCallback+0x222>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a90      	ldr	r2, [pc, #576]	; (8004464 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8004222:	4293      	cmp	r3, r2
 8004224:	f200 8222 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a8f      	ldr	r2, [pc, #572]	; (8004468 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800422c:	4293      	cmp	r3, r2
 800422e:	f000 8092 	beq.w	8004356 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a8c      	ldr	r2, [pc, #560]	; (8004468 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8004236:	4293      	cmp	r3, r2
 8004238:	f200 8218 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a8b      	ldr	r2, [pc, #556]	; (800446c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	f000 8082 	beq.w	800434a <HAL_CAN_RxFifo0MsgPendingCallback+0x16a>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a88      	ldr	r2, [pc, #544]	; (800446c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	f200 820e 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a87      	ldr	r2, [pc, #540]	; (8004470 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8004254:	4293      	cmp	r3, r2
 8004256:	f000 80d0 	beq.w	80043fa <HAL_CAN_RxFifo0MsgPendingCallback+0x21a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a84      	ldr	r2, [pc, #528]	; (8004470 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f200 8204 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a83      	ldr	r2, [pc, #524]	; (8004474 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8004268:	4293      	cmp	r3, r2
 800426a:	f000 808e 	beq.w	800438a <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a80      	ldr	r2, [pc, #512]	; (8004474 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8004272:	4293      	cmp	r3, r2
 8004274:	f200 81fa 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a7f      	ldr	r2, [pc, #508]	; (8004478 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d056      	beq.n	800432e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a7d      	ldr	r2, [pc, #500]	; (8004478 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8004284:	4293      	cmp	r3, r2
 8004286:	f200 81f1 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a7b      	ldr	r2, [pc, #492]	; (800447c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d051      	beq.n	8004336 <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a79      	ldr	r2, [pc, #484]	; (800447c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f200 81e8 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a78      	ldr	r2, [pc, #480]	; (8004480 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	f000 80b7 	beq.w	8004414 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a75      	ldr	r2, [pc, #468]	; (8004480 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f200 81de 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a74      	ldr	r2, [pc, #464]	; (8004484 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d064      	beq.n	8004382 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a2>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a72      	ldr	r2, [pc, #456]	; (8004484 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	f200 81d5 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a70      	ldr	r2, [pc, #448]	; (8004488 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d03b      	beq.n	8004342 <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a6e      	ldr	r2, [pc, #440]	; (8004488 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	f200 81cc 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a6d      	ldr	r2, [pc, #436]	; (800448c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d048      	beq.n	800436e <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a6b      	ldr	r2, [pc, #428]	; (800448c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	f200 81c3 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a69      	ldr	r2, [pc, #420]	; (8004490 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d045      	beq.n	800437a <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a67      	ldr	r2, [pc, #412]	; (8004490 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	f200 81ba 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a66      	ldr	r2, [pc, #408]	; (8004494 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d030      	beq.n	8004362 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4a64      	ldr	r2, [pc, #400]	; (8004494 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	f200 81b1 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a62      	ldr	r2, [pc, #392]	; (8004498 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d03f      	beq.n	8004392 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b2>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a60      	ldr	r2, [pc, #384]	; (8004498 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f200 81a8 	bhi.w	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a5f      	ldr	r2, [pc, #380]	; (800449c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d074      	beq.n	800440e <HAL_CAN_RxFifo0MsgPendingCallback+0x22e>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a5e      	ldr	r2, [pc, #376]	; (80044a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d036      	beq.n	800439a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>

			load_cmd_can_ack_data(RxDataCan1[0], RxDataCan1[1]);
			break;

		default:
			break;
 800432c:	e19e      	b.n	800466c <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>
			Load_New_Year_Date_To_Display(RxDataCan1);
 800432e:	484a      	ldr	r0, [pc, #296]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004330:	f000 fee0 	bl	80050f4 <Load_New_Year_Date_To_Display>
			break;
 8004334:	e19b      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Passkey_To_Display(RxDataCan1, Receive_id, data_len);
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	4847      	ldr	r0, [pc, #284]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800433c:	f000 feba 	bl	80050b4 <Load_Passkey_To_Display>
			break;
 8004340:	e195      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_OdoTrip_Data_To_Display(RxDataCan1);
 8004342:	4845      	ldr	r0, [pc, #276]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004344:	f000 fe56 	bl	8004ff4 <Load_OdoTrip_Data_To_Display>
			break;
 8004348:	e191      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Username_Data(RxDataCan1, Receive_id, data_len);
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	68f9      	ldr	r1, [r7, #12]
 800434e:	4842      	ldr	r0, [pc, #264]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004350:	f000 ff0a 	bl	8005168 <Load_Username_Data>
			break;
 8004354:	e18b      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Bikename_Data(RxDataCan1, Receive_id, data_len);
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	68f9      	ldr	r1, [r7, #12]
 800435a:	483f      	ldr	r0, [pc, #252]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800435c:	f000 ff24 	bl	80051a8 <Load_Bikename_Data>
			break;
 8004360:	e185      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Time_To_Display(RxDataCan1, Receive_id, data_len);
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	68f9      	ldr	r1, [r7, #12]
 8004366:	483c      	ldr	r0, [pc, #240]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004368:	f000 fc88 	bl	8004c7c <Load_Time_To_Display>
			break;
 800436c:	e17f      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Auxiliary_Info_To_Display(RxDataCan1, Receive_id, data_len);
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	4839      	ldr	r0, [pc, #228]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004374:	f000 fd7c 	bl	8004e70 <Load_Auxiliary_Info_To_Display>
			break;
 8004378:	e179      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_SoC_ETA_To_Display(RxDataCan1);
 800437a:	4837      	ldr	r0, [pc, #220]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800437c:	f000 fcda 	bl	8004d34 <Load_SoC_ETA_To_Display>
			break;
 8004380:	e175      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Indicator_Icons_To_Display(RxDataCan1);
 8004382:	4835      	ldr	r0, [pc, #212]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004384:	f000 fde2 	bl	8004f4c <Load_Indicator_Icons_To_Display>
			break;
 8004388:	e171      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Powertrain_Data(RxDataCan1);
 800438a:	4833      	ldr	r0, [pc, #204]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800438c:	f000 ff24 	bl	80051d8 <Load_Powertrain_Data>
			break;
 8004390:	e16d      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_OTA_Data(RxDataCan1);
 8004392:	4831      	ldr	r0, [pc, #196]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004394:	f000 ff54 	bl	8005240 <Load_OTA_Data>
			break;
 8004398:	e169      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			tier1_cmd_can = OTA_UI;
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800439c:	2208      	movs	r2, #8
 800439e:	701a      	strb	r2, [r3, #0]
			tier2_cmd_can = RxDataCan1[0];
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80043a6:	701a      	strb	r2, [r3, #0]
			ota_trigger_from_esp = 1;
 80043a8:	4b40      	ldr	r3, [pc, #256]	; (80044ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
			if ((tier1_cmd_can == OTA_UI) && (tier2_cmd_can == FIRMWARE_INSTALLATION_SUCCESSFUL)) {
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d10a      	bne.n	80043cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 80043b6:	4b3c      	ldr	r3, [pc, #240]	; (80044a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b0b      	cmp	r3, #11
 80043bc:	d106      	bne.n	80043cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
				ota_successful_flag = 1;
 80043be:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
				ota_successful_CAN_ACK_SEND = 0;
 80043c4:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e00d      	b.n	80043e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
			} else if ((tier1_cmd_can == OTA_UI) && (tier2_cmd_can == FIRMWARE_INSTALLATION_FAILED)) {
 80043cc:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d109      	bne.n	80043e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 80043d4:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d105      	bne.n	80043e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
				ota_failed_flag = 1;
 80043dc:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
				ota_failure_CAN_ACK_SEND = 0;
 80043e2:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
			load_cmd_can_ack_data(tier1_cmd_can, tier2_cmd_can);
 80043e8:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4a2e      	ldr	r2, [pc, #184]	; (80044a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80043ee:	7812      	ldrb	r2, [r2, #0]
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f9ea 	bl	80047cc <load_cmd_can_ack_data>
			break;
 80043f8:	e139      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Load_Network_Strength_Value(RxDataCan1);
 80043fa:	4817      	ldr	r0, [pc, #92]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80043fc:	f000 ff38 	bl	8005270 <Load_Network_Strength_Value>
			break;
 8004400:	e135      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			series = RxDataCan1[0];
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800440a:	601a      	str	r2, [r3, #0]
			break;
 800440c:	e12f      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			Jump_To_Bootloader();
 800440e:	f000 ff3f 	bl	8005290 <Jump_To_Bootloader>
			break;
 8004412:	e12c      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			tier1_cmd_can = RxDataCan1[0];
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8004416:	781a      	ldrb	r2, [r3, #0]
 8004418:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800441a:	701a      	strb	r2, [r3, #0]
			tier2_cmd_can = RxDataCan1[1];
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800441e:	785a      	ldrb	r2, [r3, #1]
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8004422:	701a      	strb	r2, [r3, #0]
			if (tier1_cmd_can == AC_CHARGING) {
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d15c      	bne.n	80044e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x306>
				ending_splashscreen_flag = 0;
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
				ending_splashscreen_timer = 0;
 8004432:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
				App_Flush_Co_Buffer(phost);			// Clear buffer
 8004438:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f009 fbf9 	bl	800dc34 <App_Flush_Co_Buffer>
				Charging_just_started = 1;
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]
				if (allow_animation == 0) {
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d143      	bne.n	80044d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>
					allow_animation = 1;
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e046      	b.n	80044e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x306>
 8004458:	200002a8 	.word	0x200002a8
 800445c:	2000028c 	.word	0x2000028c
 8004460:	20000b14 	.word	0x20000b14
 8004464:	0860fcfa 	.word	0x0860fcfa
 8004468:	0851fcfa 	.word	0x0851fcfa
 800446c:	0850fcfa 	.word	0x0850fcfa
 8004470:	0814fcfa 	.word	0x0814fcfa
 8004474:	0812fcfa 	.word	0x0812fcfa
 8004478:	0811fcfa 	.word	0x0811fcfa
 800447c:	0810fcfa 	.word	0x0810fcfa
 8004480:	080ffcfa 	.word	0x080ffcfa
 8004484:	080efcfa 	.word	0x080efcfa
 8004488:	080dfcfa 	.word	0x080dfcfa
 800448c:	080bfcfa 	.word	0x080bfcfa
 8004490:	080afcfa 	.word	0x080afcfa
 8004494:	0809fcfa 	.word	0x0809fcfa
 8004498:	0002fcfb 	.word	0x0002fcfb
 800449c:	0001fcfa 	.word	0x0001fcfa
 80044a0:	0001fcfb 	.word	0x0001fcfb
 80044a4:	200009c8 	.word	0x200009c8
 80044a8:	20000539 	.word	0x20000539
 80044ac:	200009bc 	.word	0x200009bc
 80044b0:	20000498 	.word	0x20000498
 80044b4:	20000900 	.word	0x20000900
 80044b8:	20000468 	.word	0x20000468
 80044bc:	20000458 	.word	0x20000458
 80044c0:	200003b4 	.word	0x200003b4
 80044c4:	20000534 	.word	0x20000534
 80044c8:	200004b4 	.word	0x200004b4
 80044cc:	20000bc8 	.word	0x20000bc8
 80044d0:	2000057c 	.word	0x2000057c
 80044d4:	200003c8 	.word	0x200003c8
				} else if (allow_animation == 1) {
 80044d8:	4b6c      	ldr	r3, [pc, #432]	; (800468c <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x306>
					allow_animation = 0;
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
			if (tier1_cmd_can == DC_CHARGING) {
 80044e6:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	d11b      	bne.n	8004526 <HAL_CAN_RxFifo0MsgPendingCallback+0x346>
				ending_splashscreen_flag = 0;
 80044ee:	4b69      	ldr	r3, [pc, #420]	; (8004694 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
				ending_splashscreen_timer = 0;
 80044f4:	4b68      	ldr	r3, [pc, #416]	; (8004698 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
				if (tier2_cmd_can == CHARGING_INITIATED) {
 80044fa:	4b68      	ldr	r3, [pc, #416]	; (800469c <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d111      	bne.n	8004526 <HAL_CAN_RxFifo0MsgPendingCallback+0x346>
					Charging_just_started = 1;
 8004502:	4b67      	ldr	r3, [pc, #412]	; (80046a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
					if (allow_animation == 0) {
 8004508:	4b60      	ldr	r3, [pc, #384]	; (800468c <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>
						allow_animation = 1;
 8004510:	4b5e      	ldr	r3, [pc, #376]	; (800468c <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e006      	b.n	8004526 <HAL_CAN_RxFifo0MsgPendingCallback+0x346>
					} else if (allow_animation == 1) {
 8004518:	4b5c      	ldr	r3, [pc, #368]	; (800468c <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d102      	bne.n	8004526 <HAL_CAN_RxFifo0MsgPendingCallback+0x346>
						allow_animation = 0;
 8004520:	4b5a      	ldr	r3, [pc, #360]	; (800468c <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
			if (tier1_cmd_can == STARTUP_SPLASHSCREEN) {
 8004526:	4b5a      	ldr	r3, [pc, #360]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d111      	bne.n	8004552 <HAL_CAN_RxFifo0MsgPendingCallback+0x372>
				starting_splashscreen_flag = 1;
 800452e:	4b5d      	ldr	r3, [pc, #372]	; (80046a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c4>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
				ending_splashscreen_flag = 0;
 8004534:	4b57      	ldr	r3, [pc, #348]	; (8004694 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
				ending_splashscreen_timer = 0;
 800453a:	4b57      	ldr	r3, [pc, #348]	; (8004698 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
				starting_splashscreen_transparency_level = 0;
 8004540:	4b59      	ldr	r3, [pc, #356]	; (80046a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
				dot_count = 0;
 8004546:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
				display_power_up();
 800454c:	f00a fe98 	bl	800f280 <display_power_up>
 8004550:	e083      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if (tier1_cmd_can == ENDING_SPLASHSCREEN) {
 8004552:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d11b      	bne.n	8004592 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b2>
				ending_splashscreen_flag = 1;
 800455a:	4b4e      	ldr	r3, [pc, #312]	; (8004694 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
				starting_splashscreen_flag = 0;
 8004560:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c4>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
				birthday_message_flag = 0;
 8004566:	4b52      	ldr	r3, [pc, #328]	; (80046b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d0>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
				new_year_message_flag = 0;
 800456c:	4b51      	ldr	r3, [pc, #324]	; (80046b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d4>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
				starting_splashscreen_timer = 0;
 8004572:	4b51      	ldr	r3, [pc, #324]	; (80046b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d8>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
				birthday_message_timer = 0;
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <HAL_CAN_RxFifo0MsgPendingCallback+0x4dc>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
				new_year_message_timer = 0;
 800457e:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e0>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
				kill_transparency_level = 180;
 8004584:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8004586:	22b4      	movs	r2, #180	; 0xb4
 8004588:	601a      	str	r2, [r3, #0]
				continue_scaling = 1;
 800458a:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e063      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if ((tier1_cmd_can == BLE_UI) && (tier2_cmd_can == PAIRING_SUCCESSFUL)) {
 8004592:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b0a      	cmp	r3, #10
 8004598:	d10b      	bne.n	80045b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d2>
 800459a:	4b40      	ldr	r3, [pc, #256]	; (800469c <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d107      	bne.n	80045b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d2>
				if (key_status == key_sw_ON) {
 80045a2:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d157      	bne.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
					pairing_successful_flag = 1;
 80045aa:	4b49      	ldr	r3, [pc, #292]	; (80046d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f0>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
				if (key_status == key_sw_ON) {
 80045b0:	e053      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if ((tier1_cmd_can == BLE_UI) && (tier2_cmd_can == PAIRING_FAILED)) {
 80045b2:	4b37      	ldr	r3, [pc, #220]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b0a      	cmp	r3, #10
 80045b8:	d10b      	bne.n	80045d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f2>
 80045ba:	4b38      	ldr	r3, [pc, #224]	; (800469c <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f2>
				if (key_status == key_sw_ON) {
 80045c2:	4b42      	ldr	r3, [pc, #264]	; (80046cc <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d147      	bne.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
					pairing_failed_flag = 1;
 80045ca:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f4>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
				if (key_status == key_sw_ON) {
 80045d0:	e043      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if ((tier1_cmd_can == BLE_UI) && (tier2_cmd_can == SHOW_PAIRING_KEY)) {
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b0a      	cmp	r3, #10
 80045d8:	d10b      	bne.n	80045f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x412>
 80045da:	4b30      	ldr	r3, [pc, #192]	; (800469c <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d107      	bne.n	80045f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x412>
				if (key_status == key_sw_ON) {
 80045e2:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d137      	bne.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
					pairing_passkey_flag = 1;
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f8>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
				if (key_status == key_sw_ON) {
 80045f0:	e033      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if ((tier1_cmd_can == STARTUP_MESSAGE_SCREEN) && (tier2_cmd_can == NEW_YEAR_WISH)) {
 80045f2:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d107      	bne.n	800460a <HAL_CAN_RxFifo0MsgPendingCallback+0x42a>
 80045fa:	4b28      	ldr	r3, [pc, #160]	; (800469c <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d103      	bne.n	800460a <HAL_CAN_RxFifo0MsgPendingCallback+0x42a>
				new_year_message_flag = 1;
 8004602:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d4>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e027      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if ((tier1_cmd_can == STARTUP_MESSAGE_SCREEN) && (tier2_cmd_can == BIRTHDAY_WISH)) {
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d107      	bne.n	8004622 <HAL_CAN_RxFifo0MsgPendingCallback+0x442>
 8004612:	4b22      	ldr	r3, [pc, #136]	; (800469c <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d103      	bne.n	8004622 <HAL_CAN_RxFifo0MsgPendingCallback+0x442>
				birthday_message_flag = 1;
 800461a:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d0>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e01b      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if ((tier1_cmd_can == OTA_UI) && (tier2_cmd_can == OTA_AVAILABLE)) {
 8004622:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b08      	cmp	r3, #8
 8004628:	d10a      	bne.n	8004640 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b0d      	cmp	r3, #13
 8004630:	d106      	bne.n	8004640 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>
				tier1_cmd_can = STATS;
 8004632:	4b17      	ldr	r3, [pc, #92]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8004634:	2204      	movs	r2, #4
 8004636:	701a      	strb	r2, [r3, #0]
				ota_available_flag = 1;
 8004638:	4b28      	ldr	r3, [pc, #160]	; (80046dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4fc>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e00c      	b.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
			} else if (tier1_cmd_can == UI_INTRUSION_INPUT) {
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b0e      	cmp	r3, #14
 8004646:	d108      	bne.n	800465a <HAL_CAN_RxFifo0MsgPendingCallback+0x47a>
				ota_available_flag = 0;
 8004648:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4fc>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
				ota_available_timer = 0;
 800464e:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x500>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
				tier1_cmd_can = STATS;
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8004656:	2204      	movs	r2, #4
 8004658:	701a      	strb	r2, [r3, #0]
			load_cmd_can_ack_data(RxDataCan1[0], RxDataCan1[1]);
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x504>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x504>)
 8004660:	7852      	ldrb	r2, [r2, #1]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f8b1 	bl	80047cc <load_cmd_can_ack_data>
			break;
 800466a:	e000      	b.n	800466e <HAL_CAN_RxFifo0MsgPendingCallback+0x48e>
			break;
 800466c:	bf00      	nop
	}

	pn_can_sync_layer_recCAN(Receive_id, RxDataCan1, data_len);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	491b      	ldr	r1, [pc, #108]	; (80046e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x504>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f001 fd3a 	bl	80060f0 <pn_can_sync_layer_recCAN>
 800467c:	e002      	b.n	8004684 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>
		return;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>
		return;
 8004682:	bf00      	nop

}
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200003c8 	.word	0x200003c8
 8004690:	200009c8 	.word	0x200009c8
 8004694:	20000534 	.word	0x20000534
 8004698:	200004b4 	.word	0x200004b4
 800469c:	20000539 	.word	0x20000539
 80046a0:	2000057c 	.word	0x2000057c
 80046a4:	20000740 	.word	0x20000740
 80046a8:	20000014 	.word	0x20000014
 80046ac:	200005aa 	.word	0x200005aa
 80046b0:	20000450 	.word	0x20000450
 80046b4:	20000a50 	.word	0x20000a50
 80046b8:	20000544 	.word	0x20000544
 80046bc:	200005ec 	.word	0x200005ec
 80046c0:	200003c0 	.word	0x200003c0
 80046c4:	2000002c 	.word	0x2000002c
 80046c8:	20000018 	.word	0x20000018
 80046cc:	20000738 	.word	0x20000738
 80046d0:	20000528 	.word	0x20000528
 80046d4:	20000778 	.word	0x20000778
 80046d8:	200004c8 	.word	0x200004c8
 80046dc:	200004a0 	.word	0x200004a0
 80046e0:	2000049c 	.word	0x2000049c
 80046e4:	200002a8 	.word	0x200002a8

080046e8 <init_can>:
#define filter_mask5 	0x1FFFFFFF

#define filter_id6 		0x18FF0028
#define filter_mask6 	0x1FFFFFFF

void init_can(void) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0

	hcan.Instance 						= CAN1;
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <init_can+0x64>)
 80046ee:	4a18      	ldr	r2, [pc, #96]	; (8004750 <init_can+0x68>)
 80046f0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler 				= 8;
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <init_can+0x64>)
 80046f4:	2208      	movs	r2, #8
 80046f6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode 						= CAN_MODE_NORMAL;
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <init_can+0x64>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth 			= CAN_SJW_1TQ;
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <init_can+0x64>)
 8004700:	2200      	movs	r2, #0
 8004702:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 					= CAN_BS1_13TQ;
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <init_can+0x64>)
 8004706:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800470a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 					= CAN_BS2_2TQ;
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <init_can+0x64>)
 800470e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004712:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode 		= DISABLE;
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <init_can+0x64>)
 8004716:	2200      	movs	r2, #0
 8004718:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff 				= ENABLE;
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <init_can+0x64>)
 800471c:	2201      	movs	r2, #1
 800471e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp 				= DISABLE;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <init_can+0x64>)
 8004722:	2200      	movs	r2, #0
 8004724:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission 		= ENABLE;
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <init_can+0x64>)
 8004728:	2201      	movs	r2, #1
 800472a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked 		= DISABLE;
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <init_can+0x64>)
 800472e:	2200      	movs	r2, #0
 8004730:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority 		= DISABLE;
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <init_can+0x64>)
 8004734:	2200      	movs	r2, #0
 8004736:	775a      	strb	r2, [r3, #29]

	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8004738:	4804      	ldr	r0, [pc, #16]	; (800474c <init_can+0x64>)
 800473a:	f001 ffb7 	bl	80066ac <HAL_CAN_Init>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <init_can+0x60>
		Error_Handler();
 8004744:	f001 fbee 	bl	8005f24 <Error_Handler>
	}
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000b14 	.word	0x20000b14
 8004750:	40006400 	.word	0x40006400

08004754 <filter_can>:

void filter_can(void) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef sFilterConfig 		= { 0 };
 800475a:	463b      	mov	r3, r7
 800475c:	2228      	movs	r2, #40	; 0x28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f00a ff85 	bl	800f670 <memset>
	sFilterConfig.FilterBank				= 0;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode 				= CAN_FILTERMODE_IDMASK;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale 				= CAN_FILTERSCALE_32BIT;
 800476e:	2301      	movs	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh 			= (0x00 >> 13) & 0xFFFF;  // STDID[10:0] and EXID[17:13]
 8004772:	2300      	movs	r3, #0
 8004774:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow 				= (0x00 << 3) & 0xFFF8;  // EXID[12:5] and 3 reserved
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh 		= (0x00 >> 13) & 0xFFFF;
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow 			= (0x00 << 3) & 0xFFF8;  //0xFFF8;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment 	= CAN_RX_FIFO0;
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation 		= ENABLE;
 8004786:	2301      	movs	r3, #1
 8004788:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank 	= 14;
 800478a:	230e      	movs	r3, #14
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800478e:	463b      	mov	r3, r7
 8004790:	4619      	mov	r1, r3
 8004792:	4803      	ldr	r0, [pc, #12]	; (80047a0 <filter_can+0x4c>)
 8004794:	f002 f885 	bl	80068a2 <HAL_CAN_ConfigFilter>

}
 8004798:	bf00      	nop
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000b14 	.word	0x20000b14

080047a4 <start_can>:



void start_can(void) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan);
 80047a8:	4802      	ldr	r0, [pc, #8]	; (80047b4 <start_can+0x10>)
 80047aa:	f002 f943 	bl	8006a34 <HAL_CAN_Start>

}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000b14 	.word	0x20000b14

080047b8 <Start_Can_Communication>:


void Start_Can_Communication(void) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0

	init_can();
 80047bc:	f7ff ff94 	bl	80046e8 <init_can>
	filter_can();
 80047c0:	f7ff ffc8 	bl	8004754 <filter_can>
	start_can();
 80047c4:	f7ff ffee 	bl	80047a4 <start_can>
}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}

080047cc <load_cmd_can_ack_data>:
extern TIM_HandleTypeDef htim4;
extern CAN_HandleTypeDef hcan;


void load_cmd_can_ack_data(uint8_t tier1_cmd, uint8_t tier2_cmd)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	460a      	mov	r2, r1
 80047d6:	71fb      	strb	r3, [r7, #7]
 80047d8:	4613      	mov	r3, r2
 80047da:	71bb      	strb	r3, [r7, #6]

	uint8_t TXdataArray[8];

	TXdataArray[0] = tier1_cmd;
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	723b      	strb	r3, [r7, #8]
	TXdataArray[1] = tier2_cmd;
 80047e0:	79bb      	ldrb	r3, [r7, #6]
 80047e2:	727b      	strb	r3, [r7, #9]

	transmit_can_message(&hcan, CMD_CAN, TXdataArray, sizeof(TXdataArray));
 80047e4:	f107 0208 	add.w	r2, r7, #8
 80047e8:	2308      	movs	r3, #8
 80047ea:	4904      	ldr	r1, [pc, #16]	; (80047fc <load_cmd_can_ack_data+0x30>)
 80047ec:	4804      	ldr	r0, [pc, #16]	; (8004800 <load_cmd_can_ack_data+0x34>)
 80047ee:	f7ff fcad 	bl	800414c <transmit_can_message>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	080ffcfa 	.word	0x080ffcfa
 8004800:	20000b14 	.word	0x20000b14

08004804 <Acquire_Data_From_CAN>:


void Acquire_Data_From_CAN(uint32_t can_ID) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

		switch (can_ID) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <Acquire_Data_From_CAN+0x74>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d028      	beq.n	8004866 <Acquire_Data_From_CAN+0x62>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <Acquire_Data_From_CAN+0x74>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d827      	bhi.n	800486c <Acquire_Data_From_CAN+0x68>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a17      	ldr	r2, [pc, #92]	; (800487c <Acquire_Data_From_CAN+0x78>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d01d      	beq.n	8004860 <Acquire_Data_From_CAN+0x5c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <Acquire_Data_From_CAN+0x78>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d81f      	bhi.n	800486c <Acquire_Data_From_CAN+0x68>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a14      	ldr	r2, [pc, #80]	; (8004880 <Acquire_Data_From_CAN+0x7c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d012      	beq.n	800485a <Acquire_Data_From_CAN+0x56>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a12      	ldr	r2, [pc, #72]	; (8004880 <Acquire_Data_From_CAN+0x7c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d817      	bhi.n	800486c <Acquire_Data_From_CAN+0x68>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a11      	ldr	r2, [pc, #68]	; (8004884 <Acquire_Data_From_CAN+0x80>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <Acquire_Data_From_CAN+0x4a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a10      	ldr	r2, [pc, #64]	; (8004888 <Acquire_Data_From_CAN+0x84>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d003      	beq.n	8004854 <Acquire_Data_From_CAN+0x50>
				Load_Release_Notes_To_Display();
				break;

			default:

				break;
 800484c:	e00e      	b.n	800486c <Acquire_Data_From_CAN+0x68>
				Load_Overall_Data_To_Display();
 800484e:	f000 f81d 	bl	800488c <Load_Overall_Data_To_Display>
				break;
 8004852:	e00c      	b.n	800486e <Acquire_Data_From_CAN+0x6a>
				Load_Babbal_Data_To_Display();
 8004854:	f000 f994 	bl	8004b80 <Load_Babbal_Data_To_Display>
				break;
 8004858:	e009      	b.n	800486e <Acquire_Data_From_CAN+0x6a>
				Load_Thikka_Data_To_Display();
 800485a:	f000 f913 	bl	8004a84 <Load_Thikka_Data_To_Display>
				break;
 800485e:	e006      	b.n	800486e <Acquire_Data_From_CAN+0x6a>
				Load_Suste_Data_To_Display();
 8004860:	f000 f892 	bl	8004988 <Load_Suste_Data_To_Display>
				break;
 8004864:	e003      	b.n	800486e <Acquire_Data_From_CAN+0x6a>
				Load_Release_Notes_To_Display();
 8004866:	f000 fc6b 	bl	8005140 <Load_Release_Notes_To_Display>
				break;
 800486a:	e000      	b.n	800486e <Acquire_Data_From_CAN+0x6a>
				break;
 800486c:	bf00      	nop
	}
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	0813fcfa 	.word	0x0813fcfa
 800487c:	0807fcfa 	.word	0x0807fcfa
 8004880:	0806fcfa 	.word	0x0806fcfa
 8004884:	0804fcfa 	.word	0x0804fcfa
 8004888:	0805fcfa 	.word	0x0805fcfa

0800488c <Load_Overall_Data_To_Display>:


void Load_Overall_Data_To_Display(void) {
 800488c:	b598      	push	{r3, r4, r7, lr}
 800488e:	af00      	add	r7, sp, #0

	drive_mode_stat = 0;
 8004890:	4b31      	ldr	r3, [pc, #196]	; (8004958 <Load_Overall_Data_To_Display+0xcc>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
	present_day = overall_data.day;
 8004896:	4b31      	ldr	r3, [pc, #196]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 8004898:	7a9b      	ldrb	r3, [r3, #10]
 800489a:	461a      	mov	r2, r3
 800489c:	4b30      	ldr	r3, [pc, #192]	; (8004960 <Load_Overall_Data_To_Display+0xd4>)
 800489e:	601a      	str	r2, [r3, #0]

//	(uint64_t*)weekly_data[0] = *(uint64_t*)(&overall_data);

	weekly_data[6] = overall_data.overall_odo_day1;
 80048a0:	4b2e      	ldr	r3, [pc, #184]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <Load_Overall_Data_To_Display+0xd8>)
 80048a8:	819a      	strh	r2, [r3, #12]
	weekly_data[5] = overall_data.overall_odo_day2;
 80048aa:	4b2c      	ldr	r3, [pc, #176]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <Load_Overall_Data_To_Display+0xd8>)
 80048b2:	815a      	strh	r2, [r3, #10]
	weekly_data[4] = overall_data.overall_odo_day3;
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048b6:	789b      	ldrb	r3, [r3, #2]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <Load_Overall_Data_To_Display+0xd8>)
 80048bc:	811a      	strh	r2, [r3, #8]
	weekly_data[3] = overall_data.overall_odo_day4;
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048c0:	78db      	ldrb	r3, [r3, #3]
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <Load_Overall_Data_To_Display+0xd8>)
 80048c6:	80da      	strh	r2, [r3, #6]
	weekly_data[2] = overall_data.overall_odo_day5;
 80048c8:	4b24      	ldr	r3, [pc, #144]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048ca:	791b      	ldrb	r3, [r3, #4]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	4b25      	ldr	r3, [pc, #148]	; (8004964 <Load_Overall_Data_To_Display+0xd8>)
 80048d0:	809a      	strh	r2, [r3, #4]
	weekly_data[1] = overall_data.overall_odo_day6;
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048d4:	795b      	ldrb	r3, [r3, #5]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	4b22      	ldr	r3, [pc, #136]	; (8004964 <Load_Overall_Data_To_Display+0xd8>)
 80048da:	805a      	strh	r2, [r3, #2]
	weekly_data[0] = overall_data.overall_odo_day7;
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048de:	799b      	ldrb	r3, [r3, #6]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <Load_Overall_Data_To_Display+0xd8>)
 80048e4:	801a      	strh	r2, [r3, #0]

//	Find_Day_of_week(present_day);

	sprint(dash_mode_specific_avgSpeed, "%d", overall_data.overall_avg_speed);
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048e8:	79db      	ldrb	r3, [r3, #7]
 80048ea:	461a      	mov	r2, r3
 80048ec:	491e      	ldr	r1, [pc, #120]	; (8004968 <Load_Overall_Data_To_Display+0xdc>)
 80048ee:	481f      	ldr	r0, [pc, #124]	; (800496c <Load_Overall_Data_To_Display+0xe0>)
 80048f0:	f009 f876 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_maxSpeed, "%d", overall_data.overall_max_speed);
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 80048f6:	7a1b      	ldrb	r3, [r3, #8]
 80048f8:	461a      	mov	r2, r3
 80048fa:	491b      	ldr	r1, [pc, #108]	; (8004968 <Load_Overall_Data_To_Display+0xdc>)
 80048fc:	481c      	ldr	r0, [pc, #112]	; (8004970 <Load_Overall_Data_To_Display+0xe4>)
 80048fe:	f009 f86f 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_avgWhperKM, "%d", overall_data.overall_avg_whpkm);
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 8004904:	7a5b      	ldrb	r3, [r3, #9]
 8004906:	461a      	mov	r2, r3
 8004908:	4917      	ldr	r1, [pc, #92]	; (8004968 <Load_Overall_Data_To_Display+0xdc>)
 800490a:	481a      	ldr	r0, [pc, #104]	; (8004974 <Load_Overall_Data_To_Display+0xe8>)
 800490c:	f009 f868 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_odo, "%d.%d km", (int) overall_data.overall_odo, ((int) (overall_data.overall_odo * 10)) % 10);
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fb8b 	bl	8004030 <__aeabi_f2iz>
 800491a:	4604      	mov	r4, r0
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <Load_Overall_Data_To_Display+0xd0>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4915      	ldr	r1, [pc, #84]	; (8004978 <Load_Overall_Data_To_Display+0xec>)
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff f9be 	bl	8003ca4 <__aeabi_fmul>
 8004928:	4603      	mov	r3, r0
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fb80 	bl	8004030 <__aeabi_f2iz>
 8004930:	4601      	mov	r1, r0
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <Load_Overall_Data_To_Display+0xf0>)
 8004934:	fb83 2301 	smull	r2, r3, r3, r1
 8004938:	109a      	asrs	r2, r3, #2
 800493a:	17cb      	asrs	r3, r1, #31
 800493c:	1ad2      	subs	r2, r2, r3
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	1aca      	subs	r2, r1, r3
 8004948:	4613      	mov	r3, r2
 800494a:	4622      	mov	r2, r4
 800494c:	490c      	ldr	r1, [pc, #48]	; (8004980 <Load_Overall_Data_To_Display+0xf4>)
 800494e:	480d      	ldr	r0, [pc, #52]	; (8004984 <Load_Overall_Data_To_Display+0xf8>)
 8004950:	f009 f846 	bl	800d9e0 <sprint>

//	print("OVERALL  : |%d|__|%d|__|%d|__|%d|__|%d|__|%d|__|%d|__ AVG-SPEED %d __ MAX-SPEED %d __ AVG-WHPKM %d __ ODO %d.%d km\n", overall_data.overall_avg_speed, overall_data.overall_max_speed, overall_data.overall_avg_whpkm, (int) overall_data.overall_odo, ((int) (overall_data.overall_odo * 10)) % 10);
}
 8004954:	bf00      	nop
 8004956:	bd98      	pop	{r3, r4, r7, pc}
 8004958:	2000076c 	.word	0x2000076c
 800495c:	200001ec 	.word	0x200001ec
 8004960:	200003ac 	.word	0x200003ac
 8004964:	20000940 	.word	0x20000940
 8004968:	0800f6b4 	.word	0x0800f6b4
 800496c:	20000978 	.word	0x20000978
 8004970:	20000820 	.word	0x20000820
 8004974:	20000550 	.word	0x20000550
 8004978:	41200000 	.word	0x41200000
 800497c:	66666667 	.word	0x66666667
 8004980:	0800f6b8 	.word	0x0800f6b8
 8004984:	20000850 	.word	0x20000850

08004988 <Load_Suste_Data_To_Display>:


void Load_Suste_Data_To_Display(void) {
 8004988:	b598      	push	{r3, r4, r7, lr}
 800498a:	af00      	add	r7, sp, #0

	drive_mode_stat = 1;
 800498c:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <Load_Suste_Data_To_Display+0xcc>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
	present_day = suste_data.day;
 8004992:	4b31      	ldr	r3, [pc, #196]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 8004994:	7a9b      	ldrb	r3, [r3, #10]
 8004996:	461a      	mov	r2, r3
 8004998:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <Load_Suste_Data_To_Display+0xd4>)
 800499a:	601a      	str	r2, [r3, #0]

	weekly_data[6] = suste_data.suste_odo_day1;
 800499c:	4b2e      	ldr	r3, [pc, #184]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <Load_Suste_Data_To_Display+0xd8>)
 80049a4:	819a      	strh	r2, [r3, #12]
	weekly_data[5] = suste_data.suste_odo_day2;
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <Load_Suste_Data_To_Display+0xd8>)
 80049ae:	815a      	strh	r2, [r3, #10]
	weekly_data[4] = suste_data.suste_odo_day3;
 80049b0:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049b2:	789b      	ldrb	r3, [r3, #2]
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <Load_Suste_Data_To_Display+0xd8>)
 80049b8:	811a      	strh	r2, [r3, #8]
	weekly_data[3] = suste_data.suste_odo_day4;
 80049ba:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049bc:	78db      	ldrb	r3, [r3, #3]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <Load_Suste_Data_To_Display+0xd8>)
 80049c2:	80da      	strh	r2, [r3, #6]
	weekly_data[2] = suste_data.suste_odo_day5;
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049c6:	791b      	ldrb	r3, [r3, #4]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <Load_Suste_Data_To_Display+0xd8>)
 80049cc:	809a      	strh	r2, [r3, #4]
	weekly_data[1] = suste_data.suste_odo_day6;
 80049ce:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049d0:	795b      	ldrb	r3, [r3, #5]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <Load_Suste_Data_To_Display+0xd8>)
 80049d6:	805a      	strh	r2, [r3, #2]
	weekly_data[0] = suste_data.suste_odo_day7;
 80049d8:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049da:	799b      	ldrb	r3, [r3, #6]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <Load_Suste_Data_To_Display+0xd8>)
 80049e0:	801a      	strh	r2, [r3, #0]

//	Find_Day_of_week(present_day);

	sprint(dash_mode_specific_avgSpeed, "%d", suste_data.suste_avg_speed);
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049e4:	79db      	ldrb	r3, [r3, #7]
 80049e6:	461a      	mov	r2, r3
 80049e8:	491e      	ldr	r1, [pc, #120]	; (8004a64 <Load_Suste_Data_To_Display+0xdc>)
 80049ea:	481f      	ldr	r0, [pc, #124]	; (8004a68 <Load_Suste_Data_To_Display+0xe0>)
 80049ec:	f008 fff8 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_maxSpeed, "%d", suste_data.suste_max_speed);
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 80049f2:	7a1b      	ldrb	r3, [r3, #8]
 80049f4:	461a      	mov	r2, r3
 80049f6:	491b      	ldr	r1, [pc, #108]	; (8004a64 <Load_Suste_Data_To_Display+0xdc>)
 80049f8:	481c      	ldr	r0, [pc, #112]	; (8004a6c <Load_Suste_Data_To_Display+0xe4>)
 80049fa:	f008 fff1 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_avgWhperKM, "%d", suste_data.suste_avg_whpkm);
 80049fe:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 8004a00:	7a5b      	ldrb	r3, [r3, #9]
 8004a02:	461a      	mov	r2, r3
 8004a04:	4917      	ldr	r1, [pc, #92]	; (8004a64 <Load_Suste_Data_To_Display+0xdc>)
 8004a06:	481a      	ldr	r0, [pc, #104]	; (8004a70 <Load_Suste_Data_To_Display+0xe8>)
 8004a08:	f008 ffea 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_odo, "%d.%d km", (int) suste_data.suste_odo, (int) (suste_data.suste_odo * 10) % 10);
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fb0d 	bl	8004030 <__aeabi_f2iz>
 8004a16:	4604      	mov	r4, r0
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <Load_Suste_Data_To_Display+0xd0>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4915      	ldr	r1, [pc, #84]	; (8004a74 <Load_Suste_Data_To_Display+0xec>)
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff f940 	bl	8003ca4 <__aeabi_fmul>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fb02 	bl	8004030 <__aeabi_f2iz>
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <Load_Suste_Data_To_Display+0xf0>)
 8004a30:	fb83 2301 	smull	r2, r3, r3, r1
 8004a34:	109a      	asrs	r2, r3, #2
 8004a36:	17cb      	asrs	r3, r1, #31
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	1aca      	subs	r2, r1, r3
 8004a44:	4613      	mov	r3, r2
 8004a46:	4622      	mov	r2, r4
 8004a48:	490c      	ldr	r1, [pc, #48]	; (8004a7c <Load_Suste_Data_To_Display+0xf4>)
 8004a4a:	480d      	ldr	r0, [pc, #52]	; (8004a80 <Load_Suste_Data_To_Display+0xf8>)
 8004a4c:	f008 ffc8 	bl	800d9e0 <sprint>
}
 8004a50:	bf00      	nop
 8004a52:	bd98      	pop	{r3, r4, r7, pc}
 8004a54:	2000076c 	.word	0x2000076c
 8004a58:	200001fc 	.word	0x200001fc
 8004a5c:	200003ac 	.word	0x200003ac
 8004a60:	20000940 	.word	0x20000940
 8004a64:	0800f6b4 	.word	0x0800f6b4
 8004a68:	20000978 	.word	0x20000978
 8004a6c:	20000820 	.word	0x20000820
 8004a70:	20000550 	.word	0x20000550
 8004a74:	41200000 	.word	0x41200000
 8004a78:	66666667 	.word	0x66666667
 8004a7c:	0800f6b8 	.word	0x0800f6b8
 8004a80:	20000850 	.word	0x20000850

08004a84 <Load_Thikka_Data_To_Display>:


void Load_Thikka_Data_To_Display(void) {
 8004a84:	b598      	push	{r3, r4, r7, lr}
 8004a86:	af00      	add	r7, sp, #0

	drive_mode_stat = 2;
 8004a88:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <Load_Thikka_Data_To_Display+0xcc>)
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	601a      	str	r2, [r3, #0]
	present_day = thikka_data.day;
 8004a8e:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004a90:	7a9b      	ldrb	r3, [r3, #10]
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <Load_Thikka_Data_To_Display+0xd4>)
 8004a96:	601a      	str	r2, [r3, #0]

	weekly_data[6] = thikka_data.thikka_odo_day1;
 8004a98:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <Load_Thikka_Data_To_Display+0xd8>)
 8004aa0:	819a      	strh	r2, [r3, #12]
	weekly_data[5] = thikka_data.thikka_odo_day2;
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <Load_Thikka_Data_To_Display+0xd8>)
 8004aaa:	815a      	strh	r2, [r3, #10]
	weekly_data[4] = thikka_data.thikka_odo_day3;
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004aae:	789b      	ldrb	r3, [r3, #2]
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <Load_Thikka_Data_To_Display+0xd8>)
 8004ab4:	811a      	strh	r2, [r3, #8]
	weekly_data[3] = thikka_data.thikka_odo_day4;
 8004ab6:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004ab8:	78db      	ldrb	r3, [r3, #3]
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <Load_Thikka_Data_To_Display+0xd8>)
 8004abe:	80da      	strh	r2, [r3, #6]
	weekly_data[2] = thikka_data.thikka_odo_day5;
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004ac2:	791b      	ldrb	r3, [r3, #4]
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <Load_Thikka_Data_To_Display+0xd8>)
 8004ac8:	809a      	strh	r2, [r3, #4]
	weekly_data[1] = thikka_data.thikka_odo_day6;
 8004aca:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004acc:	795b      	ldrb	r3, [r3, #5]
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <Load_Thikka_Data_To_Display+0xd8>)
 8004ad2:	805a      	strh	r2, [r3, #2]
	weekly_data[0] = thikka_data.thikka_odo_day7;
 8004ad4:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004ad6:	799b      	ldrb	r3, [r3, #6]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <Load_Thikka_Data_To_Display+0xd8>)
 8004adc:	801a      	strh	r2, [r3, #0]

//	Find_Day_of_week(present_day);

	sprint(dash_mode_specific_avgSpeed, "%d", thikka_data.thikka_avg_speed);
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004ae0:	79db      	ldrb	r3, [r3, #7]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	491e      	ldr	r1, [pc, #120]	; (8004b60 <Load_Thikka_Data_To_Display+0xdc>)
 8004ae6:	481f      	ldr	r0, [pc, #124]	; (8004b64 <Load_Thikka_Data_To_Display+0xe0>)
 8004ae8:	f008 ff7a 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_maxSpeed, "%d", thikka_data.thikka_max_speed);
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004aee:	7a1b      	ldrb	r3, [r3, #8]
 8004af0:	461a      	mov	r2, r3
 8004af2:	491b      	ldr	r1, [pc, #108]	; (8004b60 <Load_Thikka_Data_To_Display+0xdc>)
 8004af4:	481c      	ldr	r0, [pc, #112]	; (8004b68 <Load_Thikka_Data_To_Display+0xe4>)
 8004af6:	f008 ff73 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_avgWhperKM, "%d", thikka_data.thikka_avg_whpkm);
 8004afa:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004afc:	7a5b      	ldrb	r3, [r3, #9]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4917      	ldr	r1, [pc, #92]	; (8004b60 <Load_Thikka_Data_To_Display+0xdc>)
 8004b02:	481a      	ldr	r0, [pc, #104]	; (8004b6c <Load_Thikka_Data_To_Display+0xe8>)
 8004b04:	f008 ff6c 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_odo, "%d.%d km", (int) thikka_data.thikka_odo, (int) (thikka_data.thikka_odo * 10) % 10);
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fa8f 	bl	8004030 <__aeabi_f2iz>
 8004b12:	4604      	mov	r4, r0
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <Load_Thikka_Data_To_Display+0xd0>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4915      	ldr	r1, [pc, #84]	; (8004b70 <Load_Thikka_Data_To_Display+0xec>)
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff f8c2 	bl	8003ca4 <__aeabi_fmul>
 8004b20:	4603      	mov	r3, r0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fa84 	bl	8004030 <__aeabi_f2iz>
 8004b28:	4601      	mov	r1, r0
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <Load_Thikka_Data_To_Display+0xf0>)
 8004b2c:	fb83 2301 	smull	r2, r3, r3, r1
 8004b30:	109a      	asrs	r2, r3, #2
 8004b32:	17cb      	asrs	r3, r1, #31
 8004b34:	1ad2      	subs	r2, r2, r3
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	1aca      	subs	r2, r1, r3
 8004b40:	4613      	mov	r3, r2
 8004b42:	4622      	mov	r2, r4
 8004b44:	490c      	ldr	r1, [pc, #48]	; (8004b78 <Load_Thikka_Data_To_Display+0xf4>)
 8004b46:	480d      	ldr	r0, [pc, #52]	; (8004b7c <Load_Thikka_Data_To_Display+0xf8>)
 8004b48:	f008 ff4a 	bl	800d9e0 <sprint>
}
 8004b4c:	bf00      	nop
 8004b4e:	bd98      	pop	{r3, r4, r7, pc}
 8004b50:	2000076c 	.word	0x2000076c
 8004b54:	2000020c 	.word	0x2000020c
 8004b58:	200003ac 	.word	0x200003ac
 8004b5c:	20000940 	.word	0x20000940
 8004b60:	0800f6b4 	.word	0x0800f6b4
 8004b64:	20000978 	.word	0x20000978
 8004b68:	20000820 	.word	0x20000820
 8004b6c:	20000550 	.word	0x20000550
 8004b70:	41200000 	.word	0x41200000
 8004b74:	66666667 	.word	0x66666667
 8004b78:	0800f6b8 	.word	0x0800f6b8
 8004b7c:	20000850 	.word	0x20000850

08004b80 <Load_Babbal_Data_To_Display>:


void Load_Babbal_Data_To_Display(void) {
 8004b80:	b598      	push	{r3, r4, r7, lr}
 8004b82:	af00      	add	r7, sp, #0

	drive_mode_stat = 3;
 8004b84:	4b31      	ldr	r3, [pc, #196]	; (8004c4c <Load_Babbal_Data_To_Display+0xcc>)
 8004b86:	2203      	movs	r2, #3
 8004b88:	601a      	str	r2, [r3, #0]
	present_day = babbal_data.day;
 8004b8a:	4b31      	ldr	r3, [pc, #196]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004b8c:	7a9b      	ldrb	r3, [r3, #10]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <Load_Babbal_Data_To_Display+0xd4>)
 8004b92:	601a      	str	r2, [r3, #0]


	weekly_data[6] = babbal_data.babal_odo_day1;
 8004b94:	4b2e      	ldr	r3, [pc, #184]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	4b2f      	ldr	r3, [pc, #188]	; (8004c58 <Load_Babbal_Data_To_Display+0xd8>)
 8004b9c:	819a      	strh	r2, [r3, #12]
	weekly_data[5] = babbal_data.babal_odo_day2;
 8004b9e:	4b2c      	ldr	r3, [pc, #176]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	4b2c      	ldr	r3, [pc, #176]	; (8004c58 <Load_Babbal_Data_To_Display+0xd8>)
 8004ba6:	815a      	strh	r2, [r3, #10]
	weekly_data[4] = babbal_data.babal_odo_day3;
 8004ba8:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004baa:	789b      	ldrb	r3, [r3, #2]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	4b2a      	ldr	r3, [pc, #168]	; (8004c58 <Load_Babbal_Data_To_Display+0xd8>)
 8004bb0:	811a      	strh	r2, [r3, #8]
	weekly_data[3] = babbal_data.babal_odo_day4;
 8004bb2:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004bb4:	78db      	ldrb	r3, [r3, #3]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <Load_Babbal_Data_To_Display+0xd8>)
 8004bba:	80da      	strh	r2, [r3, #6]
	weekly_data[2] = babbal_data.babal_odo_day5;
 8004bbc:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004bbe:	791b      	ldrb	r3, [r3, #4]
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <Load_Babbal_Data_To_Display+0xd8>)
 8004bc4:	809a      	strh	r2, [r3, #4]
	weekly_data[1] = babbal_data.babal_odo_day6;
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004bc8:	795b      	ldrb	r3, [r3, #5]
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <Load_Babbal_Data_To_Display+0xd8>)
 8004bce:	805a      	strh	r2, [r3, #2]
	weekly_data[0] = babbal_data.babal_odo_day7;
 8004bd0:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004bd2:	799b      	ldrb	r3, [r3, #6]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <Load_Babbal_Data_To_Display+0xd8>)
 8004bd8:	801a      	strh	r2, [r3, #0]

//	Find_Day_of_week(present_day);

	sprint(dash_mode_specific_avgSpeed, "%d", babbal_data.babal_avg_speed);
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004bdc:	79db      	ldrb	r3, [r3, #7]
 8004bde:	461a      	mov	r2, r3
 8004be0:	491e      	ldr	r1, [pc, #120]	; (8004c5c <Load_Babbal_Data_To_Display+0xdc>)
 8004be2:	481f      	ldr	r0, [pc, #124]	; (8004c60 <Load_Babbal_Data_To_Display+0xe0>)
 8004be4:	f008 fefc 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_maxSpeed, "%d", babbal_data.babal_max_speed);
 8004be8:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004bea:	7a1b      	ldrb	r3, [r3, #8]
 8004bec:	461a      	mov	r2, r3
 8004bee:	491b      	ldr	r1, [pc, #108]	; (8004c5c <Load_Babbal_Data_To_Display+0xdc>)
 8004bf0:	481c      	ldr	r0, [pc, #112]	; (8004c64 <Load_Babbal_Data_To_Display+0xe4>)
 8004bf2:	f008 fef5 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_avgWhperKM, "%d", babbal_data.babal_avg_whpkm);
 8004bf6:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004bf8:	7a5b      	ldrb	r3, [r3, #9]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4917      	ldr	r1, [pc, #92]	; (8004c5c <Load_Babbal_Data_To_Display+0xdc>)
 8004bfe:	481a      	ldr	r0, [pc, #104]	; (8004c68 <Load_Babbal_Data_To_Display+0xe8>)
 8004c00:	f008 feee 	bl	800d9e0 <sprint>
	sprint(dash_mode_specific_odo, "%d.%d km", (int) babbal_data.babal_odo, (int) (babbal_data.babal_odo * 10) % 10);
 8004c04:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fa11 	bl	8004030 <__aeabi_f2iz>
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <Load_Babbal_Data_To_Display+0xd0>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4915      	ldr	r1, [pc, #84]	; (8004c6c <Load_Babbal_Data_To_Display+0xec>)
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f844 	bl	8003ca4 <__aeabi_fmul>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fa06 	bl	8004030 <__aeabi_f2iz>
 8004c24:	4601      	mov	r1, r0
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <Load_Babbal_Data_To_Display+0xf0>)
 8004c28:	fb83 2301 	smull	r2, r3, r3, r1
 8004c2c:	109a      	asrs	r2, r3, #2
 8004c2e:	17cb      	asrs	r3, r1, #31
 8004c30:	1ad2      	subs	r2, r2, r3
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	1aca      	subs	r2, r1, r3
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	4622      	mov	r2, r4
 8004c40:	490c      	ldr	r1, [pc, #48]	; (8004c74 <Load_Babbal_Data_To_Display+0xf4>)
 8004c42:	480d      	ldr	r0, [pc, #52]	; (8004c78 <Load_Babbal_Data_To_Display+0xf8>)
 8004c44:	f008 fecc 	bl	800d9e0 <sprint>
}
 8004c48:	bf00      	nop
 8004c4a:	bd98      	pop	{r3, r4, r7, pc}
 8004c4c:	2000076c 	.word	0x2000076c
 8004c50:	2000021c 	.word	0x2000021c
 8004c54:	200003ac 	.word	0x200003ac
 8004c58:	20000940 	.word	0x20000940
 8004c5c:	0800f6b4 	.word	0x0800f6b4
 8004c60:	20000978 	.word	0x20000978
 8004c64:	20000820 	.word	0x20000820
 8004c68:	20000550 	.word	0x20000550
 8004c6c:	41200000 	.word	0x41200000
 8004c70:	66666667 	.word	0x66666667
 8004c74:	0800f6b8 	.word	0x0800f6b8
 8004c78:	20000850 	.word	0x20000850

08004c7c <Load_Time_To_Display>:
	sprint(dash_bikename, "%s", ride_and_rider_names.bike_name);
	sprint(dash_username, "%s", ride_and_rider_names.user_name);
}


void Load_Time_To_Display(uint8_t *data, uint32_t Receive_id, uint32_t data_len) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
	time_and_temperature = *(Dash_DateTime_Handel*)data;
 8004c88:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6810      	ldr	r0, [r2, #0]
 8004c8e:	6851      	ldr	r1, [r2, #4]
 8004c90:	c303      	stmia	r3!, {r0, r1}
//	time_and_temperature.minute =  data[1];
//	time_and_temperature.temperature = data[4];
//	time_and_temperature.month = data[7];
//	time_and_temperature.date = data[6];

	Find_Month_of_Year(data[7]);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3307      	adds	r3, #7
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fd3b 	bl	8005714 <Find_Month_of_Year>

	sprint(lock_screen_date, "%d %s", time_and_temperature.date, lock_screen_month);
 8004c9e:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004ca0:	799b      	ldrb	r3, [r3, #6]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <Load_Time_To_Display+0x8c>)
 8004ca6:	4919      	ldr	r1, [pc, #100]	; (8004d0c <Load_Time_To_Display+0x90>)
 8004ca8:	4819      	ldr	r0, [pc, #100]	; (8004d10 <Load_Time_To_Display+0x94>)
 8004caa:	f008 fe99 	bl	800d9e0 <sprint>
	sprint(lock_screen_time_hrs, "%02d", time_and_temperature.hour);
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4917      	ldr	r1, [pc, #92]	; (8004d14 <Load_Time_To_Display+0x98>)
 8004cb6:	4818      	ldr	r0, [pc, #96]	; (8004d18 <Load_Time_To_Display+0x9c>)
 8004cb8:	f008 fe92 	bl	800d9e0 <sprint>
	sprint(lock_screen_time_min, "%02d", time_and_temperature.minute);
 8004cbc:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4914      	ldr	r1, [pc, #80]	; (8004d14 <Load_Time_To_Display+0x98>)
 8004cc4:	4815      	ldr	r0, [pc, #84]	; (8004d1c <Load_Time_To_Display+0xa0>)
 8004cc6:	f008 fe8b 	bl	800d9e0 <sprint>


	sprint(dash_time, "%02d:%02d %s", time_and_temperature.hour, time_and_temperature.minute,
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	4619      	mov	r1, r3
			(time_and_temperature.format == 12?
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004cd8:	789b      	ldrb	r3, [r3, #2]
	sprint(dash_time, "%02d:%02d %s", time_and_temperature.hour, time_and_temperature.minute,
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d107      	bne.n	8004cee <Load_Time_To_Display+0x72>
					(time_and_temperature.daynight_indicator==AM?"AM":"PM"):"")
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <Load_Time_To_Display+0x88>)
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <Load_Time_To_Display+0x6e>
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <Load_Time_To_Display+0xa4>)
 8004ce8:	e002      	b.n	8004cf0 <Load_Time_To_Display+0x74>
 8004cea:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <Load_Time_To_Display+0xa8>)
 8004cec:	e000      	b.n	8004cf0 <Load_Time_To_Display+0x74>
	sprint(dash_time, "%02d:%02d %s", time_and_temperature.hour, time_and_temperature.minute,
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <Load_Time_To_Display+0xac>)
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	490d      	ldr	r1, [pc, #52]	; (8004d2c <Load_Time_To_Display+0xb0>)
 8004cf6:	480e      	ldr	r0, [pc, #56]	; (8004d30 <Load_Time_To_Display+0xb4>)
 8004cf8:	f008 fe72 	bl	800d9e0 <sprint>
					);

//	print("CAN_ID : 0x0%x :  DATE_TIME : %s  %d-HR  %d:%d  %d-TEMP\n", Receive_id, (time_and_temperature.daynight_indicator == 0)? "DAY": "NIGHT", time_and_temperature.format, time_and_temperature.hour, time_and_temperature.minute, time_and_temperature.temperature);
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	2000022c 	.word	0x2000022c
 8004d08:	20000a54 	.word	0x20000a54
 8004d0c:	0800f6d8 	.word	0x0800f6d8
 8004d10:	20000388 	.word	0x20000388
 8004d14:	0800f6e0 	.word	0x0800f6e0
 8004d18:	200007a0 	.word	0x200007a0
 8004d1c:	20000584 	.word	0x20000584
 8004d20:	0800f6e8 	.word	0x0800f6e8
 8004d24:	0800f6ec 	.word	0x0800f6ec
 8004d28:	0800f6f0 	.word	0x0800f6f0
 8004d2c:	0800f6f4 	.word	0x0800f6f4
 8004d30:	20000964 	.word	0x20000964

08004d34 <Load_SoC_ETA_To_Display>:


void Load_SoC_ETA_To_Display(uint8_t *data) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	6078      	str	r0, [r7, #4]

	SoC_and_chargingInfo = *((Dash_Soc_Handel*) data);
 8004d3c:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6810      	ldr	r0, [r2, #0]
 8004d42:	6018      	str	r0, [r3, #0]

	charging_SoC = SoC_and_chargingInfo.soc;
 8004d44:	4b3c      	ldr	r3, [pc, #240]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d46:	785a      	ldrb	r2, [r3, #1]
 8004d48:	4b3c      	ldr	r3, [pc, #240]	; (8004e3c <Load_SoC_ETA_To_Display+0x108>)
 8004d4a:	701a      	strb	r2, [r3, #0]
	charger_connected_but_not_charging = SoC_and_chargingInfo.charging_current;
 8004d4c:	4b3a      	ldr	r3, [pc, #232]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d4e:	78db      	ldrb	r3, [r3, #3]
 8004d50:	461a      	mov	r2, r3
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <Load_SoC_ETA_To_Display+0x10c>)
 8004d54:	601a      	str	r2, [r3, #0]

	sprint(dash_dischargingSoC, "%d", SoC_and_chargingInfo.soc);
 8004d56:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4939      	ldr	r1, [pc, #228]	; (8004e44 <Load_SoC_ETA_To_Display+0x110>)
 8004d5e:	483a      	ldr	r0, [pc, #232]	; (8004e48 <Load_SoC_ETA_To_Display+0x114>)
 8004d60:	f008 fe3e 	bl	800d9e0 <sprint>
	sprint(dash_chargingSoC, "%d%%", SoC_and_chargingInfo.soc);
 8004d64:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4938      	ldr	r1, [pc, #224]	; (8004e4c <Load_SoC_ETA_To_Display+0x118>)
 8004d6c:	4838      	ldr	r0, [pc, #224]	; (8004e50 <Load_SoC_ETA_To_Display+0x11c>)
 8004d6e:	f008 fe37 	bl	800d9e0 <sprint>

	charging_eta = SoC_and_chargingInfo.time2fullCharge;
 8004d72:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d74:	789a      	ldrb	r2, [r3, #2]
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <Load_SoC_ETA_To_Display+0x120>)
 8004d78:	701a      	strb	r2, [r3, #0]

	charging_eta_hours = SoC_and_chargingInfo.time2fullCharge / 60;
 8004d7a:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d7c:	789b      	ldrb	r3, [r3, #2]
 8004d7e:	4a36      	ldr	r2, [pc, #216]	; (8004e58 <Load_SoC_ETA_To_Display+0x124>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <Load_SoC_ETA_To_Display+0x128>)
 8004d8a:	701a      	strb	r2, [r3, #0]
	charging_eta_minutes = SoC_and_chargingInfo.time2fullCharge % 60;
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004d8e:	789a      	ldrb	r2, [r3, #2]
 8004d90:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <Load_SoC_ETA_To_Display+0x124>)
 8004d92:	fba3 1302 	umull	r1, r3, r3, r2
 8004d96:	0959      	lsrs	r1, r3, #5
 8004d98:	460b      	mov	r3, r1
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	1a5b      	subs	r3, r3, r1
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <Load_SoC_ETA_To_Display+0x12c>)
 8004da6:	701a      	strb	r2, [r3, #0]
//			charging_eta_minutes,
//			(charging_eta_hours >= 1?"min":"minute"),
//			(charging_eta_hours >= 1?' ':(charging_eta_minutes > 1?'s':' '))
//			);

	if (SoC_and_chargingInfo.time2fullCharge <= 60 && SoC_and_chargingInfo.time2fullCharge > 0) {
 8004da8:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004daa:	789b      	ldrb	r3, [r3, #2]
 8004dac:	2b3c      	cmp	r3, #60	; 0x3c
 8004dae:	d812      	bhi.n	8004dd6 <Load_SoC_ETA_To_Display+0xa2>
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004db2:	789b      	ldrb	r3, [r3, #2]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <Load_SoC_ETA_To_Display+0xa2>

			sprint(dash_chargingETA, "%d minute%c", SoC_and_chargingInfo.time2fullCharge, (SoC_and_chargingInfo.time2fullCharge > 1?'s':' '));
 8004db8:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004dba:	789b      	ldrb	r3, [r3, #2]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004dc0:	789b      	ldrb	r3, [r3, #2]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d901      	bls.n	8004dca <Load_SoC_ETA_To_Display+0x96>
 8004dc6:	2373      	movs	r3, #115	; 0x73
 8004dc8:	e000      	b.n	8004dcc <Load_SoC_ETA_To_Display+0x98>
 8004dca:	2320      	movs	r3, #32
 8004dcc:	4925      	ldr	r1, [pc, #148]	; (8004e64 <Load_SoC_ETA_To_Display+0x130>)
 8004dce:	4826      	ldr	r0, [pc, #152]	; (8004e68 <Load_SoC_ETA_To_Display+0x134>)
 8004dd0:	f008 fe06 	bl	800d9e0 <sprint>

		sprint(dash_chargingETA, "%d hour%c %d min", charging_eta_hours, (charging_eta_hours > 1?'s':' '), charging_eta_minutes);
	}

//	print("CAN_ID : 0x0%x :  SOC_DATA  : S0C - %d   ETA - %d MINS\n", Receive_id, SoC_and_chargingInfo.soc, SoC_and_chargingInfo.time2fullCharge);
}
 8004dd4:	e02c      	b.n	8004e30 <Load_SoC_ETA_To_Display+0xfc>
	} else if (SoC_and_chargingInfo.time2fullCharge > 60) {
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004dd8:	789b      	ldrb	r3, [r3, #2]
 8004dda:	2b3c      	cmp	r3, #60	; 0x3c
 8004ddc:	d928      	bls.n	8004e30 <Load_SoC_ETA_To_Display+0xfc>
		charging_eta_hours = SoC_and_chargingInfo.time2fullCharge / 60;
 8004dde:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004de0:	789b      	ldrb	r3, [r3, #2]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <Load_SoC_ETA_To_Display+0x124>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <Load_SoC_ETA_To_Display+0x128>)
 8004dee:	701a      	strb	r2, [r3, #0]
		charging_eta_minutes = SoC_and_chargingInfo.time2fullCharge % 60;
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <Load_SoC_ETA_To_Display+0x104>)
 8004df2:	789a      	ldrb	r2, [r3, #2]
 8004df4:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <Load_SoC_ETA_To_Display+0x124>)
 8004df6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfa:	0959      	lsrs	r1, r3, #5
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a5b      	subs	r3, r3, r1
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <Load_SoC_ETA_To_Display+0x12c>)
 8004e0a:	701a      	strb	r2, [r3, #0]
		sprint(dash_chargingETA, "%d hour%c %d min", charging_eta_hours, (charging_eta_hours > 1?'s':' '), charging_eta_minutes);
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <Load_SoC_ETA_To_Display+0x128>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	4619      	mov	r1, r3
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <Load_SoC_ETA_To_Display+0x128>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d901      	bls.n	8004e1e <Load_SoC_ETA_To_Display+0xea>
 8004e1a:	2373      	movs	r3, #115	; 0x73
 8004e1c:	e000      	b.n	8004e20 <Load_SoC_ETA_To_Display+0xec>
 8004e1e:	2320      	movs	r3, #32
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <Load_SoC_ETA_To_Display+0x12c>)
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	9200      	str	r2, [sp, #0]
 8004e26:	460a      	mov	r2, r1
 8004e28:	4910      	ldr	r1, [pc, #64]	; (8004e6c <Load_SoC_ETA_To_Display+0x138>)
 8004e2a:	480f      	ldr	r0, [pc, #60]	; (8004e68 <Load_SoC_ETA_To_Display+0x134>)
 8004e2c:	f008 fdd8 	bl	800d9e0 <sprint>
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000234 	.word	0x20000234
 8004e3c:	20000744 	.word	0x20000744
 8004e40:	20000844 	.word	0x20000844
 8004e44:	0800f6b4 	.word	0x0800f6b4
 8004e48:	2000077c 	.word	0x2000077c
 8004e4c:	0800f704 	.word	0x0800f704
 8004e50:	200009cc 	.word	0x200009cc
 8004e54:	200007d0 	.word	0x200007d0
 8004e58:	88888889 	.word	0x88888889
 8004e5c:	2000044e 	.word	0x2000044e
 8004e60:	20000464 	.word	0x20000464
 8004e64:	0800f70c 	.word	0x0800f70c
 8004e68:	20000504 	.word	0x20000504
 8004e6c:	0800f718 	.word	0x0800f718

08004e70 <Load_Auxiliary_Info_To_Display>:


void Load_Auxiliary_Info_To_Display(uint8_t *data, uint32_t Receive_id, uint32_t data_len) {
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]

	if ((tier1_cmd_can != AC_CHARGING) && (tier1_cmd_can != DC_CHARGING)){
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <Load_Auxiliary_Info_To_Display+0xac>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d045      	beq.n	8004f10 <Load_Auxiliary_Info_To_Display+0xa0>
 8004e84:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <Load_Auxiliary_Info_To_Display+0xac>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b07      	cmp	r3, #7
 8004e8a:	d041      	beq.n	8004f10 <Load_Auxiliary_Info_To_Display+0xa0>

		auxiliary_data = *((Dash_Auxiliary_Handel*) data);
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	6810      	ldr	r0, [r2, #0]
 8004e92:	6851      	ldr	r1, [r2, #4]
 8004e94:	c303      	stmia	r3!, {r0, r1}

		key_status = auxiliary_data.key;
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <Load_Auxiliary_Info_To_Display+0xb4>)
 8004e9c:	701a      	strb	r2, [r3, #0]
		right_sidelight_status = auxiliary_data.right_side_light;
 8004e9e:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004ea0:	78da      	ldrb	r2, [r3, #3]
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <Load_Auxiliary_Info_To_Display+0xb8>)
 8004ea4:	701a      	strb	r2, [r3, #0]
		left_sidelight_status = auxiliary_data.left_side_light;
 8004ea6:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004ea8:	789a      	ldrb	r2, [r3, #2]
 8004eaa:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <Load_Auxiliary_Info_To_Display+0xbc>)
 8004eac:	701a      	strb	r2, [r3, #0]
		low_beam_status = auxiliary_data.low_beam;
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004eb0:	795b      	ldrb	r3, [r3, #5]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <Load_Auxiliary_Info_To_Display+0xc0>)
 8004eb6:	601a      	str	r2, [r3, #0]
		high_beam_status = auxiliary_data.High_beam;
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004eba:	791b      	ldrb	r3, [r3, #4]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <Load_Auxiliary_Info_To_Display+0xc4>)
 8004ec0:	601a      	str	r2, [r3, #0]
		drive_mode = auxiliary_data.drive_mode;
 8004ec2:	4b17      	ldr	r3, [pc, #92]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004ec4:	785a      	ldrb	r2, [r3, #1]
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <Load_Auxiliary_Info_To_Display+0xc8>)
 8004ec8:	701a      	strb	r2, [r3, #0]
		ui_mode = auxiliary_data.display_mode;
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004ecc:	799a      	ldrb	r2, [r3, #6]
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <Load_Auxiliary_Info_To_Display+0xcc>)
 8004ed0:	701a      	strb	r2, [r3, #0]
		brightness_level = (auxiliary_data.display_brightness_level * 128) / 255;
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <Load_Auxiliary_Info_To_Display+0xb0>)
 8004ed4:	79db      	ldrb	r3, [r3, #7]
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <Load_Auxiliary_Info_To_Display+0xd0>)
 8004eda:	fb82 1203 	smull	r1, r2, r2, r3
 8004ede:	441a      	add	r2, r3
 8004ee0:	11d2      	asrs	r2, r2, #7
 8004ee2:	17db      	asrs	r3, r3, #31
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <Load_Auxiliary_Info_To_Display+0xd4>)
 8004ee8:	6013      	str	r3, [r2, #0]

		headlight_status = ((low_beam_status == 1 && high_beam_status == 0)?
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <Load_Auxiliary_Info_To_Display+0xc0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
				LOW_BEAM:
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d103      	bne.n	8004efa <Load_Auxiliary_Info_To_Display+0x8a>
		headlight_status = ((low_beam_status == 1 && high_beam_status == 0)?
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <Load_Auxiliary_Info_To_Display+0xc4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <Load_Auxiliary_Info_To_Display+0x9a>
				(high_beam_status? HIGH_BEAM: HEADLIGHT_OFF));
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <Load_Auxiliary_Info_To_Display+0xc4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <Load_Auxiliary_Info_To_Display+0x96>
 8004f02:	2302      	movs	r3, #2
				LOW_BEAM:
 8004f04:	e002      	b.n	8004f0c <Load_Auxiliary_Info_To_Display+0x9c>
				(high_beam_status? HIGH_BEAM: HEADLIGHT_OFF));
 8004f06:	2300      	movs	r3, #0
				LOW_BEAM:
 8004f08:	e000      	b.n	8004f0c <Load_Auxiliary_Info_To_Display+0x9c>
 8004f0a:	2301      	movs	r3, #1
		headlight_status = ((low_beam_status == 1 && high_beam_status == 0)?
 8004f0c:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <Load_Auxiliary_Info_To_Display+0xd8>)
 8004f0e:	6013      	str	r3, [r2, #0]
//			headlight_status = HEADLIGHT_OFF;
//		}

//		print("CAN_ID : 0x0%x :  AUX_DATA  : %s  %s  %s  %s  %s\n", Receive_id, (key_status == 1)? "KEY__ON":"KEY_OFF", (left_sidelight_status == 1)? "<<<":"===", (right_sidelight_status == 1)? ">>>":"===", (low_beam_status == 1)? "L_BEAM": "------", (high_beam_status == 1)? "H_BEAM": "------", drive_mode, ui_mode, brightness_level);
	}
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	200009c8 	.word	0x200009c8
 8004f20:	20000238 	.word	0x20000238
 8004f24:	20000738 	.word	0x20000738
 8004f28:	20000996 	.word	0x20000996
 8004f2c:	2000080e 	.word	0x2000080e
 8004f30:	200003bc 	.word	0x200003bc
 8004f34:	200009ac 	.word	0x200009ac
 8004f38:	20000745 	.word	0x20000745
 8004f3c:	200009a4 	.word	0x200009a4
 8004f40:	80808081 	.word	0x80808081
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000998 	.word	0x20000998

08004f4c <Load_Indicator_Icons_To_Display>:


void Load_Indicator_Icons_To_Display(uint8_t *data) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

	icons_indicator = *((Dash_Indicator_Handel*) data);
 8004f54:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <Load_Indicator_Icons_To_Display+0x7c>)
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6810      	ldr	r0, [r2, #0]
 8004f5a:	6018      	str	r0, [r3, #0]
 8004f5c:	8892      	ldrh	r2, [r2, #4]
 8004f5e:	809a      	strh	r2, [r3, #4]

	BLE_paired = icons_indicator.ble_indicator;
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <Load_Indicator_Icons_To_Display+0x7c>)
 8004f62:	78db      	ldrb	r3, [r3, #3]
 8004f64:	461a      	mov	r2, r3
 8004f66:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <Load_Indicator_Icons_To_Display+0x80>)
 8004f68:	601a      	str	r2, [r3, #0]
	stand_status = icons_indicator.stand_indicator;
 8004f6a:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <Load_Indicator_Icons_To_Display+0x7c>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <Load_Indicator_Icons_To_Display+0x84>)
 8004f72:	601a      	str	r2, [r3, #0]
	gps_tracking_status = icons_indicator.gps_indicator;
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <Load_Indicator_Icons_To_Display+0x7c>)
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <Load_Indicator_Icons_To_Display+0x88>)
 8004f7c:	601a      	str	r2, [r3, #0]
	kill_switch_status = icons_indicator.kill_switch;
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <Load_Indicator_Icons_To_Display+0x7c>)
 8004f80:	791b      	ldrb	r3, [r3, #4]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <Load_Indicator_Icons_To_Display+0x8c>)
 8004f86:	601a      	str	r2, [r3, #0]

	if (kill_switch_status == kill_sw_OFF){
 8004f88:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <Load_Indicator_Icons_To_Display+0x8c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d105      	bne.n	8004f9c <Load_Indicator_Icons_To_Display+0x50>

		kill_switch_just_pressed = 1;
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <Load_Indicator_Icons_To_Display+0x90>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
		kill_transparency_level = 180;
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <Load_Indicator_Icons_To_Display+0x94>)
 8004f98:	22b4      	movs	r2, #180	; 0xb4
 8004f9a:	601a      	str	r2, [r3, #0]
	}

	mode_button_when_Switches_ON = icons_indicator.mode_button_when_kill_and_stand_Switch_engaged;
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <Load_Indicator_Icons_To_Display+0x7c>)
 8004f9e:	795b      	ldrb	r3, [r3, #5]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <Load_Indicator_Icons_To_Display+0x98>)
 8004fa4:	601a      	str	r2, [r3, #0]
	controller_temperature = icons_indicator.temperature_indicator;
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <Load_Indicator_Icons_To_Display+0x7c>)
 8004fa8:	789b      	ldrb	r3, [r3, #2]
 8004faa:	461a      	mov	r2, r3
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <Load_Indicator_Icons_To_Display+0x9c>)
 8004fae:	601a      	str	r2, [r3, #0]

	sprint(dash_temperature_value, "%d", controller_temperature);
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <Load_Indicator_Icons_To_Display+0x9c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	490d      	ldr	r1, [pc, #52]	; (8004fec <Load_Indicator_Icons_To_Display+0xa0>)
 8004fb8:	480d      	ldr	r0, [pc, #52]	; (8004ff0 <Load_Indicator_Icons_To_Display+0xa4>)
 8004fba:	f008 fd11 	bl	800d9e0 <sprint>
//	print("CAN_ID : 0x0%x : INDICATOR  : BLE |%s| STAND |%s| GPS |%s| KILL |%s| HOLD |%s| TEMP |%d|\n", Receive_id, (BLE_paired == 1)? "^^":"--", (stand_status == 1)? "^^":"--", (gps_tracking_status == 1)? "^^":"--", (kill_switch_status == 1)? "^^":"--", (mode_button_when_Switches_ON == 1)? "^^":"--", controller_temperature);
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000240 	.word	0x20000240
 8004fcc:	200008fc 	.word	0x200008fc
 8004fd0:	20000460 	.word	0x20000460
 8004fd4:	2000070c 	.word	0x2000070c
 8004fd8:	2000099c 	.word	0x2000099c
 8004fdc:	20000768 	.word	0x20000768
 8004fe0:	2000002c 	.word	0x2000002c
 8004fe4:	20000810 	.word	0x20000810
 8004fe8:	200004c4 	.word	0x200004c4
 8004fec:	0800f6b4 	.word	0x0800f6b4
 8004ff0:	2000037c 	.word	0x2000037c

08004ff4 <Load_OdoTrip_Data_To_Display>:


void Load_OdoTrip_Data_To_Display(uint8_t *data) {
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

	odometry.odo = *((float*)(&data[0]));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <Load_OdoTrip_Data_To_Display+0xa8>)
 8005002:	6013      	str	r3, [r2, #0]
	odometry.trip = *((float*)(&data[4]));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4a24      	ldr	r2, [pc, #144]	; (800509c <Load_OdoTrip_Data_To_Display+0xa8>)
 800500a:	6053      	str	r3, [r2, #4]

	sprint(dash_odometry, "%d.%d km", (int) odometry.odo, (int) (odometry.odo * 10) % 10);
 800500c:	4b23      	ldr	r3, [pc, #140]	; (800509c <Load_OdoTrip_Data_To_Display+0xa8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff f80d 	bl	8004030 <__aeabi_f2iz>
 8005016:	4604      	mov	r4, r0
 8005018:	4b20      	ldr	r3, [pc, #128]	; (800509c <Load_OdoTrip_Data_To_Display+0xa8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4920      	ldr	r1, [pc, #128]	; (80050a0 <Load_OdoTrip_Data_To_Display+0xac>)
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fe40 	bl	8003ca4 <__aeabi_fmul>
 8005024:	4603      	mov	r3, r0
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff f802 	bl	8004030 <__aeabi_f2iz>
 800502c:	4601      	mov	r1, r0
 800502e:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <Load_OdoTrip_Data_To_Display+0xb0>)
 8005030:	fb83 2301 	smull	r2, r3, r3, r1
 8005034:	109a      	asrs	r2, r3, #2
 8005036:	17cb      	asrs	r3, r1, #31
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	1aca      	subs	r2, r1, r3
 8005044:	4613      	mov	r3, r2
 8005046:	4622      	mov	r2, r4
 8005048:	4917      	ldr	r1, [pc, #92]	; (80050a8 <Load_OdoTrip_Data_To_Display+0xb4>)
 800504a:	4818      	ldr	r0, [pc, #96]	; (80050ac <Load_OdoTrip_Data_To_Display+0xb8>)
 800504c:	f008 fcc8 	bl	800d9e0 <sprint>
	sprint(dash_trip, "%d.%d km", (int) odometry.trip, (int) (odometry.trip * 10) % 10);
 8005050:	4b12      	ldr	r3, [pc, #72]	; (800509c <Load_OdoTrip_Data_To_Display+0xa8>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe ffeb 	bl	8004030 <__aeabi_f2iz>
 800505a:	4604      	mov	r4, r0
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <Load_OdoTrip_Data_To_Display+0xa8>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	490f      	ldr	r1, [pc, #60]	; (80050a0 <Load_OdoTrip_Data_To_Display+0xac>)
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fe1e 	bl	8003ca4 <__aeabi_fmul>
 8005068:	4603      	mov	r3, r0
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe ffe0 	bl	8004030 <__aeabi_f2iz>
 8005070:	4601      	mov	r1, r0
 8005072:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <Load_OdoTrip_Data_To_Display+0xb0>)
 8005074:	fb83 2301 	smull	r2, r3, r3, r1
 8005078:	109a      	asrs	r2, r3, #2
 800507a:	17cb      	asrs	r3, r1, #31
 800507c:	1ad2      	subs	r2, r2, r3
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	1aca      	subs	r2, r1, r3
 8005088:	4613      	mov	r3, r2
 800508a:	4622      	mov	r2, r4
 800508c:	4906      	ldr	r1, [pc, #24]	; (80050a8 <Load_OdoTrip_Data_To_Display+0xb4>)
 800508e:	4808      	ldr	r0, [pc, #32]	; (80050b0 <Load_OdoTrip_Data_To_Display+0xbc>)
 8005090:	f008 fca6 	bl	800d9e0 <sprint>

//	print("CAN_ID : 0x0%x :  ODO-TRIP  : %d.%d km   %d.%d km\n", Receive_id, (int) odometry.odo, (int) (odometry.odo * 10) % 10, (int) odometry.trip, (int) (odometry.trip * 10) % 10);
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	bd90      	pop	{r4, r7, pc}
 800509c:	20000248 	.word	0x20000248
 80050a0:	41200000 	.word	0x41200000
 80050a4:	66666667 	.word	0x66666667
 80050a8:	0800f6b8 	.word	0x0800f6b8
 80050ac:	20000904 	.word	0x20000904
 80050b0:	20000a64 	.word	0x20000a64

080050b4 <Load_Passkey_To_Display>:


void Load_Passkey_To_Display(uint8_t *data, uint32_t Receive_id, uint32_t data_len) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]

	BLE_passkey.passkey = *((uint32_t*)(&data[0]));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <Load_Passkey_To_Display+0x34>)
 80050c6:	6013      	str	r3, [r2, #0]

	memset(dash_passkey, 0, sizeof(dash_passkey));
 80050c8:	221e      	movs	r2, #30
 80050ca:	2100      	movs	r1, #0
 80050cc:	4807      	ldr	r0, [pc, #28]	; (80050ec <Load_Passkey_To_Display+0x38>)
 80050ce:	f00a facf 	bl	800f670 <memset>
	sprint(dash_passkey, "%06d", (int)BLE_passkey.passkey);
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <Load_Passkey_To_Display+0x34>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	4905      	ldr	r1, [pc, #20]	; (80050f0 <Load_Passkey_To_Display+0x3c>)
 80050da:	4804      	ldr	r0, [pc, #16]	; (80050ec <Load_Passkey_To_Display+0x38>)
 80050dc:	f008 fc80 	bl	800d9e0 <sprint>

//	print("CAN_ID : 0x0%x :   PASSKEY  : %d\n", Receive_id, (int)BLE_passkey.passkey);
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000250 	.word	0x20000250
 80050ec:	2000058c 	.word	0x2000058c
 80050f0:	0800f72c 	.word	0x0800f72c

080050f4 <Load_New_Year_Date_To_Display>:


void Load_New_Year_Date_To_Display(uint8_t *data) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

	new_year_date.year = *((uint32_t*) (&data[0]));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0c      	ldr	r2, [pc, #48]	; (8005134 <Load_New_Year_Date_To_Display+0x40>)
 8005102:	6013      	str	r3, [r2, #0]
	new_year_date.month = data[4];
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	791a      	ldrb	r2, [r3, #4]
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <Load_New_Year_Date_To_Display+0x40>)
 800510a:	715a      	strb	r2, [r3, #5]
	new_year_date.day = data[5];
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	795a      	ldrb	r2, [r3, #5]
 8005110:	4b08      	ldr	r3, [pc, #32]	; (8005134 <Load_New_Year_Date_To_Display+0x40>)
 8005112:	711a      	strb	r2, [r3, #4]

	memset(dash_year_BS, 0, sizeof(dash_year_BS));
 8005114:	221e      	movs	r2, #30
 8005116:	2100      	movs	r1, #0
 8005118:	4807      	ldr	r0, [pc, #28]	; (8005138 <Load_New_Year_Date_To_Display+0x44>)
 800511a:	f00a faa9 	bl	800f670 <memset>
	sprint(dash_year_BS, "%lu", new_year_date.year);
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <Load_New_Year_Date_To_Display+0x40>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	4905      	ldr	r1, [pc, #20]	; (800513c <Load_New_Year_Date_To_Display+0x48>)
 8005126:	4804      	ldr	r0, [pc, #16]	; (8005138 <Load_New_Year_Date_To_Display+0x44>)
 8005128:	f008 fc5a 	bl	800d9e0 <sprint>

//	print("CAN ID : 0x0%x :  NEW_YEAR  : %d - %d - %d\n", Receive_id, new_year_date.year, new_year_date.month, new_year_date.day);
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000254 	.word	0x20000254
 8005138:	200005f4 	.word	0x200005f4
 800513c:	0800f734 	.word	0x0800f734

08005140 <Load_Release_Notes_To_Display>:


void Load_Release_Notes_To_Display(void){
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0

	memset(dash_release_notes, 0, sizeof(dash_release_notes));
 8005144:	22c8      	movs	r2, #200	; 0xc8
 8005146:	2100      	movs	r1, #0
 8005148:	4804      	ldr	r0, [pc, #16]	; (800515c <Load_Release_Notes_To_Display+0x1c>)
 800514a:	f00a fa91 	bl	800f670 <memset>
	sprint(dash_release_notes, "%s", ui_release_notes.release_notes);
 800514e:	4a04      	ldr	r2, [pc, #16]	; (8005160 <Load_Release_Notes_To_Display+0x20>)
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <Load_Release_Notes_To_Display+0x24>)
 8005152:	4802      	ldr	r0, [pc, #8]	; (800515c <Load_Release_Notes_To_Display+0x1c>)
 8005154:	f008 fc44 	bl	800d9e0 <sprint>

//	print("RELEASE NOTES : %s\n", dash_release_notes);
}
 8005158:	bf00      	nop
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000640 	.word	0x20000640
 8005160:	200002b0 	.word	0x200002b0
 8005164:	0800f6d4 	.word	0x0800f6d4

08005168 <Load_Username_Data>:

void Load_Username_Data(uint8_t *data, uint32_t Receive_id, uint32_t data_len){
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]

	*((uint64_t*)dash_username) = *((uint64_t*)(&data[0]));
 8005174:	4909      	ldr	r1, [pc, #36]	; (800519c <Load_Username_Data+0x34>)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	e9c1 2300 	strd	r2, r3, [r1]
	dash_username[data_len] ='\0';
 8005180:	4a06      	ldr	r2, [pc, #24]	; (800519c <Load_Username_Data+0x34>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]

	sprint(dash_welcome_username, "Welcome, %s!", dash_username);
 800518a:	4a04      	ldr	r2, [pc, #16]	; (800519c <Load_Username_Data+0x34>)
 800518c:	4904      	ldr	r1, [pc, #16]	; (80051a0 <Load_Username_Data+0x38>)
 800518e:	4805      	ldr	r0, [pc, #20]	; (80051a4 <Load_Username_Data+0x3c>)
 8005190:	f008 fc26 	bl	800d9e0 <sprint>
//	print("CAN_ID : 0x0%x :  USER_NAME : %s\n", Receive_id, dash_username);
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200005d4 	.word	0x200005d4
 80051a0:	0800f6c4 	.word	0x0800f6c4
 80051a4:	200004cc 	.word	0x200004cc

080051a8 <Load_Bikename_Data>:

void Load_Bikename_Data(uint8_t *data, uint32_t Receive_id, uint32_t data_len){
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]

	*((uint64_t*)dash_bikename) = *((uint64_t*)(&data[0]));
 80051b4:	4907      	ldr	r1, [pc, #28]	; (80051d4 <Load_Bikename_Data+0x2c>)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	e9c1 2300 	strd	r2, r3, [r1]
	dash_bikename[data_len] = '\0';
 80051c0:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <Load_Bikename_Data+0x2c>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]

//	print("CAN_ID : 0x0%x :  BIKE_NAME : %s\n", Receive_id, dash_bikename);
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	20000614 	.word	0x20000614

080051d8 <Load_Powertrain_Data>:

void Load_Powertrain_Data(uint8_t *data){
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

	bikeSpeed1 = data[0];
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <Load_Powertrain_Data+0x50>)
 80051e8:	601a      	str	r2, [r3, #0]
	WhperKM_value = data[1];
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3301      	adds	r3, #1
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b0e      	ldr	r3, [pc, #56]	; (800522c <Load_Powertrain_Data+0x54>)
 80051f4:	601a      	str	r2, [r3, #0]
	Is_WhperKM_positive = data[2];
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3302      	adds	r3, #2
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <Load_Powertrain_Data+0x58>)
 8005200:	601a      	str	r2, [r3, #0]

	sprint(dash_speed1, "%d", bikeSpeed1);
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <Load_Powertrain_Data+0x50>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	490a      	ldr	r1, [pc, #40]	; (8005234 <Load_Powertrain_Data+0x5c>)
 800520a:	480b      	ldr	r0, [pc, #44]	; (8005238 <Load_Powertrain_Data+0x60>)
 800520c:	f008 fbe8 	bl	800d9e0 <sprint>
	sprint(dash_WhperKM, "%d", WhperKM_value);
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <Load_Powertrain_Data+0x54>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	4907      	ldr	r1, [pc, #28]	; (8005234 <Load_Powertrain_Data+0x5c>)
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <Load_Powertrain_Data+0x64>)
 800521a:	f008 fbe1 	bl	800d9e0 <sprint>
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000848 	.word	0x20000848
 800522c:	2000079c 	.word	0x2000079c
 8005230:	20000574 	.word	0x20000574
 8005234:	0800f6b4 	.word	0x0800f6b4
 8005238:	20000748 	.word	0x20000748
 800523c:	2000046c 	.word	0x2000046c

08005240 <Load_OTA_Data>:

void Load_OTA_Data(uint8_t *data){
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

	OTA_download_completion_pct = data[0];
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <Load_OTA_Data+0x28>)
 8005250:	601a      	str	r2, [r3, #0]
	OTA_est_time = data[1];
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3301      	adds	r3, #1
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <Load_OTA_Data+0x2c>)
 800525c:	601a      	str	r2, [r3, #0]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	200003b0 	.word	0x200003b0
 800526c:	20000814 	.word	0x20000814

08005270 <Load_Network_Strength_Value>:

void Load_Network_Strength_Value(uint8_t *data){
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

	network_strength_value = data[0];
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	4b03      	ldr	r3, [pc, #12]	; (800528c <Load_Network_Strength_Value+0x1c>)
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr
 800528c:	200004bc 	.word	0x200004bc

08005290 <Jump_To_Bootloader>:

void Jump_To_Bootloader(void){
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0

	HAL_FLASH_Unlock();
 8005296:	f002 fa99 	bl	80077cc <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.PageAddress = 0x08003000;
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <Jump_To_Bootloader+0x44>)
 80052a0:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80052a6:	1d3a      	adds	r2, r7, #4
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f002 fb74 	bl	800799c <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x08003000, 1);
 80052b4:	f04f 0201 	mov.w	r2, #1
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	4905      	ldr	r1, [pc, #20]	; (80052d4 <Jump_To_Bootloader+0x44>)
 80052be:	2002      	movs	r0, #2
 80052c0:	f002 fa14 	bl	80076ec <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80052c4:	f002 faa8 	bl	8007818 <HAL_FLASH_Lock>
	HAL_NVIC_SystemReset();
 80052c8:	f002 f9b9 	bl	800763e <HAL_NVIC_SystemReset>
}
 80052cc:	bf00      	nop
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	08003000 	.word	0x08003000

080052d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]

	if (htim == &htim4) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a12      	ldr	r2, [pc, #72]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	f040 81f1 	bne.w	80056cc <HAL_TIM_PeriodElapsedCallback+0x3f4>

		/*
		 * PRIMARY UI TIMING
		 */
		// Starting Splashscreen
		if (starting_splashscreen_flag == 1) {
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d12c      	bne.n	800534c <HAL_TIM_PeriodElapsedCallback+0x74>

			starting_splashscreen_timer++;
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	4a0e      	ldr	r2, [pc, #56]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80052fa:	6013      	str	r3, [r2, #0]

			ending_splashscreen_timer = 0;		// Reset Ending Splashscreen timer
 80052fc:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
			ending_splashscreen_flag = 0;		// Reset Ending Splashscreen flag
 8005302:	4b0e      	ldr	r3, [pc, #56]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

			if (starting_splashscreen_timer >= 2000) {
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005310:	d348      	bcc.n	80053a4 <HAL_TIM_PeriodElapsedCallback+0xcc>

				starting_splashscreen_timer = 0;
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
				starting_splashscreen_flag = 0;
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
				transmit_can_message(&hcan, TIMER_TIMEOUT_ACK, tier1_cmd_can_success_ack, sizeof(tier1_cmd_can_success_ack));
 800531e:	2308      	movs	r3, #8
 8005320:	4a07      	ldr	r2, [pc, #28]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005322:	4908      	ldr	r1, [pc, #32]	; (8005344 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005324:	4808      	ldr	r0, [pc, #32]	; (8005348 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005326:	f7fe ff11 	bl	800414c <transmit_can_message>
 800532a:	e03b      	b.n	80053a4 <HAL_TIM_PeriodElapsedCallback+0xcc>
 800532c:	20000a98 	.word	0x20000a98
 8005330:	20000740 	.word	0x20000740
 8005334:	20000544 	.word	0x20000544
 8005338:	200004b4 	.word	0x200004b4
 800533c:	20000534 	.word	0x20000534
 8005340:	20000004 	.word	0x20000004
 8005344:	1002fafc 	.word	0x1002fafc
 8005348:	20000b14 	.word	0x20000b14
			}
		}

		// Ending Splashscreen
		else if (ending_splashscreen_flag == 1) {
 800534c:	4b9a      	ldr	r3, [pc, #616]	; (80055b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d127      	bne.n	80053a4 <HAL_TIM_PeriodElapsedCallback+0xcc>

			ending_splashscreen_timer++;
 8005354:	4b99      	ldr	r3, [pc, #612]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	4a98      	ldr	r2, [pc, #608]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800535c:	6013      	str	r3, [r2, #0]

			starting_splashscreen_timer = 0;
 800535e:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
			starting_splashscreen_flag = 0;
 8005364:	4b97      	ldr	r3, [pc, #604]	; (80055c4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

			if (ending_splashscreen_timer == 1000){
 800536a:	4b94      	ldr	r3, [pc, #592]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005372:	d105      	bne.n	8005380 <HAL_TIM_PeriodElapsedCallback+0xa8>

				initiate_ending_splashscreen_fade = 1;
 8005374:	4b94      	ldr	r3, [pc, #592]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]
				initiate_downscale = 1;
 800537a:	4b94      	ldr	r3, [pc, #592]	; (80055cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800537c:	2201      	movs	r2, #1
 800537e:	601a      	str	r2, [r3, #0]
			}

			if (ending_splashscreen_transparency_level < 40) {
 8005380:	4b93      	ldr	r3, [pc, #588]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b27      	cmp	r3, #39	; 0x27
 8005386:	dc0d      	bgt.n	80053a4 <HAL_TIM_PeriodElapsedCallback+0xcc>
			//			if (ending_splashscreen_timer >= 1300) {

				ending_splashscreen_timer = 0;
 8005388:	4b8c      	ldr	r3, [pc, #560]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
				ending_splashscreen_flag = 0;
 800538e:	4b8a      	ldr	r3, [pc, #552]	; (80055b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
				display_power_down();
 8005394:	f009 ff5e 	bl	800f254 <display_power_down>

				initiate_ending_splashscreen_fade = 0;
 8005398:	4b8b      	ldr	r3, [pc, #556]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
				ending_splashscreen_transparency_level = 250;
 800539e:	4b8c      	ldr	r3, [pc, #560]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80053a0:	22fa      	movs	r2, #250	; 0xfa
 80053a2:	601a      	str	r2, [r3, #0]

		/*
		 * BLE UI TIMING
		 */
		// Pairing Successful
		if (pairing_successful_flag == 1) {
 80053a4:	4b8b      	ldr	r3, [pc, #556]	; (80055d4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d112      	bne.n	80053d2 <HAL_TIM_PeriodElapsedCallback+0xfa>

			pairing_successful_timer++;
 80053ac:	4b8a      	ldr	r3, [pc, #552]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	4a89      	ldr	r2, [pc, #548]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80053b4:	6013      	str	r3, [r2, #0]
			if (pairing_successful_timer >= 2000) {
 80053b6:	4b88      	ldr	r3, [pc, #544]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80053be:	d308      	bcc.n	80053d2 <HAL_TIM_PeriodElapsedCallback+0xfa>
				pairing_successful_timer = 0;
 80053c0:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
				pairing_successful_flag = 0;
 80053c6:	4b83      	ldr	r3, [pc, #524]	; (80055d4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
				tier1_cmd_can = STATS;
 80053cc:	4b83      	ldr	r3, [pc, #524]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80053ce:	2204      	movs	r2, #4
 80053d0:	701a      	strb	r2, [r3, #0]
			}
		}

		// Pairing Failed
		if (pairing_failed_flag == 1) {
 80053d2:	4b83      	ldr	r3, [pc, #524]	; (80055e0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d116      	bne.n	8005408 <HAL_TIM_PeriodElapsedCallback+0x130>

			pairing_failed_timer++;
 80053da:	4b82      	ldr	r3, [pc, #520]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3301      	adds	r3, #1
 80053e0:	4a80      	ldr	r2, [pc, #512]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80053e2:	6013      	str	r3, [r2, #0]
			if (pairing_failed_timer >= 2000) {
 80053e4:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80053ec:	d30c      	bcc.n	8005408 <HAL_TIM_PeriodElapsedCallback+0x130>
				pairing_failed_timer = 0;
 80053ee:	4b7d      	ldr	r3, [pc, #500]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
				pairing_failed_flag = 0;
 80053f4:	4b7a      	ldr	r3, [pc, #488]	; (80055e0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

				if (key_status == key_sw_ON){
 80053fa:	4b7b      	ldr	r3, [pc, #492]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d102      	bne.n	8005408 <HAL_TIM_PeriodElapsedCallback+0x130>
					tier1_cmd_can = STATS;
 8005402:	4b76      	ldr	r3, [pc, #472]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005404:	2204      	movs	r2, #4
 8005406:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		// Passkey Timer
		if (pairing_passkey_flag == 1) {
 8005408:	4b78      	ldr	r3, [pc, #480]	; (80055ec <HAL_TIM_PeriodElapsedCallback+0x314>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d11e      	bne.n	800544e <HAL_TIM_PeriodElapsedCallback+0x176>

			pairing_passkey_timer++;
 8005410:	4b77      	ldr	r3, [pc, #476]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	4a76      	ldr	r2, [pc, #472]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8005418:	6013      	str	r3, [r2, #0]
			if (pairing_passkey_timer >= 20000) {
 800541a:	4b75      	ldr	r3, [pc, #468]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005422:	4293      	cmp	r3, r2
 8005424:	dd05      	ble.n	8005432 <HAL_TIM_PeriodElapsedCallback+0x15a>
				pairing_passkey_timer = 0;
 8005426:	4b72      	ldr	r3, [pc, #456]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
				pairing_passkey_flag = 0;
 800542c:	4b6f      	ldr	r3, [pc, #444]	; (80055ec <HAL_TIM_PeriodElapsedCallback+0x314>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
			}
			sprint(dash_passkey_timeout, "Timeout in %d seconds", (20 - (pairing_passkey_timer / 1000)));
 8005432:	4b6f      	ldr	r3, [pc, #444]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6f      	ldr	r2, [pc, #444]	; (80055f4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8005438:	fb82 1203 	smull	r1, r2, r2, r3
 800543c:	1192      	asrs	r2, r2, #6
 800543e:	17db      	asrs	r3, r3, #31
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	3314      	adds	r3, #20
 8005444:	461a      	mov	r2, r3
 8005446:	496c      	ldr	r1, [pc, #432]	; (80055f8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8005448:	486c      	ldr	r0, [pc, #432]	; (80055fc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800544a:	f008 fac9 	bl	800d9e0 <sprint>

		/*
		 * OTA UI TIMING
		 */
		// OTA Successful
		if (ota_successful_flag == 1) {
 800544e:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d10f      	bne.n	8005476 <HAL_TIM_PeriodElapsedCallback+0x19e>

			ota_successful_timer++;
 8005456:	4b6b      	ldr	r3, [pc, #428]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a69      	ldr	r2, [pc, #420]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800545e:	6013      	str	r3, [r2, #0]
			if (ota_successful_timer >= 2000) {
 8005460:	4b68      	ldr	r3, [pc, #416]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005468:	d305      	bcc.n	8005476 <HAL_TIM_PeriodElapsedCallback+0x19e>
				ota_successful_timer = 0;
 800546a:	4b66      	ldr	r3, [pc, #408]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
				ota_successful_flag = 0;
 8005470:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
			}
		}

		// OTA Failed
		if (ota_failed_flag == 1) {
 8005476:	4b64      	ldr	r3, [pc, #400]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10f      	bne.n	800549e <HAL_TIM_PeriodElapsedCallback+0x1c6>

			ota_failed_timer++;
 800547e:	4b63      	ldr	r3, [pc, #396]	; (800560c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	4a61      	ldr	r2, [pc, #388]	; (800560c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8005486:	6013      	str	r3, [r2, #0]
			if (ota_failed_timer >= 2000) {
 8005488:	4b60      	ldr	r3, [pc, #384]	; (800560c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005490:	d305      	bcc.n	800549e <HAL_TIM_PeriodElapsedCallback+0x1c6>
				ota_failed_timer = 0;
 8005492:	4b5e      	ldr	r3, [pc, #376]	; (800560c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
				ota_failed_flag = 0;
 8005498:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
			}
		}

		// OTA available
		if (ota_available_flag == 1) {
 800549e:	4b5c      	ldr	r3, [pc, #368]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d116      	bne.n	80054d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>

			ota_available_timer++;
 80054a6:	4b5b      	ldr	r3, [pc, #364]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	4a59      	ldr	r2, [pc, #356]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80054ae:	6013      	str	r3, [r2, #0]

			if (ota_available_timer >= 5000) {
 80054b0:	4b58      	ldr	r3, [pc, #352]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d90b      	bls.n	80054d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
				ota_available_timer = 0;
 80054bc:	4b55      	ldr	r3, [pc, #340]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
				ota_available_flag = 0;
 80054c2:	4b53      	ldr	r3, [pc, #332]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
				transmit_can_message(&hcan, TIMER_TIMEOUT_ACK, ota_available_timer_timeout_ack, sizeof(ota_available_timer_timeout_ack));
 80054c8:	2308      	movs	r3, #8
 80054ca:	4a53      	ldr	r2, [pc, #332]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80054cc:	4953      	ldr	r1, [pc, #332]	; (800561c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80054ce:	4854      	ldr	r0, [pc, #336]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80054d0:	f7fe fe3c 	bl	800414c <transmit_can_message>

		/*
		 * WISH MESSAGE SCREEN
		 */
		// Birthday
		if (birthday_message_flag == 1) {
 80054d4:	4b53      	ldr	r3, [pc, #332]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d11c      	bne.n	8005516 <HAL_TIM_PeriodElapsedCallback+0x23e>

			ending_splashscreen_timer = 0;		// Reset Ending Splashscreen timer
 80054dc:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
			ending_splashscreen_flag = 0;		// Reset Ending Splashscreen flag
 80054e2:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

			birthday_message_timer++;
 80054e8:	4b4f      	ldr	r3, [pc, #316]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	4a4e      	ldr	r2, [pc, #312]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80054f0:	6013      	str	r3, [r2, #0]
			if (birthday_message_timer >= 3000) {
 80054f2:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d90b      	bls.n	8005516 <HAL_TIM_PeriodElapsedCallback+0x23e>
				birthday_message_timer = 0;
 80054fe:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
				birthday_message_flag = 0;
 8005504:	4b47      	ldr	r3, [pc, #284]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

				transmit_can_message(&hcan, TIMER_TIMEOUT_ACK, tier1_cmd_can_success_ack, sizeof(tier1_cmd_can_success_ack));
 800550a:	2308      	movs	r3, #8
 800550c:	4a47      	ldr	r2, [pc, #284]	; (800562c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800550e:	4943      	ldr	r1, [pc, #268]	; (800561c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8005510:	4843      	ldr	r0, [pc, #268]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8005512:	f7fe fe1b 	bl	800414c <transmit_can_message>
			}
		}

		// New Year
		if (new_year_message_flag == 1) {
 8005516:	4b46      	ldr	r3, [pc, #280]	; (8005630 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d11c      	bne.n	8005558 <HAL_TIM_PeriodElapsedCallback+0x280>

			ending_splashscreen_timer = 0;		// Reset Ending Splashscreen timer
 800551e:	4b27      	ldr	r3, [pc, #156]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
			ending_splashscreen_flag = 0;		// Reset Ending Splashscreen flag
 8005524:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]

			new_year_message_timer++;
 800552a:	4b42      	ldr	r3, [pc, #264]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	4a40      	ldr	r2, [pc, #256]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8005532:	6013      	str	r3, [r2, #0]
			if (new_year_message_timer >= 3000) {
 8005534:	4b3f      	ldr	r3, [pc, #252]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800553c:	4293      	cmp	r3, r2
 800553e:	d90b      	bls.n	8005558 <HAL_TIM_PeriodElapsedCallback+0x280>
				new_year_message_timer = 0;
 8005540:	4b3c      	ldr	r3, [pc, #240]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
				new_year_message_flag = 0;
 8005546:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

				transmit_can_message(&hcan, TIMER_TIMEOUT_ACK, tier1_cmd_can_success_ack, sizeof(tier1_cmd_can_success_ack));
 800554c:	2308      	movs	r3, #8
 800554e:	4a37      	ldr	r2, [pc, #220]	; (800562c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8005550:	4932      	ldr	r1, [pc, #200]	; (800561c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8005552:	4833      	ldr	r0, [pc, #204]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8005554:	f7fe fdfa 	bl	800414c <transmit_can_message>
			}
		}

		// Incoming Call
		if (call_status == INCOMING){
 8005558:	4b37      	ldr	r3, [pc, #220]	; (8005638 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 80b1 	bne.w	80056c4 <HAL_TIM_PeriodElapsedCallback+0x3ec>

			incoming_call_blinker++;
 8005562:	4b36      	ldr	r3, [pc, #216]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	4a34      	ldr	r2, [pc, #208]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800556a:	6013      	str	r3, [r2, #0]

			if (incoming_call_blinker <= call_notification_timing[0] && incoming_call_blinker > 0){
 800556c:	4b34      	ldr	r3, [pc, #208]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	4b32      	ldr	r3, [pc, #200]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d309      	bcc.n	800558e <HAL_TIM_PeriodElapsedCallback+0x2b6>
 800557a:	4b30      	ldr	r3, [pc, #192]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_TIM_PeriodElapsedCallback+0x2b6>
				show_blinker = 1;
 8005582:	4b30      	ldr	r3, [pc, #192]	; (8005644 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]
				incoming_call_transparency = 255;
 8005588:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800558a:	22ff      	movs	r2, #255	; 0xff
 800558c:	601a      	str	r2, [r3, #0]
			}

			if (incoming_call_blinker <= (call_notification_timing[1] + call_notification_timing[0]) && incoming_call_blinker > call_notification_timing[1]){
 800558e:	4b2c      	ldr	r3, [pc, #176]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4413      	add	r3, r2
 8005598:	461a      	mov	r2, r3
 800559a:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d361      	bcc.n	8005666 <HAL_TIM_PeriodElapsedCallback+0x38e>
 80055a2:	4b27      	ldr	r3, [pc, #156]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	461a      	mov	r2, r3
 80055a8:	4b24      	ldr	r3, [pc, #144]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x364>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d25a      	bcs.n	8005666 <HAL_TIM_PeriodElapsedCallback+0x38e>

				show_blinker = 1;
 80055b0:	4b24      	ldr	r3, [pc, #144]	; (8005644 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	e04a      	b.n	800564c <HAL_TIM_PeriodElapsedCallback+0x374>
 80055b6:	bf00      	nop
 80055b8:	20000534 	.word	0x20000534
 80055bc:	200004b4 	.word	0x200004b4
 80055c0:	20000544 	.word	0x20000544
 80055c4:	20000740 	.word	0x20000740
 80055c8:	20000884 	.word	0x20000884
 80055cc:	20000260 	.word	0x20000260
 80055d0:	20000028 	.word	0x20000028
 80055d4:	20000528 	.word	0x20000528
 80055d8:	200003b8 	.word	0x200003b8
 80055dc:	200009c8 	.word	0x200009c8
 80055e0:	20000778 	.word	0x20000778
 80055e4:	2000053c 	.word	0x2000053c
 80055e8:	20000738 	.word	0x20000738
 80055ec:	200004c8 	.word	0x200004c8
 80055f0:	20000524 	.word	0x20000524
 80055f4:	10624dd3 	.word	0x10624dd3
 80055f8:	0800f738 	.word	0x0800f738
 80055fc:	200005ac 	.word	0x200005ac
 8005600:	20000498 	.word	0x20000498
 8005604:	20000938 	.word	0x20000938
 8005608:	20000468 	.word	0x20000468
 800560c:	20000890 	.word	0x20000890
 8005610:	200004a0 	.word	0x200004a0
 8005614:	2000049c 	.word	0x2000049c
 8005618:	2000000c 	.word	0x2000000c
 800561c:	1002fafc 	.word	0x1002fafc
 8005620:	20000b14 	.word	0x20000b14
 8005624:	20000450 	.word	0x20000450
 8005628:	200005ec 	.word	0x200005ec
 800562c:	20000004 	.word	0x20000004
 8005630:	20000a50 	.word	0x20000a50
 8005634:	200003c0 	.word	0x200003c0
 8005638:	200004ec 	.word	0x200004ec
 800563c:	20000264 	.word	0x20000264
 8005640:	20000090 	.word	0x20000090
 8005644:	20000888 	.word	0x20000888
 8005648:	2000008c 	.word	0x2000008c
 800564c:	601a      	str	r2, [r3, #0]
				if (incoming_call_blinker % 2 == 0){
 800564e:	4b21      	ldr	r3, [pc, #132]	; (80056d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d138      	bne.n	80056cc <HAL_TIM_PeriodElapsedCallback+0x3f4>
					incoming_call_transparency--;
 800565a:	4b1f      	ldr	r3, [pc, #124]	; (80056d8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	4a1d      	ldr	r2, [pc, #116]	; (80056d8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8005662:	6013      	str	r3, [r2, #0]
				if (incoming_call_blinker % 2 == 0){
 8005664:	e032      	b.n	80056cc <HAL_TIM_PeriodElapsedCallback+0x3f4>
				}

			} else if (incoming_call_blinker > (call_notification_timing[1] + call_notification_timing[0]) && incoming_call_blinker < (call_notification_timing[2] + call_notification_timing[1] + call_notification_timing[0])) {
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4413      	add	r3, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d213      	bcs.n	80056a2 <HAL_TIM_PeriodElapsedCallback+0x3ca>
 800567a:	4b18      	ldr	r3, [pc, #96]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	4b17      	ldr	r3, [pc, #92]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	441a      	add	r2, r3
 8005684:	4b15      	ldr	r3, [pc, #84]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4413      	add	r3, r2
 800568a:	461a      	mov	r2, r3
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d906      	bls.n	80056a2 <HAL_TIM_PeriodElapsedCallback+0x3ca>

				show_blinker = 0;
 8005694:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
				incoming_call_transparency = 255;
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800569c:	22ff      	movs	r2, #255	; 0xff
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	e014      	b.n	80056cc <HAL_TIM_PeriodElapsedCallback+0x3f4>

			} else if (incoming_call_blinker > (call_notification_timing[2] + call_notification_timing[1] + call_notification_timing[0])){
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	441a      	add	r2, r3
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x404>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d207      	bcs.n	80056cc <HAL_TIM_PeriodElapsedCallback+0x3f4>

				incoming_call_blinker = 0;
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
			}
		} else {
			incoming_call_blinker = 0;
		}
	}
}
 80056c2:	e003      	b.n	80056cc <HAL_TIM_PeriodElapsedCallback+0x3f4>
			incoming_call_blinker = 0;
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	e7ff      	b.n	80056cc <HAL_TIM_PeriodElapsedCallback+0x3f4>
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000264 	.word	0x20000264
 80056d8:	2000008c 	.word	0x2000008c
 80056dc:	20000090 	.word	0x20000090
 80056e0:	20000888 	.word	0x20000888

080056e4 <Find_Day_of_week>:



void Find_Day_of_week(int day){
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

	sprint(today, "%s", DAYS[day]);
 80056ec:	4a06      	ldr	r2, [pc, #24]	; (8005708 <Find_Day_of_week+0x24>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f4:	461a      	mov	r2, r3
 80056f6:	4905      	ldr	r1, [pc, #20]	; (800570c <Find_Day_of_week+0x28>)
 80056f8:	4805      	ldr	r0, [pc, #20]	; (8005710 <Find_Day_of_week+0x2c>)
 80056fa:	f008 f971 	bl	800d9e0 <sprint>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	2000003c 	.word	0x2000003c
 800570c:	0800f6d4 	.word	0x0800f6d4
 8005710:	200007fc 	.word	0x200007fc

08005714 <Find_Month_of_Year>:

void Find_Month_of_Year(int month){
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

	sprint(lock_screen_month, "%s", MONTHS[month - 1]);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	4a05      	ldr	r2, [pc, #20]	; (8005738 <Find_Month_of_Year+0x24>)
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	461a      	mov	r2, r3
 8005728:	4904      	ldr	r1, [pc, #16]	; (800573c <Find_Month_of_Year+0x28>)
 800572a:	4805      	ldr	r0, [pc, #20]	; (8005740 <Find_Month_of_Year+0x2c>)
 800572c:	f008 f958 	bl	800d9e0 <sprint>
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000058 	.word	0x20000058
 800573c:	0800f6d4 	.word	0x0800f6d4
 8005740:	20000a54 	.word	0x20000a54

08005744 <Select_Startup_Message_Screen>:
#include "primary_ui_pages.h"
#include "print.h"

//extern CAN_HandleTypeDef hcan;

void Select_Startup_Message_Screen(void) {
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0

	switch (tier2_cmd_can) {
 8005748:	4b07      	ldr	r3, [pc, #28]	; (8005768 <Select_Startup_Message_Screen+0x24>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d002      	beq.n	8005756 <Select_Startup_Message_Screen+0x12>
 8005750:	2b02      	cmp	r3, #2
 8005752:	d003      	beq.n	800575c <Select_Startup_Message_Screen+0x18>

		case (BIRTHDAY_WISH):
			Wish_Happy_Birthday();
			break;
	}
}
 8005754:	e005      	b.n	8005762 <Select_Startup_Message_Screen+0x1e>
			Wish_Happy_New_Year();
 8005756:	f005 fbc1 	bl	800aedc <Wish_Happy_New_Year>
			break;
 800575a:	e002      	b.n	8005762 <Select_Startup_Message_Screen+0x1e>
			Wish_Happy_Birthday();
 800575c:	f005 fb32 	bl	800adc4 <Wish_Happy_Birthday>
			break;
 8005760:	bf00      	nop
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000539 	.word	0x20000539

0800576c <Select_DC_Charging_Page>:

void Select_DC_Charging_Page(void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0

	switch (tier2_cmd_can) {
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <Select_DC_Charging_Page+0x7c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b0a      	cmp	r3, #10
 8005776:	d834      	bhi.n	80057e2 <Select_DC_Charging_Page+0x76>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <Select_DC_Charging_Page+0x14>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057ad 	.word	0x080057ad
 8005784:	080057b3 	.word	0x080057b3
 8005788:	080057b9 	.word	0x080057b9
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057e3 	.word	0x080057e3
 8005794:	080057e3 	.word	0x080057e3
 8005798:	080057c5 	.word	0x080057c5
 800579c:	080057cb 	.word	0x080057cb
 80057a0:	080057d1 	.word	0x080057d1
 80057a4:	080057d7 	.word	0x080057d7
 80057a8:	080057dd 	.word	0x080057dd

		case (PRESS_BUTTON_TO_INITIATE_CHARGING):
			Press_Button_To_Initiate_Charging();
 80057ac:	f004 fa28 	bl	8009c00 <Press_Button_To_Initiate_Charging>
			break;
 80057b0:	e017      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (VERIFICATION_PROCESS):
			Verification_Process();
 80057b2:	f004 fabb 	bl	8009d2c <Verification_Process>
			break;
 80057b6:	e014      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (CHARGING_INITIATED):
			Charging_Initiated();
 80057b8:	f004 fb78 	bl	8009eac <Charging_Initiated>
			break;
 80057bc:	e011      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (VERIFICATION_FAILED):
			Verification_Failed();
 80057be:	f004 fb35 	bl	8009e2c <Verification_Failed>
			break;
 80057c2:	e00e      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (CHARGER_OUT_OF_SERVICE):
			Charger_Out_Of_Service();
 80057c4:	f004 f9dc 	bl	8009b80 <Charger_Out_Of_Service>
			break;
 80057c8:	e00b      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (INSUFFICIENT_BALANCE_FOR_CHARGING):
			Insufficient_Balance_For_Charging();
 80057ca:	f004 fa73 	bl	8009cb4 <Insufficient_Balance_For_Charging>
			break;
 80057ce:	e008      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (CLICK_TO_DISCONNECT_CHARGER):
			Click_To_Disconnect_Charger();
 80057d0:	f004 f97e 	bl	8009ad0 <Click_To_Disconnect_Charger>
			break;
 80057d4:	e005      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (WAIT_FOR_VERIFICATION):
			Wait_For_Verification();
 80057d6:	f004 f93b 	bl	8009a50 <Wait_For_Verification>
			break;
 80057da:	e002      	b.n	80057e2 <Select_DC_Charging_Page+0x76>

		case (RETRY_VERIFICATION):
			Retry_Verification();
 80057dc:	f004 fae6 	bl	8009dac <Retry_Verification>
			break;
 80057e0:	bf00      	nop
	}
}
 80057e2:	bf00      	nop
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000539 	.word	0x20000539

080057ec <Select_Firmware_Update_Page>:

void Select_Firmware_Update_Page(void) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0

	switch (tier2_cmd_can) {
 80057f0:	4b22      	ldr	r3, [pc, #136]	; (800587c <Select_Firmware_Update_Page+0x90>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	2b0b      	cmp	r3, #11
 80057f8:	d83e      	bhi.n	8005878 <Select_Firmware_Update_Page+0x8c>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <Select_Firmware_Update_Page+0x14>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005831 	.word	0x08005831
 8005804:	08005837 	.word	0x08005837
 8005808:	0800583d 	.word	0x0800583d
 800580c:	08005843 	.word	0x08005843
 8005810:	08005849 	.word	0x08005849
 8005814:	0800584f 	.word	0x0800584f
 8005818:	08005855 	.word	0x08005855
 800581c:	0800585b 	.word	0x0800585b
 8005820:	08005861 	.word	0x08005861
 8005824:	08005867 	.word	0x08005867
 8005828:	0800586d 	.word	0x0800586d
 800582c:	08005873 	.word	0x08005873

		case (PRECHECK_SOC):
			Precheck_SoC();
 8005830:	f004 fb68 	bl	8009f04 <Precheck_SoC>
			break;
 8005834:	e020      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (INSUFFICIENT_SOC_FOR_OTA):
			Insufficient_SoC_For_OTA();
 8005836:	f004 fec3 	bl	800a5c0 <Insufficient_SoC_For_OTA>
			break;
 800583a:	e01d      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (PRECHECK_NETWORK_STRENGTH):
			Precheck_Network_Strength();
 800583c:	f004 fbba 	bl	8009fb4 <Precheck_Network_Strength>
			break;
 8005840:	e01a      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (NETWORK_CONNECTION_ERROR):
			Network_Connection_Error();
 8005842:	f004 fe35 	bl	800a4b0 <Network_Connection_Error>
			break;
 8005846:	e017      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (PRECHECK_FIRMWARE_VERSION):
			Precheck_Firmware_Version();
 8005848:	f004 fbf4 	bl	800a034 <Precheck_Firmware_Version>
			break;
 800584c:	e014      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (FIRMWARE_VERSION_UPTO_DATE):
			Firmware_Version_Upto_Date();
 800584e:	f004 fe73 	bl	800a538 <Firmware_Version_Upto_Date>
			break;
 8005852:	e011      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (PRECHECK_BALANCE):
			Precheck_Balance();
 8005854:	f004 fc2e 	bl	800a0b4 <Precheck_Balance>
			break;
 8005858:	e00e      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (INSUFFICIENT_BALANCE_FOR_OTA):
			Insufficient_Balance_For_OTA();
 800585a:	f004 fefb 	bl	800a654 <Insufficient_Balance_For_OTA>
			break;
 800585e:	e00b      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (DOWNLOADING_FIRMWARE):
			Downloading_Firmware();
 8005860:	f004 fc68 	bl	800a134 <Downloading_Firmware>
			break;
 8005864:	e008      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (INSTALLING_FIRMWARE):
			Installing_Firmware();
 8005866:	f004 fd2b 	bl	800a2c0 <Installing_Firmware>
			break;
 800586a:	e005      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (FIRMWARE_INSTALLATION_SUCCESSFUL):
			Firmware_Installation_Successful();
 800586c:	f004 fd74 	bl	800a358 <Firmware_Installation_Successful>
			break;
 8005870:	e002      	b.n	8005878 <Select_Firmware_Update_Page+0x8c>

		case (FIRMWARE_INSTALLATION_FAILED):
			Firmware_Installation_Failed();
 8005872:	f004 fdc7 	bl	800a404 <Firmware_Installation_Failed>
			break;
 8005876:	bf00      	nop
	}
}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000539 	.word	0x20000539

08005880 <Select_BLE_Connection_Page>:

void Select_BLE_Connection_Page(void) {
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0

	switch (tier2_cmd_can) {
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <Select_BLE_Connection_Page+0x48>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b03      	cmp	r3, #3
 800588a:	d010      	beq.n	80058ae <Select_BLE_Connection_Page+0x2e>
 800588c:	2b03      	cmp	r3, #3
 800588e:	dc18      	bgt.n	80058c2 <Select_BLE_Connection_Page+0x42>
 8005890:	2b01      	cmp	r3, #1
 8005892:	d002      	beq.n	800589a <Select_BLE_Connection_Page+0x1a>
 8005894:	2b02      	cmp	r3, #2
 8005896:	d003      	beq.n	80058a0 <Select_BLE_Connection_Page+0x20>
			if (key_status == key_sw_ON){
				Pairing_Failed();
			}
			break;
	}
}
 8005898:	e013      	b.n	80058c2 <Select_BLE_Connection_Page+0x42>
			Show_Passkey();
 800589a:	f004 f80d 	bl	80098b8 <Show_Passkey>
			break;
 800589e:	e010      	b.n	80058c2 <Select_BLE_Connection_Page+0x42>
			if (pairing_successful_flag == 1) {
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <Select_BLE_Connection_Page+0x4c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d109      	bne.n	80058bc <Select_BLE_Connection_Page+0x3c>
				Pairing_Successful();
 80058a8:	f004 f85a 	bl	8009960 <Pairing_Successful>
			break;
 80058ac:	e006      	b.n	80058bc <Select_BLE_Connection_Page+0x3c>
			if (key_status == key_sw_ON){
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <Select_BLE_Connection_Page+0x50>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d104      	bne.n	80058c0 <Select_BLE_Connection_Page+0x40>
				Pairing_Failed();
 80058b6:	f004 f88f 	bl	80099d8 <Pairing_Failed>
			break;
 80058ba:	e001      	b.n	80058c0 <Select_BLE_Connection_Page+0x40>
			break;
 80058bc:	bf00      	nop
 80058be:	e000      	b.n	80058c2 <Select_BLE_Connection_Page+0x42>
			break;
 80058c0:	bf00      	nop
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000539 	.word	0x20000539
 80058cc:	20000528 	.word	0x20000528
 80058d0:	20000738 	.word	0x20000738

080058d4 <Launch_UI>:

void Launch_UI(void) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
			printf("TIER1 CMD CAN :: SYSTEM_RESET\n");
			break;
	}
#endif

	initialize_graphics_controller();
 80058d8:	f009 fc8e 	bl	800f1f8 <initialize_graphics_controller>

	switch (tier1_cmd_can) {
 80058dc:	4b28      	ldr	r3, [pc, #160]	; (8005980 <Launch_UI+0xac>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	2b0b      	cmp	r3, #11
 80058e4:	d843      	bhi.n	800596e <Launch_UI+0x9a>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <Launch_UI+0x18>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	0800592b 	.word	0x0800592b
 80058f4:	08005931 	.word	0x08005931
 80058f8:	0800593f 	.word	0x0800593f
 80058fc:	08005945 	.word	0x08005945
 8005900:	0800594b 	.word	0x0800594b
 8005904:	08005951 	.word	0x08005951
 8005908:	08005957 	.word	0x08005957
 800590c:	0800596f 	.word	0x0800596f
 8005910:	0800595d 	.word	0x0800595d
 8005914:	08005963 	.word	0x08005963
 8005918:	08005969 	.word	0x08005969

		case (STARTUP_SPLASHSCREEN):
			if (starting_splashscreen_flag == 1) {
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <Launch_UI+0xb0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d127      	bne.n	8005974 <Launch_UI+0xa0>
				Starting_Splashscreen();
 8005924:	f004 fedc 	bl	800a6e0 <Starting_Splashscreen>
			}
			break;
 8005928:	e024      	b.n	8005974 <Launch_UI+0xa0>

		case (STARTUP_MESSAGE_SCREEN):
			Select_Startup_Message_Screen();
 800592a:	f7ff ff0b 	bl	8005744 <Select_Startup_Message_Screen>
			break;
 800592e:	e024      	b.n	800597a <Launch_UI+0xa6>

		case (ENDING_SPLASHSCREEN):
			if (ending_splashscreen_flag == 1) {
 8005930:	4b15      	ldr	r3, [pc, #84]	; (8005988 <Launch_UI+0xb4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d11f      	bne.n	8005978 <Launch_UI+0xa4>
				Ending_Splashscreen();
 8005938:	f004 ffd2 	bl	800a8e0 <Ending_Splashscreen>
			}
			break;
 800593c:	e01c      	b.n	8005978 <Launch_UI+0xa4>

		case (STATS):
			Stats_UI();
 800593e:	f005 f8ed 	bl	800ab1c <Stats_UI>
			break;
 8005942:	e01a      	b.n	800597a <Launch_UI+0xa6>

		case (DRIVE_MODE):
			Discharging_UI();
 8005944:	f005 f8a6 	bl	800aa94 <Discharging_UI>
			break;
 8005948:	e017      	b.n	800597a <Launch_UI+0xa6>

		case (AC_CHARGING):
			Charging_Initiated();
 800594a:	f004 faaf 	bl	8009eac <Charging_Initiated>
			break;
 800594e:	e014      	b.n	800597a <Launch_UI+0xa6>

		case (DC_CHARGING):
			Select_DC_Charging_Page();
 8005950:	f7ff ff0c 	bl	800576c <Select_DC_Charging_Page>
			break;
 8005954:	e011      	b.n	800597a <Launch_UI+0xa6>

		case (OTA_UI):
			Select_Firmware_Update_Page();
 8005956:	f7ff ff49 	bl	80057ec <Select_Firmware_Update_Page>
			break;
 800595a:	e00e      	b.n	800597a <Launch_UI+0xa6>

//		case (OBD_UI):
//			break;

		case (BLE_UI):
			Select_BLE_Connection_Page();
 800595c:	f7ff ff90 	bl	8005880 <Select_BLE_Connection_Page>
			break;
 8005960:	e00b      	b.n	800597a <Launch_UI+0xa6>

		case (POWER_DOWN):
			display_power_down();
 8005962:	f009 fc77 	bl	800f254 <display_power_down>
			break;
 8005966:	e008      	b.n	800597a <Launch_UI+0xa6>

		case (SYSTEM_RESET):
			HAL_NVIC_SystemReset();
 8005968:	f001 fe69 	bl	800763e <HAL_NVIC_SystemReset>
			break;
 800596c:	e005      	b.n	800597a <Launch_UI+0xa6>

		default:
			display_power_down();
 800596e:	f009 fc71 	bl	800f254 <display_power_down>
//			Stats_UI();
			break;
 8005972:	e002      	b.n	800597a <Launch_UI+0xa6>
			break;
 8005974:	bf00      	nop
 8005976:	e000      	b.n	800597a <Launch_UI+0xa6>
			break;
 8005978:	bf00      	nop
	}
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200009c8 	.word	0x200009c8
 8005984:	20000740 	.word	0x20000740
 8005988:	20000534 	.word	0x20000534

0800598c <Display_Backlight_Power_Recycle>:

void Display_Backlight_Power_Recycle(void) {
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0

	display_power_down();
 8005990:	f009 fc60 	bl	800f254 <display_power_down>
	HAL_Delay(10);
 8005994:	200a      	movs	r0, #10
 8005996:	f000 fe65 	bl	8006664 <HAL_Delay>
	display_power_up();
 800599a:	f009 fc71 	bl	800f280 <display_power_up>
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059aa:	f000 fdf9 	bl	80065a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059ae:	f000 f8a3 	bl	8005af8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059b2:	f000 fa4b 	bl	8005e4c <MX_GPIO_Init>
  MX_SPI1_Init();
 80059b6:	f000 f94b 	bl	8005c50 <MX_SPI1_Init>
  MX_CAN_Init();
 80059ba:	f000 f8e5 	bl	8005b88 <MX_CAN_Init>
  MX_TIM4_Init();
 80059be:	f000 f9cd 	bl	8005d5c <MX_TIM4_Init>
  MX_IWDG_Init();
 80059c2:	f000 f92b 	bl	8005c1c <MX_IWDG_Init>
  MX_CRC_Init();
 80059c6:	f000 f915 	bl	8005bf4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80059ca:	f000 fa15 	bl	8005df8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80059ce:	f000 f975 	bl	8005cbc <MX_TIM1_Init>
//	Start_Can_Communication();
//	HAL_TIM_Base_Start_IT(&htim4);

#if 1

	phost			= &host;
 80059d2:	4b39      	ldr	r3, [pc, #228]	; (8005ab8 <main+0x114>)
 80059d4:	4a39      	ldr	r2, [pc, #228]	; (8005abc <main+0x118>)
 80059d6:	601a      	str	r2, [r3, #0]
	series			= 0;			//	Project Series
 80059d8:	4b39      	ldr	r3, [pc, #228]	; (8005ac0 <main+0x11c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
	UI_lastState	= 0;
 80059de:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <main+0x120>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
	dot_count		= 1;
 80059e4:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <main+0x124>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
	OTA_est_time	= 255;
 80059ea:	4b38      	ldr	r3, [pc, #224]	; (8005acc <main+0x128>)
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	601a      	str	r2, [r3, #0]

	// Initialize CAN and its timer
	Start_Can_Communication();
 80059f0:	f7fe fee2 	bl	80047b8 <Start_Can_Communication>
	HAL_TIM_Base_Start_IT(&htim4);
 80059f4:	4836      	ldr	r0, [pc, #216]	; (8005ad0 <main+0x12c>)
 80059f6:	f003 fad9 	bl	8008fac <HAL_TIM_Base_Start_IT>

	// Send CAN message once display resets
	transmit_can_message(&hcan, RESET_REQUEST, reset_request_msg, sizeof(reset_request_msg));
 80059fa:	2308      	movs	r3, #8
 80059fc:	4a35      	ldr	r2, [pc, #212]	; (8005ad4 <main+0x130>)
 80059fe:	4936      	ldr	r1, [pc, #216]	; (8005ad8 <main+0x134>)
 8005a00:	4836      	ldr	r0, [pc, #216]	; (8005adc <main+0x138>)
 8005a02:	f7fe fba3 	bl	800414c <transmit_can_message>

	// Initialize Display Driver
	Display_Backlight_Power_Recycle();
 8005a06:	f7ff ffc1 	bl	800598c <Display_Backlight_Power_Recycle>
//	initialize_graphics_controller();
//	App_Common_Init(&host);

	r_value = 0;
 8005a0a:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <main+0x13c>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
	g_value = 250;
 8005a10:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <main+0x140>)
 8005a12:	22fa      	movs	r2, #250	; 0xfa
 8005a14:	601a      	str	r2, [r3, #0]
	b_value = 200;
 8005a16:	4b34      	ldr	r3, [pc, #208]	; (8005ae8 <main+0x144>)
 8005a18:	22c8      	movs	r2, #200	; 0xc8
 8005a1a:	601a      	str	r2, [r3, #0]

	uint8_t incFlag		= 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	71fb      	strb	r3, [r7, #7]
	brightness_level	= 128;
 8005a20:	4b32      	ldr	r3, [pc, #200]	; (8005aec <main+0x148>)
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim1);
 8005a26:	4832      	ldr	r0, [pc, #200]	; (8005af0 <main+0x14c>)
 8005a28:	f003 fac0 	bl	8008fac <HAL_TIM_Base_Start_IT>
//		left_sidelight_status = 1;
//		network_strength_value = 3;
#endif

#if 1
		if (incFlag == 0) {
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11c      	bne.n	8005a6c <main+0xc8>

			r_value += 5;
 8005a32:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <main+0x13c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3305      	adds	r3, #5
 8005a38:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <main+0x13c>)
 8005a3a:	6013      	str	r3, [r2, #0]
			g_value -= 5;
 8005a3c:	4b29      	ldr	r3, [pc, #164]	; (8005ae4 <main+0x140>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3b05      	subs	r3, #5
 8005a42:	4a28      	ldr	r2, [pc, #160]	; (8005ae4 <main+0x140>)
 8005a44:	6013      	str	r3, [r2, #0]
			b_value += 1;
 8005a46:	4b28      	ldr	r3, [pc, #160]	; (8005ae8 <main+0x144>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <main+0x144>)
 8005a4e:	6013      	str	r3, [r2, #0]
			if ((r_value >= 250 || g_value <= 0) && b_value >= 250) {
 8005a50:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <main+0x13c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2bf9      	cmp	r3, #249	; 0xf9
 8005a56:	dc03      	bgt.n	8005a60 <main+0xbc>
 8005a58:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <main+0x140>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dc05      	bgt.n	8005a6c <main+0xc8>
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <main+0x144>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2bf9      	cmp	r3, #249	; 0xf9
 8005a66:	dd01      	ble.n	8005a6c <main+0xc8>
				incFlag = 1;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	71fb      	strb	r3, [r7, #7]
			}
		}

		if (incFlag == 1) {
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d11c      	bne.n	8005aac <main+0x108>

			r_value -= 5;
 8005a72:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <main+0x13c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3b05      	subs	r3, #5
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <main+0x13c>)
 8005a7a:	6013      	str	r3, [r2, #0]
			g_value += 5;
 8005a7c:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <main+0x140>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3305      	adds	r3, #5
 8005a82:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <main+0x140>)
 8005a84:	6013      	str	r3, [r2, #0]
			b_value -= 1;
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <main+0x144>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <main+0x144>)
 8005a8e:	6013      	str	r3, [r2, #0]
			if ((r_value <= 0 || g_value >= 250) && b_value <= 200) {
 8005a90:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <main+0x13c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dd03      	ble.n	8005aa0 <main+0xfc>
 8005a98:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <main+0x140>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2bf9      	cmp	r3, #249	; 0xf9
 8005a9e:	dd05      	ble.n	8005aac <main+0x108>
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <main+0x144>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2bc8      	cmp	r3, #200	; 0xc8
 8005aa6:	dc01      	bgt.n	8005aac <main+0x108>
				incFlag = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	71fb      	strb	r3, [r7, #7]

//		if (Gpu_Hal_Rd16(phost, REG_CMD_READ) == 0xfff){
//			print("--------------------------- COPROCESSOR ERROR ----------------------------\n");
//		}

		Launch_UI();
 8005aac:	f7ff ff12 	bl	80058d4 <Launch_UI>
#endif

		HAL_IWDG_Refresh(&hiwdg);		// 3 seconds WatchDog
 8005ab0:	4810      	ldr	r0, [pc, #64]	; (8005af4 <main+0x150>)
 8005ab2:	f002 f9f9 	bl	8007ea8 <HAL_IWDG_Refresh>
		if (incFlag == 0) {
 8005ab6:	e7b9      	b.n	8005a2c <main+0x88>
 8005ab8:	20000bc8 	.word	0x20000bc8
 8005abc:	20000ae0 	.word	0x20000ae0
 8005ac0:	200003b4 	.word	0x200003b4
 8005ac4:	200009a0 	.word	0x200009a0
 8005ac8:	200005aa 	.word	0x200005aa
 8005acc:	20000814 	.word	0x20000814
 8005ad0:	20000a98 	.word	0x20000a98
 8005ad4:	200000b8 	.word	0x200000b8
 8005ad8:	1001fafc 	.word	0x1001fafc
 8005adc:	20000b14 	.word	0x20000b14
 8005ae0:	20000494 	.word	0x20000494
 8005ae4:	200007f4 	.word	0x200007f4
 8005ae8:	2000081c 	.word	0x2000081c
 8005aec:	20000000 	.word	0x20000000
 8005af0:	20000b80 	.word	0x20000b80
 8005af4:	20000b00 	.word	0x20000b00

08005af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b090      	sub	sp, #64	; 0x40
 8005afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005afe:	f107 0318 	add.w	r3, r7, #24
 8005b02:	2228      	movs	r2, #40	; 0x28
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f009 fdb2 	bl	800f670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005b1a:	2309      	movs	r3, #9
 8005b1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005b24:	2300      	movs	r3, #0
 8005b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b30:	2302      	movs	r3, #2
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8005b3a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b40:	f107 0318 	add.w	r3, r7, #24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 f9bf 	bl	8007ec8 <HAL_RCC_OscConfig>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8005b50:	f000 f9e8 	bl	8005f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b54:	230f      	movs	r3, #15
 8005b56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 fc2a 	bl	80083c8 <HAL_RCC_ClockConfig>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005b7a:	f000 f9d3 	bl	8005f24 <Error_Handler>
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3740      	adds	r7, #64	; 0x40
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005b8c:	4b17      	ldr	r3, [pc, #92]	; (8005bec <MX_CAN_Init+0x64>)
 8005b8e:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <MX_CAN_Init+0x68>)
 8005b90:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8005b92:	4b16      	ldr	r3, [pc, #88]	; (8005bec <MX_CAN_Init+0x64>)
 8005b94:	2208      	movs	r2, #8
 8005b96:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005b98:	4b14      	ldr	r3, [pc, #80]	; (8005bec <MX_CAN_Init+0x64>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <MX_CAN_Init+0x64>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8005ba4:	4b11      	ldr	r3, [pc, #68]	; (8005bec <MX_CAN_Init+0x64>)
 8005ba6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8005baa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005bac:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <MX_CAN_Init+0x64>)
 8005bae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bb2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005bb4:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <MX_CAN_Init+0x64>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8005bba:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <MX_CAN_Init+0x64>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <MX_CAN_Init+0x64>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8005bc6:	4b09      	ldr	r3, [pc, #36]	; (8005bec <MX_CAN_Init+0x64>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005bcc:	4b07      	ldr	r3, [pc, #28]	; (8005bec <MX_CAN_Init+0x64>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <MX_CAN_Init+0x64>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005bd8:	4804      	ldr	r0, [pc, #16]	; (8005bec <MX_CAN_Init+0x64>)
 8005bda:	f000 fd67 	bl	80066ac <HAL_CAN_Init>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8005be4:	f000 f99e 	bl	8005f24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8005be8:	bf00      	nop
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000b14 	.word	0x20000b14
 8005bf0:	40006400 	.word	0x40006400

08005bf4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <MX_CRC_Init+0x20>)
 8005bfa:	4a07      	ldr	r2, [pc, #28]	; (8005c18 <MX_CRC_Init+0x24>)
 8005bfc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005bfe:	4805      	ldr	r0, [pc, #20]	; (8005c14 <MX_CRC_Init+0x20>)
 8005c00:	f001 fd2d 	bl	800765e <HAL_CRC_Init>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005c0a:	f000 f98b 	bl	8005f24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000b0c 	.word	0x20000b0c
 8005c18:	40023000 	.word	0x40023000

08005c1c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <MX_IWDG_Init+0x2c>)
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <MX_IWDG_Init+0x30>)
 8005c24:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8005c26:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <MX_IWDG_Init+0x2c>)
 8005c28:	2205      	movs	r2, #5
 8005c2a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <MX_IWDG_Init+0x2c>)
 8005c2e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005c32:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005c34:	4804      	ldr	r0, [pc, #16]	; (8005c48 <MX_IWDG_Init+0x2c>)
 8005c36:	f002 f8f5 	bl	8007e24 <HAL_IWDG_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8005c40:	f000 f970 	bl	8005f24 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000b00 	.word	0x20000b00
 8005c4c:	40003000 	.word	0x40003000

08005c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <MX_SPI1_Init+0x68>)
 8005c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c68:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005c74:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c84:	2210      	movs	r2, #16
 8005c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005c9c:	220a      	movs	r2, #10
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005ca0:	4804      	ldr	r0, [pc, #16]	; (8005cb4 <MX_SPI1_Init+0x64>)
 8005ca2:	f002 fd2b 	bl	80086fc <HAL_SPI_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005cac:	f000 f93a 	bl	8005f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000bcc 	.word	0x20000bcc
 8005cb8:	40013000 	.word	0x40013000

08005cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
 8005cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005cd8:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005cda:	4a1f      	ldr	r2, [pc, #124]	; (8005d58 <MX_TIM1_Init+0x9c>)
 8005cdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8005cde:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005ce0:	223f      	movs	r2, #63	; 0x3f
 8005ce2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005cea:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cf0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cf2:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005cf8:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005d04:	4813      	ldr	r0, [pc, #76]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005d06:	f003 f901 	bl	8008f0c <HAL_TIM_Base_Init>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005d10:	f000 f908 	bl	8005f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005d1a:	f107 0308 	add.w	r3, r7, #8
 8005d1e:	4619      	mov	r1, r3
 8005d20:	480c      	ldr	r0, [pc, #48]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005d22:	f003 fa9d 	bl	8009260 <HAL_TIM_ConfigClockSource>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005d2c:	f000 f8fa 	bl	8005f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d30:	2300      	movs	r3, #0
 8005d32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d38:	463b      	mov	r3, r7
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4805      	ldr	r0, [pc, #20]	; (8005d54 <MX_TIM1_Init+0x98>)
 8005d3e:	f003 fc6f 	bl	8009620 <HAL_TIMEx_MasterConfigSynchronization>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005d48:	f000 f8ec 	bl	8005f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005d4c:	bf00      	nop
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000b80 	.word	0x20000b80
 8005d58:	40012c00 	.word	0x40012c00

08005d5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	609a      	str	r2, [r3, #8]
 8005d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d70:	463b      	mov	r3, r7
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005d7a:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <MX_TIM4_Init+0x98>)
 8005d7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64 - 1;
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005d80:	223f      	movs	r2, #63	; 0x3f
 8005d82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8005d8a:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d98:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005d9e:	4814      	ldr	r0, [pc, #80]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005da0:	f003 f8b4 	bl	8008f0c <HAL_TIM_Base_Init>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005daa:	f000 f8bb 	bl	8005f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	4619      	mov	r1, r3
 8005dba:	480d      	ldr	r0, [pc, #52]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005dbc:	f003 fa50 	bl	8009260 <HAL_TIM_ConfigClockSource>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005dc6:	f000 f8ad 	bl	8005f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4806      	ldr	r0, [pc, #24]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005dd8:	f003 fc22 	bl	8009620 <HAL_TIMEx_MasterConfigSynchronization>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005de2:	f000 f89f 	bl	8005f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005de6:	bf00      	nop
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000a98 	.word	0x20000a98
 8005df4:	40000800 	.word	0x40000800

08005df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005dfc:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005dfe:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e02:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e1e:	220c      	movs	r2, #12
 8005e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e22:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e2e:	4805      	ldr	r0, [pc, #20]	; (8005e44 <MX_USART1_UART_Init+0x4c>)
 8005e30:	f003 fc66 	bl	8009700 <HAL_UART_Init>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005e3a:	f000 f873 	bl	8005f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e3e:	bf00      	nop
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000b3c 	.word	0x20000b3c
 8005e48:	40013800 	.word	0x40013800

08005e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e52:	f107 0310 	add.w	r3, r7, #16
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
 8005e5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e60:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e66:	f043 0310 	orr.w	r3, r3, #16
 8005e6a:	6193      	str	r3, [r2, #24]
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e78:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	4a26      	ldr	r2, [pc, #152]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e7e:	f043 0320 	orr.w	r3, r3, #32
 8005e82:	6193      	str	r3, [r2, #24]
 8005e84:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e96:	f043 0304 	orr.w	r3, r3, #4
 8005e9a:	6193      	str	r3, [r2, #24]
 8005e9c:	4b1e      	ldr	r3, [pc, #120]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005eae:	f043 0308 	orr.w	r3, r3, #8
 8005eb2:	6193      	str	r3, [r2, #24]
 8005eb4:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <MX_GPIO_Init+0xcc>)
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ec6:	4815      	ldr	r0, [pc, #84]	; (8005f1c <MX_GPIO_Init+0xd0>)
 8005ec8:	f001 ff94 	bl	8007df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD_Pin|CS_Pin, GPIO_PIN_RESET);
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2114      	movs	r1, #20
 8005ed0:	4813      	ldr	r0, [pc, #76]	; (8005f20 <MX_GPIO_Init+0xd4>)
 8005ed2:	f001 ff8f 	bl	8007df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005ee8:	f107 0310 	add.w	r3, r7, #16
 8005eec:	4619      	mov	r1, r3
 8005eee:	480b      	ldr	r0, [pc, #44]	; (8005f1c <MX_GPIO_Init+0xd0>)
 8005ef0:	f001 fdfc 	bl	8007aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_Pin CS_Pin */
  GPIO_InitStruct.Pin = PD_Pin|CS_Pin;
 8005ef4:	2314      	movs	r3, #20
 8005ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f00:	2302      	movs	r3, #2
 8005f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f04:	f107 0310 	add.w	r3, r7, #16
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4805      	ldr	r0, [pc, #20]	; (8005f20 <MX_GPIO_Init+0xd4>)
 8005f0c:	f001 fdee 	bl	8007aec <HAL_GPIO_Init>

}
 8005f10:	bf00      	nop
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40011000 	.word	0x40011000
 8005f20:	40010800 	.word	0x40010800

08005f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005f28:	b672      	cpsid	i
}
 8005f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005f2c:	e7fe      	b.n	8005f2c <Error_Handler+0x8>
	...

08005f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	db0b      	blt.n	8005f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	f003 021f 	and.w	r2, r3, #31
 8005f48:	4906      	ldr	r1, [pc, #24]	; (8005f64 <__NVIC_EnableIRQ+0x34>)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	2001      	movs	r0, #1
 8005f52:	fa00 f202 	lsl.w	r2, r0, r2
 8005f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr
 8005f64:	e000e100 	.word	0xe000e100

08005f68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	db12      	blt.n	8005fa0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	f003 021f 	and.w	r2, r3, #31
 8005f80:	490a      	ldr	r1, [pc, #40]	; (8005fac <__NVIC_DisableIRQ+0x44>)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2001      	movs	r0, #1
 8005f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f8e:	3320      	adds	r3, #32
 8005f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f94:	f3bf 8f4f 	dsb	sy
}
 8005f98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f9a:	f3bf 8f6f 	isb	sy
}
 8005f9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	e000e100 	.word	0xe000e100

08005fb0 <rxCallback>:
		//{.id= PASSKEY,.bytes=(uint8_t*)(&BLE_passkey),.size = sizeof(Dash_PassKey_Handler),.track=SYNC_LAYER_CAN_START_REQ},
//		{.id= NEW_YEAR,.bytes=(uint8_t*)(&new_year_date),.size = sizeof(Dash_NewYear_Handler),.track=SYNC_LAYER_CAN_START_REQ},
		{.id= RELEASE_NOTES,.bytes=(uint8_t*)(&ui_release_notes),.size = sizeof(Dash_release_notes_Handler),.track=SYNC_LAYER_CAN_START_REQ}
};

static void rxCallback(uint32_t id, uint8_t *bytes, uint16_t size, uint8_t status) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	80fb      	strh	r3, [r7, #6]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	717b      	strb	r3, [r7, #5]
	if (!status)
 8005fc6:	797b      	ldrb	r3, [r7, #5]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <rxCallback+0x24>
		return;
	Acquire_Data_From_CAN(id);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7fe fc19 	bl	8004804 <Acquire_Data_From_CAN>
 8005fd2:	e000      	b.n	8005fd6 <rxCallback+0x26>
		return;
 8005fd4:	bf00      	nop
}
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <pn_can_sync_layer_thread>:

extern int rxSendThread(SyncLayerCANLink *link, SyncLayerCANData *data);
void pn_can_sync_layer_thread() {
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005fe2:	2014      	movs	r0, #20
 8005fe4:	f7ff ffc0 	bl	8005f68 <__NVIC_DisableIRQ>
	for (int i = 0; i < SYNC_SIZE; i++) {
 8005fe8:	2300      	movs	r3, #0
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	e072      	b.n	80060d4 <pn_can_sync_layer_thread+0xf8>
		rxSendThread(&display_vcu_link, &syncData[i]);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	4a3b      	ldr	r2, [pc, #236]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 8005ffa:	4413      	add	r3, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	483b      	ldr	r0, [pc, #236]	; (80060ec <pn_can_sync_layer_thread+0x110>)
 8006000:	f007 f9de 	bl	800d3c0 <rxSendThread>
		if (syncData[i].track == SYNC_LAYER_CAN_RECEIVE_SUCCESS) {
 8006004:	4938      	ldr	r1, [pc, #224]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	4413      	add	r3, r2
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	440b      	add	r3, r1
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b08      	cmp	r3, #8
 8006018:	d127      	bne.n	800606a <pn_can_sync_layer_thread+0x8e>
			rxCallback(syncData[i].id, syncData[i].bytes, syncData[i].size, 1);
 800601a:	4933      	ldr	r1, [pc, #204]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	440b      	add	r3, r1
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	492f      	ldr	r1, [pc, #188]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	440b      	add	r3, r1
 8006038:	3304      	adds	r3, #4
 800603a:	6819      	ldr	r1, [r3, #0]
 800603c:	4c2a      	ldr	r4, [pc, #168]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	4413      	add	r3, r2
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	4423      	add	r3, r4
 800604a:	3308      	adds	r3, #8
 800604c:	881a      	ldrh	r2, [r3, #0]
 800604e:	2301      	movs	r3, #1
 8006050:	f7ff ffae 	bl	8005fb0 <rxCallback>
			syncData[i].track = SYNC_LAYER_CAN_START_REQ;
 8006054:	4924      	ldr	r1, [pc, #144]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	4413      	add	r3, r2
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	440b      	add	r3, r1
 8006062:	3324      	adds	r3, #36	; 0x24
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e031      	b.n	80060ce <pn_can_sync_layer_thread+0xf2>
		} else if (syncData[i].track == SYNC_LAYER_CAN_RECEIVE_FAILED) {
 800606a:	491f      	ldr	r1, [pc, #124]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	4413      	add	r3, r2
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	440b      	add	r3, r1
 8006078:	3324      	adds	r3, #36	; 0x24
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b09      	cmp	r3, #9
 800607e:	d126      	bne.n	80060ce <pn_can_sync_layer_thread+0xf2>
			rxCallback(syncData[i].id, syncData[i].bytes, syncData[i].size, 0);
 8006080:	4919      	ldr	r1, [pc, #100]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	4413      	add	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	440b      	add	r3, r1
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	4915      	ldr	r1, [pc, #84]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4413      	add	r3, r2
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	440b      	add	r3, r1
 800609e:	3304      	adds	r3, #4
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	4c11      	ldr	r4, [pc, #68]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	4413      	add	r3, r2
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	4423      	add	r3, r4
 80060b0:	3308      	adds	r3, #8
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	f7ff ff7b 	bl	8005fb0 <rxCallback>
			syncData[i].track = SYNC_LAYER_CAN_START_REQ;
 80060ba:	490b      	ldr	r1, [pc, #44]	; (80060e8 <pn_can_sync_layer_thread+0x10c>)
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	4413      	add	r3, r2
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	440b      	add	r3, r1
 80060c8:	3324      	adds	r3, #36	; 0x24
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SYNC_SIZE; i++) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3301      	adds	r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	dd89      	ble.n	8005fee <pn_can_sync_layer_thread+0x12>
		}
	}
	NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80060da:	2014      	movs	r0, #20
 80060dc:	f7ff ff28 	bl	8005f30 <__NVIC_EnableIRQ>
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd90      	pop	{r4, r7, pc}
 80060e8:	200000d4 	.word	0x200000d4
 80060ec:	200000c0 	.word	0x200000c0

080060f0 <pn_can_sync_layer_recCAN>:

extern int rxReceiveThread(SyncLayerCANLink *link, SyncLayerCANData *data,uint32_t id, uint8_t *bytes, uint16_t len);
void pn_can_sync_layer_recCAN(uint32_t id, uint8_t*bytes ,uint8_t len) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
	uint32_t data_id = *(uint32_t*) bytes;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < SYNC_SIZE; i++) {
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	e027      	b.n	800615a <pn_can_sync_layer_recCAN+0x6a>
		if ((data_id == syncData[i].id) || (syncData[i].id == id)){
 800610a:	4918      	ldr	r1, [pc, #96]	; (800616c <pn_can_sync_layer_recCAN+0x7c>)
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4613      	mov	r3, r2
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4413      	add	r3, r2
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	440b      	add	r3, r1
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	429a      	cmp	r2, r3
 800611e:	d00a      	beq.n	8006136 <pn_can_sync_layer_recCAN+0x46>
 8006120:	4912      	ldr	r1, [pc, #72]	; (800616c <pn_can_sync_layer_recCAN+0x7c>)
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4613      	mov	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4413      	add	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	440b      	add	r3, r1
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	429a      	cmp	r2, r3
 8006134:	d10e      	bne.n	8006154 <pn_can_sync_layer_recCAN+0x64>
			rxReceiveThread(&display_vcu_link, &syncData[i], id, bytes, len);
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4613      	mov	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4413      	add	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <pn_can_sync_layer_recCAN+0x7c>)
 8006142:	1899      	adds	r1, r3, r2
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	b29b      	uxth	r3, r3
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4808      	ldr	r0, [pc, #32]	; (8006170 <pn_can_sync_layer_recCAN+0x80>)
 8006150:	f007 fa70 	bl	800d634 <rxReceiveThread>
	for (int i = 0; i < SYNC_SIZE; i++) {
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	3301      	adds	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b04      	cmp	r3, #4
 800615e:	ddd4      	ble.n	800610a <pn_can_sync_layer_recCAN+0x1a>
		}
	}
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	200000d4 	.word	0x200000d4
 8006170:	200000c0 	.word	0x200000c0

08006174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <HAL_MspInit+0x5c>)
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	4a14      	ldr	r2, [pc, #80]	; (80061d0 <HAL_MspInit+0x5c>)
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	6193      	str	r3, [r2, #24]
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <HAL_MspInit+0x5c>)
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006192:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <HAL_MspInit+0x5c>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <HAL_MspInit+0x5c>)
 8006198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619c:	61d3      	str	r3, [r2, #28]
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <HAL_MspInit+0x5c>)
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <HAL_MspInit+0x60>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <HAL_MspInit+0x60>)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr
 80061d0:	40021000 	.word	0x40021000
 80061d4:	40010000 	.word	0x40010000

080061d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061e0:	f107 0314 	add.w	r3, r7, #20
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	609a      	str	r2, [r3, #8]
 80061ec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a29      	ldr	r2, [pc, #164]	; (8006298 <HAL_CAN_MspInit+0xc0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d14b      	bne.n	8006290 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80061f8:	4b28      	ldr	r3, [pc, #160]	; (800629c <HAL_CAN_MspInit+0xc4>)
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <HAL_CAN_MspInit+0xc4>)
 80061fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006202:	61d3      	str	r3, [r2, #28]
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <HAL_CAN_MspInit+0xc4>)
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006210:	4b22      	ldr	r3, [pc, #136]	; (800629c <HAL_CAN_MspInit+0xc4>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_CAN_MspInit+0xc4>)
 8006216:	f043 0308 	orr.w	r3, r3, #8
 800621a:	6193      	str	r3, [r2, #24]
 800621c:	4b1f      	ldr	r3, [pc, #124]	; (800629c <HAL_CAN_MspInit+0xc4>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800622c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	4619      	mov	r1, r3
 800623c:	4818      	ldr	r0, [pc, #96]	; (80062a0 <HAL_CAN_MspInit+0xc8>)
 800623e:	f001 fc55 	bl	8007aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006248:	2302      	movs	r3, #2
 800624a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800624c:	2303      	movs	r3, #3
 800624e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006250:	f107 0314 	add.w	r3, r7, #20
 8006254:	4619      	mov	r1, r3
 8006256:	4812      	ldr	r0, [pc, #72]	; (80062a0 <HAL_CAN_MspInit+0xc8>)
 8006258:	f001 fc48 	bl	8007aec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <HAL_CAN_MspInit+0xcc>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
 800627a:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <HAL_CAN_MspInit+0xcc>)
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8006280:	2200      	movs	r2, #0
 8006282:	2101      	movs	r1, #1
 8006284:	2014      	movs	r0, #20
 8006286:	f001 f9b0 	bl	80075ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800628a:	2014      	movs	r0, #20
 800628c:	f001 f9c9 	bl	8007622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006290:	bf00      	nop
 8006292:	3728      	adds	r7, #40	; 0x28
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40006400 	.word	0x40006400
 800629c:	40021000 	.word	0x40021000
 80062a0:	40010c00 	.word	0x40010c00
 80062a4:	40010000 	.word	0x40010000

080062a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a09      	ldr	r2, [pc, #36]	; (80062dc <HAL_CRC_MspInit+0x34>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10b      	bne.n	80062d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <HAL_CRC_MspInit+0x38>)
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <HAL_CRC_MspInit+0x38>)
 80062c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c4:	6153      	str	r3, [r2, #20]
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_CRC_MspInit+0x38>)
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr
 80062dc:	40023000 	.word	0x40023000
 80062e0:	40021000 	.word	0x40021000

080062e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ec:	f107 0310 	add.w	r3, r7, #16
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1b      	ldr	r2, [pc, #108]	; (800636c <HAL_SPI_MspInit+0x88>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d12f      	bne.n	8006364 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <HAL_SPI_MspInit+0x8c>)
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_SPI_MspInit+0x8c>)
 800630a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800630e:	6193      	str	r3, [r2, #24]
 8006310:	4b17      	ldr	r3, [pc, #92]	; (8006370 <HAL_SPI_MspInit+0x8c>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800631c:	4b14      	ldr	r3, [pc, #80]	; (8006370 <HAL_SPI_MspInit+0x8c>)
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	4a13      	ldr	r2, [pc, #76]	; (8006370 <HAL_SPI_MspInit+0x8c>)
 8006322:	f043 0304 	orr.w	r3, r3, #4
 8006326:	6193      	str	r3, [r2, #24]
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <HAL_SPI_MspInit+0x8c>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006334:	23a0      	movs	r3, #160	; 0xa0
 8006336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006338:	2302      	movs	r3, #2
 800633a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800633c:	2303      	movs	r3, #3
 800633e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006340:	f107 0310 	add.w	r3, r7, #16
 8006344:	4619      	mov	r1, r3
 8006346:	480b      	ldr	r0, [pc, #44]	; (8006374 <HAL_SPI_MspInit+0x90>)
 8006348:	f001 fbd0 	bl	8007aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006358:	f107 0310 	add.w	r3, r7, #16
 800635c:	4619      	mov	r1, r3
 800635e:	4805      	ldr	r0, [pc, #20]	; (8006374 <HAL_SPI_MspInit+0x90>)
 8006360:	f001 fbc4 	bl	8007aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006364:	bf00      	nop
 8006366:	3720      	adds	r7, #32
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40013000 	.word	0x40013000
 8006370:	40021000 	.word	0x40021000
 8006374:	40010800 	.word	0x40010800

08006378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_TIM_Base_MspInit+0x78>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d114      	bne.n	80063b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800638a:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <HAL_TIM_Base_MspInit+0x7c>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <HAL_TIM_Base_MspInit+0x7c>)
 8006390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006394:	6193      	str	r3, [r2, #24]
 8006396:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <HAL_TIM_Base_MspInit+0x7c>)
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 80063a2:	2200      	movs	r2, #0
 80063a4:	2101      	movs	r1, #1
 80063a6:	2019      	movs	r0, #25
 80063a8:	f001 f91f 	bl	80075ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80063ac:	2019      	movs	r0, #25
 80063ae:	f001 f938 	bl	8007622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80063b2:	e018      	b.n	80063e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a0f      	ldr	r2, [pc, #60]	; (80063f8 <HAL_TIM_Base_MspInit+0x80>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d113      	bne.n	80063e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <HAL_TIM_Base_MspInit+0x7c>)
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	4a0c      	ldr	r2, [pc, #48]	; (80063f4 <HAL_TIM_Base_MspInit+0x7c>)
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	61d3      	str	r3, [r2, #28]
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <HAL_TIM_Base_MspInit+0x7c>)
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2102      	movs	r1, #2
 80063da:	201e      	movs	r0, #30
 80063dc:	f001 f905 	bl	80075ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80063e0:	201e      	movs	r0, #30
 80063e2:	f001 f91e 	bl	8007622 <HAL_NVIC_EnableIRQ>
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40012c00 	.word	0x40012c00
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40000800 	.word	0x40000800

080063fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006404:	f107 0310 	add.w	r3, r7, #16
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	609a      	str	r2, [r3, #8]
 8006410:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <HAL_UART_MspInit+0x8c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d131      	bne.n	8006480 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800641c:	4b1b      	ldr	r3, [pc, #108]	; (800648c <HAL_UART_MspInit+0x90>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	4a1a      	ldr	r2, [pc, #104]	; (800648c <HAL_UART_MspInit+0x90>)
 8006422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006426:	6193      	str	r3, [r2, #24]
 8006428:	4b18      	ldr	r3, [pc, #96]	; (800648c <HAL_UART_MspInit+0x90>)
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006434:	4b15      	ldr	r3, [pc, #84]	; (800648c <HAL_UART_MspInit+0x90>)
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <HAL_UART_MspInit+0x90>)
 800643a:	f043 0304 	orr.w	r3, r3, #4
 800643e:	6193      	str	r3, [r2, #24]
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_UART_MspInit+0x90>)
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800644c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006450:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006452:	2302      	movs	r3, #2
 8006454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006456:	2303      	movs	r3, #3
 8006458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800645a:	f107 0310 	add.w	r3, r7, #16
 800645e:	4619      	mov	r1, r3
 8006460:	480b      	ldr	r0, [pc, #44]	; (8006490 <HAL_UART_MspInit+0x94>)
 8006462:	f001 fb43 	bl	8007aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800646a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006470:	2300      	movs	r3, #0
 8006472:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006474:	f107 0310 	add.w	r3, r7, #16
 8006478:	4619      	mov	r1, r3
 800647a:	4805      	ldr	r0, [pc, #20]	; (8006490 <HAL_UART_MspInit+0x94>)
 800647c:	f001 fb36 	bl	8007aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006480:	bf00      	nop
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40013800 	.word	0x40013800
 800648c:	40021000 	.word	0x40021000
 8006490:	40010800 	.word	0x40010800

08006494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8006498:	f001 f8d1 	bl	800763e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	while (1) {
 800649c:	e7fe      	b.n	800649c <NMI_Handler+0x8>

0800649e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	af00      	add	r7, sp, #0
//		if((uint32_t)(pSP+i)>=0x20004fff)
//			break;
//		print("%p : 0x%lx\n",(pSP+i), *(pSP+i));
//	}

	HAL_NVIC_SystemReset();
 80064a2:	f001 f8cc 	bl	800763e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064a6:	e7fe      	b.n	80064a6 <HardFault_Handler+0x8>

080064a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 80064ac:	f001 f8c7 	bl	800763e <HAL_NVIC_SystemReset>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064b0:	e7fe      	b.n	80064b0 <MemManage_Handler+0x8>

080064b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80064b6:	f001 f8c2 	bl	800763e <HAL_NVIC_SystemReset>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064ba:	e7fe      	b.n	80064ba <BusFault_Handler+0x8>

080064bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80064c0:	f001 f8bd 	bl	800763e <HAL_NVIC_SystemReset>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064c4:	e7fe      	b.n	80064c4 <UsageFault_Handler+0x8>

080064c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064ca:	bf00      	nop
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr

080064d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064d2:	b480      	push	{r7}
 80064d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr

080064de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064de:	b480      	push	{r7}
 80064e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064e2:	bf00      	nop
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr

080064ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064ee:	f000 f89d 	bl	800662c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80064fc:	4802      	ldr	r0, [pc, #8]	; (8006508 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80064fe:	f000 fd63 	bl	8006fc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000b14 	.word	0x20000b14

0800650c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	pn_can_sync_layer_thread();
 8006510:	f7ff fd64 	bl	8005fdc <pn_can_sync_layer_thread>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006514:	4802      	ldr	r0, [pc, #8]	; (8006520 <TIM1_UP_IRQHandler+0x14>)
 8006516:	f002 fd9b 	bl	8009050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000b80 	.word	0x20000b80

08006524 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006528:	4802      	ldr	r0, [pc, #8]	; (8006534 <TIM4_IRQHandler+0x10>)
 800652a:	f002 fd91 	bl	8009050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000a98 	.word	0x20000a98

08006538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800653c:	4b03      	ldr	r3, [pc, #12]	; (800654c <SystemInit+0x14>)
 800653e:	4a04      	ldr	r2, [pc, #16]	; (8006550 <SystemInit+0x18>)
 8006540:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006542:	bf00      	nop
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	e000ed00 	.word	0xe000ed00
 8006550:	08003400 	.word	0x08003400

08006554 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006554:	480c      	ldr	r0, [pc, #48]	; (8006588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006556:	490d      	ldr	r1, [pc, #52]	; (800658c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006558:	4a0d      	ldr	r2, [pc, #52]	; (8006590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800655a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800655c:	e002      	b.n	8006564 <LoopCopyDataInit>

0800655e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800655e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006562:	3304      	adds	r3, #4

08006564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006568:	d3f9      	bcc.n	800655e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800656a:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800656c:	4c0a      	ldr	r4, [pc, #40]	; (8006598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800656e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006570:	e001      	b.n	8006576 <LoopFillZerobss>

08006572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006574:	3204      	adds	r2, #4

08006576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006578:	d3fb      	bcc.n	8006572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800657a:	f7ff ffdd 	bl	8006538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800657e:	f009 f853 	bl	800f628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006582:	f7ff fa0f 	bl	80059a4 <main>
  bx lr
 8006586:	4770      	bx	lr
  ldr r0, =_sdata
 8006588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800658c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8006590:	0800fc98 	.word	0x0800fc98
  ldr r2, =_sbss
 8006594:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8006598:	20000c84 	.word	0x20000c84

0800659c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800659c:	e7fe      	b.n	800659c <ADC1_2_IRQHandler>
	...

080065a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <HAL_Init+0x28>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <HAL_Init+0x28>)
 80065aa:	f043 0310 	orr.w	r3, r3, #16
 80065ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065b0:	2003      	movs	r0, #3
 80065b2:	f001 f80f 	bl	80075d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065b6:	2000      	movs	r0, #0
 80065b8:	f000 f808 	bl	80065cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80065bc:	f7ff fdda 	bl	8006174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40022000 	.word	0x40022000

080065cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065d4:	4b12      	ldr	r3, [pc, #72]	; (8006620 <HAL_InitTick+0x54>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <HAL_InitTick+0x58>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	4619      	mov	r1, r3
 80065de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 f82b 	bl	8007646 <HAL_SYSTICK_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e00e      	b.n	8006618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b0f      	cmp	r3, #15
 80065fe:	d80a      	bhi.n	8006616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006600:	2200      	movs	r2, #0
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006608:	f000 ffef 	bl	80075ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800660c:	4a06      	ldr	r2, [pc, #24]	; (8006628 <HAL_InitTick+0x5c>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e000      	b.n	8006618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	200001c4 	.word	0x200001c4
 8006624:	200001cc 	.word	0x200001cc
 8006628:	200001c8 	.word	0x200001c8

0800662c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_IncTick+0x1c>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <HAL_IncTick+0x20>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4413      	add	r3, r2
 800663c:	4a03      	ldr	r2, [pc, #12]	; (800664c <HAL_IncTick+0x20>)
 800663e:	6013      	str	r3, [r2, #0]
}
 8006640:	bf00      	nop
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr
 8006648:	200001cc 	.word	0x200001cc
 800664c:	20000c28 	.word	0x20000c28

08006650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return uwTick;
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <HAL_GetTick+0x10>)
 8006656:	681b      	ldr	r3, [r3, #0]
}
 8006658:	4618      	mov	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr
 8006660:	20000c28 	.word	0x20000c28

08006664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800666c:	f7ff fff0 	bl	8006650 <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667c:	d005      	beq.n	800668a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <HAL_Delay+0x44>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800668a:	bf00      	nop
 800668c:	f7ff ffe0 	bl	8006650 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	429a      	cmp	r2, r3
 800669a:	d8f7      	bhi.n	800668c <HAL_Delay+0x28>
  {
  }
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200001cc 	.word	0x200001cc

080066ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e0ed      	b.n	800689a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fd84 	bl	80061d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066e0:	f7ff ffb6 	bl	8006650 <HAL_GetTick>
 80066e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80066e6:	e012      	b.n	800670e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80066e8:	f7ff ffb2 	bl	8006650 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b0a      	cmp	r3, #10
 80066f4:	d90b      	bls.n	800670e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2205      	movs	r2, #5
 8006706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e0c5      	b.n	800689a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0e5      	beq.n	80066e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0202 	bic.w	r2, r2, #2
 800672a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800672c:	f7ff ff90 	bl	8006650 <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006732:	e012      	b.n	800675a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006734:	f7ff ff8c 	bl	8006650 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b0a      	cmp	r3, #10
 8006740:	d90b      	bls.n	800675a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2205      	movs	r2, #5
 8006752:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e09f      	b.n	800689a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e5      	bne.n	8006734 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7e1b      	ldrb	r3, [r3, #24]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d108      	bne.n	8006782 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	e007      	b.n	8006792 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006790:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	7e5b      	ldrb	r3, [r3, #25]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d108      	bne.n	80067ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e007      	b.n	80067bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	7e9b      	ldrb	r3, [r3, #26]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d108      	bne.n	80067d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0220 	orr.w	r2, r2, #32
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e007      	b.n	80067e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0220 	bic.w	r2, r2, #32
 80067e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7edb      	ldrb	r3, [r3, #27]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d108      	bne.n	8006800 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0210 	bic.w	r2, r2, #16
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e007      	b.n	8006810 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0210 	orr.w	r2, r2, #16
 800680e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	7f1b      	ldrb	r3, [r3, #28]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d108      	bne.n	800682a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0208 	orr.w	r2, r2, #8
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e007      	b.n	800683a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0208 	bic.w	r2, r2, #8
 8006838:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7f5b      	ldrb	r3, [r3, #29]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d108      	bne.n	8006854 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0204 	orr.w	r2, r2, #4
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e007      	b.n	8006864 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0204 	bic.w	r2, r2, #4
 8006862:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	ea42 0103 	orr.w	r1, r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	1e5a      	subs	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b087      	sub	sp, #28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068b8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80068ba:	7cfb      	ldrb	r3, [r7, #19]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d003      	beq.n	80068c8 <HAL_CAN_ConfigFilter+0x26>
 80068c0:	7cfb      	ldrb	r3, [r7, #19]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	f040 80aa 	bne.w	8006a1c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068ce:	f043 0201 	orr.w	r2, r3, #1
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	2201      	movs	r2, #1
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	401a      	ands	r2, r3
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d123      	bne.n	800694a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	43db      	mvns	r3, r3
 800690c:	401a      	ands	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006924:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	3248      	adds	r2, #72	; 0x48
 800692a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800693e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	3348      	adds	r3, #72	; 0x48
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	440b      	add	r3, r1
 8006948:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d122      	bne.n	8006998 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	431a      	orrs	r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006972:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	3248      	adds	r2, #72	; 0x48
 8006978:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800698c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800698e:	6979      	ldr	r1, [r7, #20]
 8006990:	3348      	adds	r3, #72	; 0x48
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	440b      	add	r3, r1
 8006996:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d109      	bne.n	80069b4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	401a      	ands	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80069b2:	e007      	b.n	80069c4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	431a      	orrs	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	401a      	ands	r2, r3
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80069de:	e007      	b.n	80069f0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	431a      	orrs	r2, r3
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e006      	b.n	8006a2a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d12e      	bne.n	8006aa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a60:	f7ff fdf6 	bl	8006650 <HAL_GetTick>
 8006a64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006a66:	e012      	b.n	8006a8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a68:	f7ff fdf2 	bl	8006650 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b0a      	cmp	r3, #10
 8006a74:	d90b      	bls.n	8006a8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2205      	movs	r2, #5
 8006a86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e012      	b.n	8006ab4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e006      	b.n	8006ab4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
  }
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ad0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006ada:	7ffb      	ldrb	r3, [r7, #31]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d003      	beq.n	8006ae8 <HAL_CAN_AddTxMessage+0x2c>
 8006ae0:	7ffb      	ldrb	r3, [r7, #31]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	f040 80b8 	bne.w	8006c58 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80a0 	beq.w	8006c48 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	0e1b      	lsrs	r3, r3, #24
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d907      	bls.n	8006b28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e09e      	b.n	8006c66 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006b28:	2201      	movs	r2, #1
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006b44:	68f9      	ldr	r1, [r7, #12]
 8006b46:	6809      	ldr	r1, [r1, #0]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	3318      	adds	r3, #24
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	440b      	add	r3, r1
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e00f      	b.n	8006b76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006b60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006b6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	3318      	adds	r3, #24
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	440b      	add	r3, r1
 8006b74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6819      	ldr	r1, [r3, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	3318      	adds	r3, #24
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	440b      	add	r3, r1
 8006b86:	3304      	adds	r3, #4
 8006b88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	7d1b      	ldrb	r3, [r3, #20]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d111      	bne.n	8006bb6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	3318      	adds	r3, #24
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	6811      	ldr	r1, [r2, #0]
 8006ba6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	3318      	adds	r3, #24
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3307      	adds	r3, #7
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	061a      	lsls	r2, r3, #24
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3306      	adds	r3, #6
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	041b      	lsls	r3, r3, #16
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3305      	adds	r3, #5
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	3204      	adds	r2, #4
 8006bd6:	7812      	ldrb	r2, [r2, #0]
 8006bd8:	4610      	mov	r0, r2
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	ea43 0200 	orr.w	r2, r3, r0
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	440b      	add	r3, r1
 8006be8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006bec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	061a      	lsls	r2, r3, #24
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3301      	adds	r3, #1
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	4610      	mov	r0, r2
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	6811      	ldr	r1, [r2, #0]
 8006c14:	ea43 0200 	orr.w	r2, r3, r0
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006c22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	3318      	adds	r3, #24
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	4413      	add	r3, r2
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	6811      	ldr	r1, [r2, #0]
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	3318      	adds	r3, #24
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	440b      	add	r3, r1
 8006c42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e00e      	b.n	8006c66 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e006      	b.n	8006c66 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
  }
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3724      	adds	r7, #36	; 0x24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d002      	beq.n	8006c8e <HAL_CAN_AbortTxRequest+0x1e>
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d128      	bne.n	8006ce0 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ca6:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cc0:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006cda:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e006      	b.n	8006cee <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
  }
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d0a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d002      	beq.n	8006d18 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d11d      	bne.n	8006d54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d74:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d002      	beq.n	8006d82 <HAL_CAN_IsTxMessagePending+0x22>
 8006d7c:	7afb      	ldrb	r3, [r7, #11]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d10b      	bne.n	8006d9a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	069b      	lsls	r3, r3, #26
 8006d8c:	401a      	ands	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	069b      	lsls	r3, r3, #26
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d001      	beq.n	8006d9a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8006d96:	2301      	movs	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d003      	beq.n	8006dca <HAL_CAN_GetRxMessage+0x24>
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	f040 80f3 	bne.w	8006fb0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10e      	bne.n	8006dee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d116      	bne.n	8006e0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e0e7      	b.n	8006fbe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d107      	bne.n	8006e0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0d8      	b.n	8006fbe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	331b      	adds	r3, #27
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	4413      	add	r3, r2
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0204 	and.w	r2, r3, #4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10c      	bne.n	8006e44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	331b      	adds	r3, #27
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	4413      	add	r3, r2
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	0d5b      	lsrs	r3, r3, #21
 8006e3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e00b      	b.n	8006e5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	331b      	adds	r3, #27
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	4413      	add	r3, r2
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	08db      	lsrs	r3, r3, #3
 8006e54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	331b      	adds	r3, #27
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	4413      	add	r3, r2
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0202 	and.w	r2, r3, #2
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	331b      	adds	r3, #27
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 020f 	and.w	r2, r3, #15
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	331b      	adds	r3, #27
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	4413      	add	r3, r2
 8006e96:	3304      	adds	r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	0a1b      	lsrs	r3, r3, #8
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	331b      	adds	r3, #27
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	0a1a      	lsrs	r2, r3, #8
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	0c1a      	lsrs	r2, r3, #16
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	3302      	adds	r3, #2
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	0e1a      	lsrs	r2, r3, #24
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	3303      	adds	r3, #3
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	3304      	adds	r3, #4
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	0a1a      	lsrs	r2, r3, #8
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	3305      	adds	r3, #5
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	0c1a      	lsrs	r2, r3, #16
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	3306      	adds	r3, #6
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	0e1a      	lsrs	r2, r3, #24
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	3307      	adds	r3, #7
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0220 	orr.w	r2, r2, #32
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	e007      	b.n	8006fac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0220 	orr.w	r2, r2, #32
 8006faa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e006      	b.n	8006fbe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
  }
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d07c      	beq.n	8007108 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d023      	beq.n	8007060 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f983 	bl	8007336 <HAL_CAN_TxMailbox0CompleteCallback>
 8007030:	e016      	b.n	8007060 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
 8007044:	e00c      	b.n	8007060 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
 8007058:	e002      	b.n	8007060 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f986 	bl	800736c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d024      	beq.n	80070b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007072:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f962 	bl	8007348 <HAL_CAN_TxMailbox1CompleteCallback>
 8007084:	e016      	b.n	80070b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
 8007098:	e00c      	b.n	80070b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
 80070ac:	e002      	b.n	80070b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f965 	bl	800737e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d024      	beq.n	8007108 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80070c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f941 	bl	800735a <HAL_CAN_TxMailbox2CompleteCallback>
 80070d8:	e016      	b.n	8007108 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
 80070ec:	e00c      	b.n	8007108 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007100:	e002      	b.n	8007108 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f944 	bl	8007390 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007122:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2210      	movs	r2, #16
 800712a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d006      	beq.n	800714e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2208      	movs	r2, #8
 8007146:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f92a 	bl	80073a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fd f83a 	bl	80041e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007186:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2210      	movs	r2, #16
 800718e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d006      	beq.n	80071b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2208      	movs	r2, #8
 80071aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f90a 	bl	80073c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8f2 	bl	80073b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2210      	movs	r2, #16
 80071ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f8f3 	bl	80073d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d006      	beq.n	8007214 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2208      	movs	r2, #8
 800720c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f8eb 	bl	80073ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d07b      	beq.n	8007316 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d072      	beq.n	800730e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722e:	2b00      	cmp	r3, #0
 8007230:	d008      	beq.n	8007244 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800724a:	2b00      	cmp	r3, #0
 800724c:	d008      	beq.n	8007260 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	f043 0302 	orr.w	r3, r3, #2
 800725e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	f043 0304 	orr.w	r3, r3, #4
 800727a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007282:	2b00      	cmp	r3, #0
 8007284:	d043      	beq.n	800730e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800728c:	2b00      	cmp	r3, #0
 800728e:	d03e      	beq.n	800730e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007296:	2b60      	cmp	r3, #96	; 0x60
 8007298:	d02b      	beq.n	80072f2 <HAL_CAN_IRQHandler+0x32a>
 800729a:	2b60      	cmp	r3, #96	; 0x60
 800729c:	d82e      	bhi.n	80072fc <HAL_CAN_IRQHandler+0x334>
 800729e:	2b50      	cmp	r3, #80	; 0x50
 80072a0:	d022      	beq.n	80072e8 <HAL_CAN_IRQHandler+0x320>
 80072a2:	2b50      	cmp	r3, #80	; 0x50
 80072a4:	d82a      	bhi.n	80072fc <HAL_CAN_IRQHandler+0x334>
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d019      	beq.n	80072de <HAL_CAN_IRQHandler+0x316>
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d826      	bhi.n	80072fc <HAL_CAN_IRQHandler+0x334>
 80072ae:	2b30      	cmp	r3, #48	; 0x30
 80072b0:	d010      	beq.n	80072d4 <HAL_CAN_IRQHandler+0x30c>
 80072b2:	2b30      	cmp	r3, #48	; 0x30
 80072b4:	d822      	bhi.n	80072fc <HAL_CAN_IRQHandler+0x334>
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d002      	beq.n	80072c0 <HAL_CAN_IRQHandler+0x2f8>
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d005      	beq.n	80072ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80072be:	e01d      	b.n	80072fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	f043 0308 	orr.w	r3, r3, #8
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80072c8:	e019      	b.n	80072fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	f043 0310 	orr.w	r3, r3, #16
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80072d2:	e014      	b.n	80072fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	f043 0320 	orr.w	r3, r3, #32
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80072dc:	e00f      	b.n	80072fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80072e6:	e00a      	b.n	80072fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80072f0:	e005      	b.n	80072fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80072fa:	e000      	b.n	80072fe <HAL_CAN_IRQHandler+0x336>
            break;
 80072fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800730c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2204      	movs	r2, #4
 8007314:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f867 	bl	80073fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800732e:	bf00      	nop
 8007330:	3728      	adds	r7, #40	; 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr

08007348 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr

0800735a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr

0800736c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr

0800737e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr

080073a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr

080073b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bc80      	pop	{r7}
 80073c4:	4770      	bx	lr

080073c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr
	...

08007410 <__NVIC_SetPriorityGrouping>:
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <__NVIC_SetPriorityGrouping+0x44>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800742c:	4013      	ands	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800743c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007442:	4a04      	ldr	r2, [pc, #16]	; (8007454 <__NVIC_SetPriorityGrouping+0x44>)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	60d3      	str	r3, [r2, #12]
}
 8007448:	bf00      	nop
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	bc80      	pop	{r7}
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	e000ed00 	.word	0xe000ed00

08007458 <__NVIC_GetPriorityGrouping>:
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <__NVIC_GetPriorityGrouping+0x18>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	f003 0307 	and.w	r3, r3, #7
}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	e000ed00 	.word	0xe000ed00

08007474 <__NVIC_EnableIRQ>:
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800747e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db0b      	blt.n	800749e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	f003 021f 	and.w	r2, r3, #31
 800748c:	4906      	ldr	r1, [pc, #24]	; (80074a8 <__NVIC_EnableIRQ+0x34>)
 800748e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	2001      	movs	r0, #1
 8007496:	fa00 f202 	lsl.w	r2, r0, r2
 800749a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	e000e100 	.word	0xe000e100

080074ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	db0a      	blt.n	80074d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	490c      	ldr	r1, [pc, #48]	; (80074f8 <__NVIC_SetPriority+0x4c>)
 80074c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ca:	0112      	lsls	r2, r2, #4
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	440b      	add	r3, r1
 80074d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074d4:	e00a      	b.n	80074ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4908      	ldr	r1, [pc, #32]	; (80074fc <__NVIC_SetPriority+0x50>)
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	3b04      	subs	r3, #4
 80074e4:	0112      	lsls	r2, r2, #4
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	440b      	add	r3, r1
 80074ea:	761a      	strb	r2, [r3, #24]
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	e000e100 	.word	0xe000e100
 80074fc:	e000ed00 	.word	0xe000ed00

08007500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007500:	b480      	push	{r7}
 8007502:	b089      	sub	sp, #36	; 0x24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f1c3 0307 	rsb	r3, r3, #7
 800751a:	2b04      	cmp	r3, #4
 800751c:	bf28      	it	cs
 800751e:	2304      	movcs	r3, #4
 8007520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	3304      	adds	r3, #4
 8007526:	2b06      	cmp	r3, #6
 8007528:	d902      	bls.n	8007530 <NVIC_EncodePriority+0x30>
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3b03      	subs	r3, #3
 800752e:	e000      	b.n	8007532 <NVIC_EncodePriority+0x32>
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43da      	mvns	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	401a      	ands	r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	fa01 f303 	lsl.w	r3, r1, r3
 8007552:	43d9      	mvns	r1, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007558:	4313      	orrs	r3, r2
         );
}
 800755a:	4618      	mov	r0, r3
 800755c:	3724      	adds	r7, #36	; 0x24
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007568:	f3bf 8f4f 	dsb	sy
}
 800756c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800756e:	4b06      	ldr	r3, [pc, #24]	; (8007588 <__NVIC_SystemReset+0x24>)
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007576:	4904      	ldr	r1, [pc, #16]	; (8007588 <__NVIC_SystemReset+0x24>)
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <__NVIC_SystemReset+0x28>)
 800757a:	4313      	orrs	r3, r2
 800757c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800757e:	f3bf 8f4f 	dsb	sy
}
 8007582:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <__NVIC_SystemReset+0x20>
 8007588:	e000ed00 	.word	0xe000ed00
 800758c:	05fa0004 	.word	0x05fa0004

08007590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3b01      	subs	r3, #1
 800759c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075a0:	d301      	bcc.n	80075a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075a2:	2301      	movs	r3, #1
 80075a4:	e00f      	b.n	80075c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075a6:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <SysTick_Config+0x40>)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075ae:	210f      	movs	r1, #15
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b4:	f7ff ff7a 	bl	80074ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <SysTick_Config+0x40>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075be:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <SysTick_Config+0x40>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	e000e010 	.word	0xe000e010

080075d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff17 	bl	8007410 <__NVIC_SetPriorityGrouping>
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b086      	sub	sp, #24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	4603      	mov	r3, r0
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075fc:	f7ff ff2c 	bl	8007458 <__NVIC_GetPriorityGrouping>
 8007600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	6978      	ldr	r0, [r7, #20]
 8007608:	f7ff ff7a 	bl	8007500 <NVIC_EncodePriority>
 800760c:	4602      	mov	r2, r0
 800760e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff ff49 	bl	80074ac <__NVIC_SetPriority>
}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	4603      	mov	r3, r0
 800762a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800762c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff ff1f 	bl	8007474 <__NVIC_EnableIRQ>
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007642:	f7ff ff8f 	bl	8007564 <__NVIC_SystemReset>

08007646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff ff9e 	bl	8007590 <SysTick_Config>
 8007654:	4603      	mov	r3, r0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e00e      	b.n	800768e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	795b      	ldrb	r3, [r3, #5]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d105      	bne.n	8007686 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7fe fe11 	bl	80062a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007696:	b480      	push	{r7}
 8007698:	b087      	sub	sp, #28
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2202      	movs	r2, #2
 80076aa:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	e00a      	b.n	80076c8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	441a      	add	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	3301      	adds	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d3f0      	bcc.n	80076b2 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80076de:	693b      	ldr	r3, [r7, #16]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr
	...

080076ec <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80076ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007706:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <HAL_FLASH_Program+0xd8>)
 8007708:	7e1b      	ldrb	r3, [r3, #24]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_FLASH_Program+0x26>
 800770e:	2302      	movs	r3, #2
 8007710:	e054      	b.n	80077bc <HAL_FLASH_Program+0xd0>
 8007712:	4b2c      	ldr	r3, [pc, #176]	; (80077c4 <HAL_FLASH_Program+0xd8>)
 8007714:	2201      	movs	r2, #1
 8007716:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800771c:	f000 f8a8 	bl	8007870 <FLASH_WaitForLastOperation>
 8007720:	4603      	mov	r3, r0
 8007722:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d144      	bne.n	80077b4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d102      	bne.n	8007736 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8007730:	2301      	movs	r3, #1
 8007732:	757b      	strb	r3, [r7, #21]
 8007734:	e007      	b.n	8007746 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d102      	bne.n	8007742 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800773c:	2302      	movs	r3, #2
 800773e:	757b      	strb	r3, [r7, #21]
 8007740:	e001      	b.n	8007746 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8007742:	2304      	movs	r3, #4
 8007744:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8007746:	2300      	movs	r3, #0
 8007748:	75bb      	strb	r3, [r7, #22]
 800774a:	e02d      	b.n	80077a8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800774c:	7dbb      	ldrb	r3, [r7, #22]
 800774e:	005a      	lsls	r2, r3, #1
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	eb02 0c03 	add.w	ip, r2, r3
 8007756:	7dbb      	ldrb	r3, [r7, #22]
 8007758:	0119      	lsls	r1, r3, #4
 800775a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775e:	f1c1 0620 	rsb	r6, r1, #32
 8007762:	f1a1 0020 	sub.w	r0, r1, #32
 8007766:	fa22 f401 	lsr.w	r4, r2, r1
 800776a:	fa03 f606 	lsl.w	r6, r3, r6
 800776e:	4334      	orrs	r4, r6
 8007770:	fa23 f000 	lsr.w	r0, r3, r0
 8007774:	4304      	orrs	r4, r0
 8007776:	fa23 f501 	lsr.w	r5, r3, r1
 800777a:	b2a3      	uxth	r3, r4
 800777c:	4619      	mov	r1, r3
 800777e:	4660      	mov	r0, ip
 8007780:	f000 f85a 	bl	8007838 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007784:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007788:	f000 f872 	bl	8007870 <FLASH_WaitForLastOperation>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <HAL_FLASH_Program+0xdc>)
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <HAL_FLASH_Program+0xdc>)
 8007796:	f023 0301 	bic.w	r3, r3, #1
 800779a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d107      	bne.n	80077b2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80077a2:	7dbb      	ldrb	r3, [r7, #22]
 80077a4:	3301      	adds	r3, #1
 80077a6:	75bb      	strb	r3, [r7, #22]
 80077a8:	7dba      	ldrb	r2, [r7, #22]
 80077aa:	7d7b      	ldrb	r3, [r7, #21]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d3cd      	bcc.n	800774c <HAL_FLASH_Program+0x60>
 80077b0:	e000      	b.n	80077b4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80077b2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80077b4:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <HAL_FLASH_Program+0xd8>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	761a      	strb	r2, [r3, #24]

  return status;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c4:	20000c30 	.word	0x20000c30
 80077c8:	40022000 	.word	0x40022000

080077cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <HAL_FLASH_Unlock+0x40>)
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80077e2:	4b0a      	ldr	r3, [pc, #40]	; (800780c <HAL_FLASH_Unlock+0x40>)
 80077e4:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <HAL_FLASH_Unlock+0x44>)
 80077e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80077e8:	4b08      	ldr	r3, [pc, #32]	; (800780c <HAL_FLASH_Unlock+0x40>)
 80077ea:	4a0a      	ldr	r2, [pc, #40]	; (8007814 <HAL_FLASH_Unlock+0x48>)
 80077ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <HAL_FLASH_Unlock+0x40>)
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80077fe:	79fb      	ldrb	r3, [r7, #7]
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40022000 	.word	0x40022000
 8007810:	45670123 	.word	0x45670123
 8007814:	cdef89ab 	.word	0xcdef89ab

08007818 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <HAL_FLASH_Lock+0x1c>)
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	4a04      	ldr	r2, [pc, #16]	; (8007834 <HAL_FLASH_Lock+0x1c>)
 8007822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007826:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	40022000 	.word	0x40022000

08007838 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007844:	4b08      	ldr	r3, [pc, #32]	; (8007868 <FLASH_Program_HalfWord+0x30>)
 8007846:	2200      	movs	r2, #0
 8007848:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800784a:	4b08      	ldr	r3, [pc, #32]	; (800786c <FLASH_Program_HalfWord+0x34>)
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	4a07      	ldr	r2, [pc, #28]	; (800786c <FLASH_Program_HalfWord+0x34>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	887a      	ldrh	r2, [r7, #2]
 800785a:	801a      	strh	r2, [r3, #0]
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	20000c30 	.word	0x20000c30
 800786c:	40022000 	.word	0x40022000

08007870 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007878:	f7fe feea 	bl	8006650 <HAL_GetTick>
 800787c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800787e:	e010      	b.n	80078a2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007886:	d00c      	beq.n	80078a2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <FLASH_WaitForLastOperation+0x2e>
 800788e:	f7fe fedf 	bl	8006650 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	429a      	cmp	r2, r3
 800789c:	d201      	bcs.n	80078a2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e025      	b.n	80078ee <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <FLASH_WaitForLastOperation+0x88>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e8      	bne.n	8007880 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <FLASH_WaitForLastOperation+0x88>)
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <FLASH_WaitForLastOperation+0x88>)
 80078bc:	2220      	movs	r2, #32
 80078be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80078c0:	4b0d      	ldr	r3, [pc, #52]	; (80078f8 <FLASH_WaitForLastOperation+0x88>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <FLASH_WaitForLastOperation+0x88>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80078d8:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <FLASH_WaitForLastOperation+0x88>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80078e4:	f000 f80a 	bl	80078fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40022000 	.word	0x40022000

080078fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007906:	4b23      	ldr	r3, [pc, #140]	; (8007994 <FLASH_SetErrorCode+0x98>)
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007912:	4b21      	ldr	r3, [pc, #132]	; (8007998 <FLASH_SetErrorCode+0x9c>)
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f043 0302 	orr.w	r3, r3, #2
 800791a:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <FLASH_SetErrorCode+0x9c>)
 800791c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f043 0310 	orr.w	r3, r3, #16
 8007924:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007926:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <FLASH_SetErrorCode+0x98>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007932:	4b19      	ldr	r3, [pc, #100]	; (8007998 <FLASH_SetErrorCode+0x9c>)
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	4a17      	ldr	r2, [pc, #92]	; (8007998 <FLASH_SetErrorCode+0x9c>)
 800793c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f043 0304 	orr.w	r3, r3, #4
 8007944:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <FLASH_SetErrorCode+0x98>)
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <FLASH_SetErrorCode+0x9c>)
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f043 0304 	orr.w	r3, r3, #4
 800795a:	4a0f      	ldr	r2, [pc, #60]	; (8007998 <FLASH_SetErrorCode+0x9c>)
 800795c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <FLASH_SetErrorCode+0x98>)
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <FLASH_SetErrorCode+0x98>)
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f240 1201 	movw	r2, #257	; 0x101
 8007970:	4293      	cmp	r3, r2
 8007972:	d106      	bne.n	8007982 <FLASH_SetErrorCode+0x86>
 8007974:	4b07      	ldr	r3, [pc, #28]	; (8007994 <FLASH_SetErrorCode+0x98>)
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	4a06      	ldr	r2, [pc, #24]	; (8007994 <FLASH_SetErrorCode+0x98>)
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	61d3      	str	r3, [r2, #28]
}  
 8007980:	e002      	b.n	8007988 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007982:	4a04      	ldr	r2, [pc, #16]	; (8007994 <FLASH_SetErrorCode+0x98>)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	60d3      	str	r3, [r2, #12]
}  
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40022000 	.word	0x40022000
 8007998:	20000c30 	.word	0x20000c30

0800799c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80079ae:	4b2f      	ldr	r3, [pc, #188]	; (8007a6c <HAL_FLASHEx_Erase+0xd0>)
 80079b0:	7e1b      	ldrb	r3, [r3, #24]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_FLASHEx_Erase+0x1e>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e053      	b.n	8007a62 <HAL_FLASHEx_Erase+0xc6>
 80079ba:	4b2c      	ldr	r3, [pc, #176]	; (8007a6c <HAL_FLASHEx_Erase+0xd0>)
 80079bc:	2201      	movs	r2, #1
 80079be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d116      	bne.n	80079f6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80079c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079cc:	f7ff ff50 	bl	8007870 <FLASH_WaitForLastOperation>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d141      	bne.n	8007a5a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80079d6:	2001      	movs	r0, #1
 80079d8:	f000 f84c 	bl	8007a74 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079e0:	f7ff ff46 	bl	8007870 <FLASH_WaitForLastOperation>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <HAL_FLASHEx_Erase+0xd4>)
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <HAL_FLASHEx_Erase+0xd4>)
 80079ee:	f023 0304 	bic.w	r3, r3, #4
 80079f2:	6113      	str	r3, [r2, #16]
 80079f4:	e031      	b.n	8007a5a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80079f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079fa:	f7ff ff39 	bl	8007870 <FLASH_WaitForLastOperation>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d12a      	bne.n	8007a5a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a0a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	60bb      	str	r3, [r7, #8]
 8007a12:	e019      	b.n	8007a48 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f000 f849 	bl	8007aac <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a1e:	f7ff ff27 	bl	8007870 <FLASH_WaitForLastOperation>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007a26:	4b12      	ldr	r3, [pc, #72]	; (8007a70 <HAL_FLASHEx_Erase+0xd4>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	4a11      	ldr	r2, [pc, #68]	; (8007a70 <HAL_FLASHEx_Erase+0xd4>)
 8007a2c:	f023 0302 	bic.w	r3, r3, #2
 8007a30:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	601a      	str	r2, [r3, #0]
            break;
 8007a3e:	e00c      	b.n	8007a5a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a46:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	029a      	lsls	r2, r3, #10
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d3dc      	bcc.n	8007a14 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a5a:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <HAL_FLASHEx_Erase+0xd0>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	761a      	strb	r2, [r3, #24]

  return status;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000c30 	.word	0x20000c30
 8007a70:	40022000 	.word	0x40022000

08007a74 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <FLASH_MassErase+0x30>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <FLASH_MassErase+0x34>)
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <FLASH_MassErase+0x34>)
 8007a88:	f043 0304 	orr.w	r3, r3, #4
 8007a8c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <FLASH_MassErase+0x34>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <FLASH_MassErase+0x34>)
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr
 8007aa4:	20000c30 	.word	0x20000c30
 8007aa8:	40022000 	.word	0x40022000

08007aac <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <FLASH_PageErase+0x38>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <FLASH_PageErase+0x3c>)
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	4a0a      	ldr	r2, [pc, #40]	; (8007ae8 <FLASH_PageErase+0x3c>)
 8007ac0:	f043 0302 	orr.w	r3, r3, #2
 8007ac4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007ac6:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <FLASH_PageErase+0x3c>)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <FLASH_PageErase+0x3c>)
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <FLASH_PageErase+0x3c>)
 8007ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000c30 	.word	0x20000c30
 8007ae8:	40022000 	.word	0x40022000

08007aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b08b      	sub	sp, #44	; 0x2c
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007af6:	2300      	movs	r3, #0
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007afa:	2300      	movs	r3, #0
 8007afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007afe:	e169      	b.n	8007dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007b00:	2201      	movs	r2, #1
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	4013      	ands	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	f040 8158 	bne.w	8007dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4a9a      	ldr	r2, [pc, #616]	; (8007d8c <HAL_GPIO_Init+0x2a0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d05e      	beq.n	8007be6 <HAL_GPIO_Init+0xfa>
 8007b28:	4a98      	ldr	r2, [pc, #608]	; (8007d8c <HAL_GPIO_Init+0x2a0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d875      	bhi.n	8007c1a <HAL_GPIO_Init+0x12e>
 8007b2e:	4a98      	ldr	r2, [pc, #608]	; (8007d90 <HAL_GPIO_Init+0x2a4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d058      	beq.n	8007be6 <HAL_GPIO_Init+0xfa>
 8007b34:	4a96      	ldr	r2, [pc, #600]	; (8007d90 <HAL_GPIO_Init+0x2a4>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d86f      	bhi.n	8007c1a <HAL_GPIO_Init+0x12e>
 8007b3a:	4a96      	ldr	r2, [pc, #600]	; (8007d94 <HAL_GPIO_Init+0x2a8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d052      	beq.n	8007be6 <HAL_GPIO_Init+0xfa>
 8007b40:	4a94      	ldr	r2, [pc, #592]	; (8007d94 <HAL_GPIO_Init+0x2a8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d869      	bhi.n	8007c1a <HAL_GPIO_Init+0x12e>
 8007b46:	4a94      	ldr	r2, [pc, #592]	; (8007d98 <HAL_GPIO_Init+0x2ac>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d04c      	beq.n	8007be6 <HAL_GPIO_Init+0xfa>
 8007b4c:	4a92      	ldr	r2, [pc, #584]	; (8007d98 <HAL_GPIO_Init+0x2ac>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d863      	bhi.n	8007c1a <HAL_GPIO_Init+0x12e>
 8007b52:	4a92      	ldr	r2, [pc, #584]	; (8007d9c <HAL_GPIO_Init+0x2b0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d046      	beq.n	8007be6 <HAL_GPIO_Init+0xfa>
 8007b58:	4a90      	ldr	r2, [pc, #576]	; (8007d9c <HAL_GPIO_Init+0x2b0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d85d      	bhi.n	8007c1a <HAL_GPIO_Init+0x12e>
 8007b5e:	2b12      	cmp	r3, #18
 8007b60:	d82a      	bhi.n	8007bb8 <HAL_GPIO_Init+0xcc>
 8007b62:	2b12      	cmp	r3, #18
 8007b64:	d859      	bhi.n	8007c1a <HAL_GPIO_Init+0x12e>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <HAL_GPIO_Init+0x80>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007be7 	.word	0x08007be7
 8007b70:	08007bc1 	.word	0x08007bc1
 8007b74:	08007bd3 	.word	0x08007bd3
 8007b78:	08007c15 	.word	0x08007c15
 8007b7c:	08007c1b 	.word	0x08007c1b
 8007b80:	08007c1b 	.word	0x08007c1b
 8007b84:	08007c1b 	.word	0x08007c1b
 8007b88:	08007c1b 	.word	0x08007c1b
 8007b8c:	08007c1b 	.word	0x08007c1b
 8007b90:	08007c1b 	.word	0x08007c1b
 8007b94:	08007c1b 	.word	0x08007c1b
 8007b98:	08007c1b 	.word	0x08007c1b
 8007b9c:	08007c1b 	.word	0x08007c1b
 8007ba0:	08007c1b 	.word	0x08007c1b
 8007ba4:	08007c1b 	.word	0x08007c1b
 8007ba8:	08007c1b 	.word	0x08007c1b
 8007bac:	08007c1b 	.word	0x08007c1b
 8007bb0:	08007bc9 	.word	0x08007bc9
 8007bb4:	08007bdd 	.word	0x08007bdd
 8007bb8:	4a79      	ldr	r2, [pc, #484]	; (8007da0 <HAL_GPIO_Init+0x2b4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007bbe:	e02c      	b.n	8007c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	623b      	str	r3, [r7, #32]
          break;
 8007bc6:	e029      	b.n	8007c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	623b      	str	r3, [r7, #32]
          break;
 8007bd0:	e024      	b.n	8007c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	623b      	str	r3, [r7, #32]
          break;
 8007bda:	e01f      	b.n	8007c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	330c      	adds	r3, #12
 8007be2:	623b      	str	r3, [r7, #32]
          break;
 8007be4:	e01a      	b.n	8007c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007bee:	2304      	movs	r3, #4
 8007bf0:	623b      	str	r3, [r7, #32]
          break;
 8007bf2:	e013      	b.n	8007c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d105      	bne.n	8007c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	611a      	str	r2, [r3, #16]
          break;
 8007c06:	e009      	b.n	8007c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c08:	2308      	movs	r3, #8
 8007c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	615a      	str	r2, [r3, #20]
          break;
 8007c12:	e003      	b.n	8007c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007c14:	2300      	movs	r3, #0
 8007c16:	623b      	str	r3, [r7, #32]
          break;
 8007c18:	e000      	b.n	8007c1c <HAL_GPIO_Init+0x130>
          break;
 8007c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	2bff      	cmp	r3, #255	; 0xff
 8007c20:	d801      	bhi.n	8007c26 <HAL_GPIO_Init+0x13a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	e001      	b.n	8007c2a <HAL_GPIO_Init+0x13e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	2bff      	cmp	r3, #255	; 0xff
 8007c30:	d802      	bhi.n	8007c38 <HAL_GPIO_Init+0x14c>
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	e002      	b.n	8007c3e <HAL_GPIO_Init+0x152>
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	3b08      	subs	r3, #8
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	210f      	movs	r1, #15
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	401a      	ands	r2, r3
 8007c50:	6a39      	ldr	r1, [r7, #32]
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	fa01 f303 	lsl.w	r3, r1, r3
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 80b1 	beq.w	8007dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007c6c:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <HAL_GPIO_Init+0x2b8>)
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	4a4c      	ldr	r2, [pc, #304]	; (8007da4 <HAL_GPIO_Init+0x2b8>)
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	6193      	str	r3, [r2, #24]
 8007c78:	4b4a      	ldr	r3, [pc, #296]	; (8007da4 <HAL_GPIO_Init+0x2b8>)
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007c84:	4a48      	ldr	r2, [pc, #288]	; (8007da8 <HAL_GPIO_Init+0x2bc>)
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	089b      	lsrs	r3, r3, #2
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	220f      	movs	r2, #15
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a40      	ldr	r2, [pc, #256]	; (8007dac <HAL_GPIO_Init+0x2c0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d013      	beq.n	8007cd8 <HAL_GPIO_Init+0x1ec>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3f      	ldr	r2, [pc, #252]	; (8007db0 <HAL_GPIO_Init+0x2c4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d00d      	beq.n	8007cd4 <HAL_GPIO_Init+0x1e8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a3e      	ldr	r2, [pc, #248]	; (8007db4 <HAL_GPIO_Init+0x2c8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d007      	beq.n	8007cd0 <HAL_GPIO_Init+0x1e4>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a3d      	ldr	r2, [pc, #244]	; (8007db8 <HAL_GPIO_Init+0x2cc>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d101      	bne.n	8007ccc <HAL_GPIO_Init+0x1e0>
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e006      	b.n	8007cda <HAL_GPIO_Init+0x1ee>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	e004      	b.n	8007cda <HAL_GPIO_Init+0x1ee>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e002      	b.n	8007cda <HAL_GPIO_Init+0x1ee>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e000      	b.n	8007cda <HAL_GPIO_Init+0x1ee>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cdc:	f002 0203 	and.w	r2, r2, #3
 8007ce0:	0092      	lsls	r2, r2, #2
 8007ce2:	4093      	lsls	r3, r2
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007cea:	492f      	ldr	r1, [pc, #188]	; (8007da8 <HAL_GPIO_Init+0x2bc>)
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	089b      	lsrs	r3, r3, #2
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007d04:	4b2d      	ldr	r3, [pc, #180]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	492c      	ldr	r1, [pc, #176]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	600b      	str	r3, [r1, #0]
 8007d10:	e006      	b.n	8007d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007d12:	4b2a      	ldr	r3, [pc, #168]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	4928      	ldr	r1, [pc, #160]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d006      	beq.n	8007d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007d2c:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	4922      	ldr	r1, [pc, #136]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	604b      	str	r3, [r1, #4]
 8007d38:	e006      	b.n	8007d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007d3a:	4b20      	ldr	r3, [pc, #128]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	491e      	ldr	r1, [pc, #120]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d54:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	4918      	ldr	r1, [pc, #96]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	608b      	str	r3, [r1, #8]
 8007d60:	e006      	b.n	8007d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	4914      	ldr	r1, [pc, #80]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d021      	beq.n	8007dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	490e      	ldr	r1, [pc, #56]	; (8007dbc <HAL_GPIO_Init+0x2d0>)
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60cb      	str	r3, [r1, #12]
 8007d88:	e021      	b.n	8007dce <HAL_GPIO_Init+0x2e2>
 8007d8a:	bf00      	nop
 8007d8c:	10320000 	.word	0x10320000
 8007d90:	10310000 	.word	0x10310000
 8007d94:	10220000 	.word	0x10220000
 8007d98:	10210000 	.word	0x10210000
 8007d9c:	10120000 	.word	0x10120000
 8007da0:	10110000 	.word	0x10110000
 8007da4:	40021000 	.word	0x40021000
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40010800 	.word	0x40010800
 8007db0:	40010c00 	.word	0x40010c00
 8007db4:	40011000 	.word	0x40011000
 8007db8:	40011400 	.word	0x40011400
 8007dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <HAL_GPIO_Init+0x304>)
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	4909      	ldr	r1, [pc, #36]	; (8007df0 <HAL_GPIO_Init+0x304>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	fa22 f303 	lsr.w	r3, r2, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f47f ae8e 	bne.w	8007b00 <HAL_GPIO_Init+0x14>
  }
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	372c      	adds	r7, #44	; 0x2c
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr
 8007df0:	40010400 	.word	0x40010400

08007df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	807b      	strh	r3, [r7, #2]
 8007e00:	4613      	mov	r3, r2
 8007e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e04:	787b      	ldrb	r3, [r7, #1]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e0a:	887a      	ldrh	r2, [r7, #2]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007e10:	e003      	b.n	8007e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007e12:	887b      	ldrh	r3, [r7, #2]
 8007e14:	041a      	lsls	r2, r3, #16
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e034      	b.n	8007ea0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007e3e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f245 5255 	movw	r2, #21845	; 0x5555
 8007e48:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6852      	ldr	r2, [r2, #4]
 8007e52:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6892      	ldr	r2, [r2, #8]
 8007e5c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007e5e:	f7fe fbf7 	bl	8006650 <HAL_GetTick>
 8007e62:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007e64:	e00f      	b.n	8007e86 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007e66:	f7fe fbf3 	bl	8006650 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b27      	cmp	r3, #39	; 0x27
 8007e72:	d908      	bls.n	8007e86 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e00c      	b.n	8007ea0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e8      	bne.n	8007e66 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	// Write to flash the values of Is_Key, Battery_Charging_Status, Verification_Status
//	Flash_Write_NUM(0x08000000, Is_Key);
//	Flash_Write_NUM(0x08000001, Bat_Charging_Status);
//	Flash_Write_NUM(0x08000002, Verification_Status);

  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007eb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
	...

08007ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e26c      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 8087 	beq.w	8007ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ee8:	4b92      	ldr	r3, [pc, #584]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f003 030c 	and.w	r3, r3, #12
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d00c      	beq.n	8007f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ef4:	4b8f      	ldr	r3, [pc, #572]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f003 030c 	and.w	r3, r3, #12
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d112      	bne.n	8007f26 <HAL_RCC_OscConfig+0x5e>
 8007f00:	4b8c      	ldr	r3, [pc, #560]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0c:	d10b      	bne.n	8007f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f0e:	4b89      	ldr	r3, [pc, #548]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d06c      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x12c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d168      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e246      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f2e:	d106      	bne.n	8007f3e <HAL_RCC_OscConfig+0x76>
 8007f30:	4b80      	ldr	r3, [pc, #512]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a7f      	ldr	r2, [pc, #508]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	e02e      	b.n	8007f9c <HAL_RCC_OscConfig+0xd4>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10c      	bne.n	8007f60 <HAL_RCC_OscConfig+0x98>
 8007f46:	4b7b      	ldr	r3, [pc, #492]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a7a      	ldr	r2, [pc, #488]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f50:	6013      	str	r3, [r2, #0]
 8007f52:	4b78      	ldr	r3, [pc, #480]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a77      	ldr	r2, [pc, #476]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e01d      	b.n	8007f9c <HAL_RCC_OscConfig+0xd4>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f68:	d10c      	bne.n	8007f84 <HAL_RCC_OscConfig+0xbc>
 8007f6a:	4b72      	ldr	r3, [pc, #456]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a71      	ldr	r2, [pc, #452]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	4b6f      	ldr	r3, [pc, #444]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a6e      	ldr	r2, [pc, #440]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	e00b      	b.n	8007f9c <HAL_RCC_OscConfig+0xd4>
 8007f84:	4b6b      	ldr	r3, [pc, #428]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a6a      	ldr	r2, [pc, #424]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	4b68      	ldr	r3, [pc, #416]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a67      	ldr	r2, [pc, #412]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d013      	beq.n	8007fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa4:	f7fe fb54 	bl	8006650 <HAL_GetTick>
 8007fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fac:	f7fe fb50 	bl	8006650 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b64      	cmp	r3, #100	; 0x64
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e1fa      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fbe:	4b5d      	ldr	r3, [pc, #372]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0f0      	beq.n	8007fac <HAL_RCC_OscConfig+0xe4>
 8007fca:	e014      	b.n	8007ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fcc:	f7fe fb40 	bl	8006650 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fd4:	f7fe fb3c 	bl	8006650 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b64      	cmp	r3, #100	; 0x64
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e1e6      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fe6:	4b53      	ldr	r3, [pc, #332]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f0      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x10c>
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d063      	beq.n	80080ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008002:	4b4c      	ldr	r3, [pc, #304]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f003 030c 	and.w	r3, r3, #12
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800800e:	4b49      	ldr	r3, [pc, #292]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f003 030c 	and.w	r3, r3, #12
 8008016:	2b08      	cmp	r3, #8
 8008018:	d11c      	bne.n	8008054 <HAL_RCC_OscConfig+0x18c>
 800801a:	4b46      	ldr	r3, [pc, #280]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d116      	bne.n	8008054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008026:	4b43      	ldr	r3, [pc, #268]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <HAL_RCC_OscConfig+0x176>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d001      	beq.n	800803e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e1ba      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800803e:	4b3d      	ldr	r3, [pc, #244]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4939      	ldr	r1, [pc, #228]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008052:	e03a      	b.n	80080ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d020      	beq.n	800809e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800805c:	4b36      	ldr	r3, [pc, #216]	; (8008138 <HAL_RCC_OscConfig+0x270>)
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008062:	f7fe faf5 	bl	8006650 <HAL_GetTick>
 8008066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800806a:	f7fe faf1 	bl	8006650 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e19b      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800807c:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0f0      	beq.n	800806a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008088:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	4927      	ldr	r1, [pc, #156]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8008098:	4313      	orrs	r3, r2
 800809a:	600b      	str	r3, [r1, #0]
 800809c:	e015      	b.n	80080ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800809e:	4b26      	ldr	r3, [pc, #152]	; (8008138 <HAL_RCC_OscConfig+0x270>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a4:	f7fe fad4 	bl	8006650 <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080ac:	f7fe fad0 	bl	8006650 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e17a      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080be:	4b1d      	ldr	r3, [pc, #116]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f0      	bne.n	80080ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d03a      	beq.n	800814c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d019      	beq.n	8008112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080de:	4b17      	ldr	r3, [pc, #92]	; (800813c <HAL_RCC_OscConfig+0x274>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080e4:	f7fe fab4 	bl	8006650 <HAL_GetTick>
 80080e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ea:	e008      	b.n	80080fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ec:	f7fe fab0 	bl	8006650 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e15a      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <HAL_RCC_OscConfig+0x26c>)
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800810a:	2001      	movs	r0, #1
 800810c:	f000 fad8 	bl	80086c0 <RCC_Delay>
 8008110:	e01c      	b.n	800814c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008112:	4b0a      	ldr	r3, [pc, #40]	; (800813c <HAL_RCC_OscConfig+0x274>)
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008118:	f7fe fa9a 	bl	8006650 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800811e:	e00f      	b.n	8008140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008120:	f7fe fa96 	bl	8006650 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d908      	bls.n	8008140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e140      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
 8008132:	bf00      	nop
 8008134:	40021000 	.word	0x40021000
 8008138:	42420000 	.word	0x42420000
 800813c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008140:	4b9e      	ldr	r3, [pc, #632]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e9      	bne.n	8008120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 80a6 	beq.w	80082a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800815a:	2300      	movs	r3, #0
 800815c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800815e:	4b97      	ldr	r3, [pc, #604]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10d      	bne.n	8008186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800816a:	4b94      	ldr	r3, [pc, #592]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	4a93      	ldr	r2, [pc, #588]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008174:	61d3      	str	r3, [r2, #28]
 8008176:	4b91      	ldr	r3, [pc, #580]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817e:	60bb      	str	r3, [r7, #8]
 8008180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008186:	4b8e      	ldr	r3, [pc, #568]	; (80083c0 <HAL_RCC_OscConfig+0x4f8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d118      	bne.n	80081c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008192:	4b8b      	ldr	r3, [pc, #556]	; (80083c0 <HAL_RCC_OscConfig+0x4f8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a8a      	ldr	r2, [pc, #552]	; (80083c0 <HAL_RCC_OscConfig+0x4f8>)
 8008198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800819c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800819e:	f7fe fa57 	bl	8006650 <HAL_GetTick>
 80081a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081a4:	e008      	b.n	80081b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081a6:	f7fe fa53 	bl	8006650 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b64      	cmp	r3, #100	; 0x64
 80081b2:	d901      	bls.n	80081b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e0fd      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081b8:	4b81      	ldr	r3, [pc, #516]	; (80083c0 <HAL_RCC_OscConfig+0x4f8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f0      	beq.n	80081a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d106      	bne.n	80081da <HAL_RCC_OscConfig+0x312>
 80081cc:	4b7b      	ldr	r3, [pc, #492]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	4a7a      	ldr	r2, [pc, #488]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80081d2:	f043 0301 	orr.w	r3, r3, #1
 80081d6:	6213      	str	r3, [r2, #32]
 80081d8:	e02d      	b.n	8008236 <HAL_RCC_OscConfig+0x36e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10c      	bne.n	80081fc <HAL_RCC_OscConfig+0x334>
 80081e2:	4b76      	ldr	r3, [pc, #472]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	4a75      	ldr	r2, [pc, #468]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	6213      	str	r3, [r2, #32]
 80081ee:	4b73      	ldr	r3, [pc, #460]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	4a72      	ldr	r2, [pc, #456]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80081f4:	f023 0304 	bic.w	r3, r3, #4
 80081f8:	6213      	str	r3, [r2, #32]
 80081fa:	e01c      	b.n	8008236 <HAL_RCC_OscConfig+0x36e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b05      	cmp	r3, #5
 8008202:	d10c      	bne.n	800821e <HAL_RCC_OscConfig+0x356>
 8008204:	4b6d      	ldr	r3, [pc, #436]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	4a6c      	ldr	r2, [pc, #432]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800820a:	f043 0304 	orr.w	r3, r3, #4
 800820e:	6213      	str	r3, [r2, #32]
 8008210:	4b6a      	ldr	r3, [pc, #424]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	4a69      	ldr	r2, [pc, #420]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	6213      	str	r3, [r2, #32]
 800821c:	e00b      	b.n	8008236 <HAL_RCC_OscConfig+0x36e>
 800821e:	4b67      	ldr	r3, [pc, #412]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	4a66      	ldr	r2, [pc, #408]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	6213      	str	r3, [r2, #32]
 800822a:	4b64      	ldr	r3, [pc, #400]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	4a63      	ldr	r2, [pc, #396]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008230:	f023 0304 	bic.w	r3, r3, #4
 8008234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d015      	beq.n	800826a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800823e:	f7fe fa07 	bl	8006650 <HAL_GetTick>
 8008242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008244:	e00a      	b.n	800825c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008246:	f7fe fa03 	bl	8006650 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	f241 3288 	movw	r2, #5000	; 0x1388
 8008254:	4293      	cmp	r3, r2
 8008256:	d901      	bls.n	800825c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e0ab      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800825c:	4b57      	ldr	r3, [pc, #348]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0ee      	beq.n	8008246 <HAL_RCC_OscConfig+0x37e>
 8008268:	e014      	b.n	8008294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800826a:	f7fe f9f1 	bl	8006650 <HAL_GetTick>
 800826e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008270:	e00a      	b.n	8008288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008272:	f7fe f9ed 	bl	8006650 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008280:	4293      	cmp	r3, r2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e095      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008288:	4b4c      	ldr	r3, [pc, #304]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1ee      	bne.n	8008272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d105      	bne.n	80082a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800829a:	4b48      	ldr	r3, [pc, #288]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	4a47      	ldr	r2, [pc, #284]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80082a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 8081 	beq.w	80083b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082b0:	4b42      	ldr	r3, [pc, #264]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f003 030c 	and.w	r3, r3, #12
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d061      	beq.n	8008380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d146      	bne.n	8008352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c4:	4b3f      	ldr	r3, [pc, #252]	; (80083c4 <HAL_RCC_OscConfig+0x4fc>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ca:	f7fe f9c1 	bl	8006650 <HAL_GetTick>
 80082ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082d2:	f7fe f9bd 	bl	8006650 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e067      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082e4:	4b35      	ldr	r3, [pc, #212]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1f0      	bne.n	80082d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f8:	d108      	bne.n	800830c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80082fa:	4b30      	ldr	r3, [pc, #192]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	492d      	ldr	r1, [pc, #180]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008308:	4313      	orrs	r3, r2
 800830a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800830c:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a19      	ldr	r1, [r3, #32]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	430b      	orrs	r3, r1
 800831e:	4927      	ldr	r1, [pc, #156]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008320:	4313      	orrs	r3, r2
 8008322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008324:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <HAL_RCC_OscConfig+0x4fc>)
 8008326:	2201      	movs	r2, #1
 8008328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800832a:	f7fe f991 	bl	8006650 <HAL_GetTick>
 800832e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008330:	e008      	b.n	8008344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008332:	f7fe f98d 	bl	8006650 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e037      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008344:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d0f0      	beq.n	8008332 <HAL_RCC_OscConfig+0x46a>
 8008350:	e02f      	b.n	80083b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008352:	4b1c      	ldr	r3, [pc, #112]	; (80083c4 <HAL_RCC_OscConfig+0x4fc>)
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008358:	f7fe f97a 	bl	8006650 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008360:	f7fe f976 	bl	8006650 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e020      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f0      	bne.n	8008360 <HAL_RCC_OscConfig+0x498>
 800837e:	e018      	b.n	80083b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e013      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800838c:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <HAL_RCC_OscConfig+0x4f4>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	429a      	cmp	r2, r3
 800839e:	d106      	bne.n	80083ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d001      	beq.n	80083b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	40021000 	.word	0x40021000
 80083c0:	40007000 	.word	0x40007000
 80083c4:	42420060 	.word	0x42420060

080083c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0d0      	b.n	800857e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083dc:	4b6a      	ldr	r3, [pc, #424]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0307 	and.w	r3, r3, #7
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d910      	bls.n	800840c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ea:	4b67      	ldr	r3, [pc, #412]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f023 0207 	bic.w	r2, r3, #7
 80083f2:	4965      	ldr	r1, [pc, #404]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083fa:	4b63      	ldr	r3, [pc, #396]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d001      	beq.n	800840c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e0b8      	b.n	800857e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d020      	beq.n	800845a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008424:	4b59      	ldr	r3, [pc, #356]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4a58      	ldr	r2, [pc, #352]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 800842a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800842e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800843c:	4b53      	ldr	r3, [pc, #332]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	4a52      	ldr	r2, [pc, #328]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008448:	4b50      	ldr	r3, [pc, #320]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	494d      	ldr	r1, [pc, #308]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008456:	4313      	orrs	r3, r2
 8008458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d040      	beq.n	80084e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d107      	bne.n	800847e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800846e:	4b47      	ldr	r3, [pc, #284]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d115      	bne.n	80084a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e07f      	b.n	800857e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d107      	bne.n	8008496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008486:	4b41      	ldr	r3, [pc, #260]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e073      	b.n	800857e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008496:	4b3d      	ldr	r3, [pc, #244]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e06b      	b.n	800857e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084a6:	4b39      	ldr	r3, [pc, #228]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f023 0203 	bic.w	r2, r3, #3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	4936      	ldr	r1, [pc, #216]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084b8:	f7fe f8ca 	bl	8006650 <HAL_GetTick>
 80084bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084be:	e00a      	b.n	80084d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084c0:	f7fe f8c6 	bl	8006650 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e053      	b.n	800857e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d6:	4b2d      	ldr	r3, [pc, #180]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f003 020c 	and.w	r2, r3, #12
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d1eb      	bne.n	80084c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084e8:	4b27      	ldr	r3, [pc, #156]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0307 	and.w	r3, r3, #7
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d210      	bcs.n	8008518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084f6:	4b24      	ldr	r3, [pc, #144]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f023 0207 	bic.w	r2, r3, #7
 80084fe:	4922      	ldr	r1, [pc, #136]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	4313      	orrs	r3, r2
 8008504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008506:	4b20      	ldr	r3, [pc, #128]	; (8008588 <HAL_RCC_ClockConfig+0x1c0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d001      	beq.n	8008518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e032      	b.n	800857e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d008      	beq.n	8008536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008524:	4b19      	ldr	r3, [pc, #100]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	4916      	ldr	r1, [pc, #88]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008532:	4313      	orrs	r3, r2
 8008534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	490e      	ldr	r1, [pc, #56]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 8008552:	4313      	orrs	r3, r2
 8008554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008556:	f000 f821 	bl	800859c <HAL_RCC_GetSysClockFreq>
 800855a:	4602      	mov	r2, r0
 800855c:	4b0b      	ldr	r3, [pc, #44]	; (800858c <HAL_RCC_ClockConfig+0x1c4>)
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	091b      	lsrs	r3, r3, #4
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	490a      	ldr	r1, [pc, #40]	; (8008590 <HAL_RCC_ClockConfig+0x1c8>)
 8008568:	5ccb      	ldrb	r3, [r1, r3]
 800856a:	fa22 f303 	lsr.w	r3, r2, r3
 800856e:	4a09      	ldr	r2, [pc, #36]	; (8008594 <HAL_RCC_ClockConfig+0x1cc>)
 8008570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <HAL_RCC_ClockConfig+0x1d0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe f828 	bl	80065cc <HAL_InitTick>

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40022000 	.word	0x40022000
 800858c:	40021000 	.word	0x40021000
 8008590:	0800fc6c 	.word	0x0800fc6c
 8008594:	200001c4 	.word	0x200001c4
 8008598:	200001c8 	.word	0x200001c8

0800859c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800859c:	b490      	push	{r4, r7}
 800859e:	b08a      	sub	sp, #40	; 0x28
 80085a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80085a2:	4b2a      	ldr	r3, [pc, #168]	; (800864c <HAL_RCC_GetSysClockFreq+0xb0>)
 80085a4:	1d3c      	adds	r4, r7, #4
 80085a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80085ac:	f240 2301 	movw	r3, #513	; 0x201
 80085b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	2300      	movs	r3, #0
 80085b8:	61bb      	str	r3, [r7, #24]
 80085ba:	2300      	movs	r3, #0
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80085c6:	4b22      	ldr	r3, [pc, #136]	; (8008650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 030c 	and.w	r3, r3, #12
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d002      	beq.n	80085dc <HAL_RCC_GetSysClockFreq+0x40>
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d003      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0x46>
 80085da:	e02d      	b.n	8008638 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80085dc:	4b1d      	ldr	r3, [pc, #116]	; (8008654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085de:	623b      	str	r3, [r7, #32]
      break;
 80085e0:	e02d      	b.n	800863e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	0c9b      	lsrs	r3, r3, #18
 80085e6:	f003 030f 	and.w	r3, r3, #15
 80085ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085ee:	4413      	add	r3, r2
 80085f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80085f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d013      	beq.n	8008628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008600:	4b13      	ldr	r3, [pc, #76]	; (8008650 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	0c5b      	lsrs	r3, r3, #17
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800860e:	4413      	add	r3, r2
 8008610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	4a0e      	ldr	r2, [pc, #56]	; (8008654 <HAL_RCC_GetSysClockFreq+0xb8>)
 800861a:	fb02 f203 	mul.w	r2, r2, r3
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	fbb2 f3f3 	udiv	r3, r2, r3
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
 8008626:	e004      	b.n	8008632 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	4a0b      	ldr	r2, [pc, #44]	; (8008658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800862c:	fb02 f303 	mul.w	r3, r2, r3
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	623b      	str	r3, [r7, #32]
      break;
 8008636:	e002      	b.n	800863e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008638:	4b06      	ldr	r3, [pc, #24]	; (8008654 <HAL_RCC_GetSysClockFreq+0xb8>)
 800863a:	623b      	str	r3, [r7, #32]
      break;
 800863c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800863e:	6a3b      	ldr	r3, [r7, #32]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3728      	adds	r7, #40	; 0x28
 8008644:	46bd      	mov	sp, r7
 8008646:	bc90      	pop	{r4, r7}
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	0800f814 	.word	0x0800f814
 8008650:	40021000 	.word	0x40021000
 8008654:	007a1200 	.word	0x007a1200
 8008658:	003d0900 	.word	0x003d0900

0800865c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008660:	4b02      	ldr	r3, [pc, #8]	; (800866c <HAL_RCC_GetHCLKFreq+0x10>)
 8008662:	681b      	ldr	r3, [r3, #0]
}
 8008664:	4618      	mov	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr
 800866c:	200001c4 	.word	0x200001c4

08008670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008674:	f7ff fff2 	bl	800865c <HAL_RCC_GetHCLKFreq>
 8008678:	4602      	mov	r2, r0
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	0a1b      	lsrs	r3, r3, #8
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	4903      	ldr	r1, [pc, #12]	; (8008694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008686:	5ccb      	ldrb	r3, [r1, r3]
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40021000 	.word	0x40021000
 8008694:	0800fc7c 	.word	0x0800fc7c

08008698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800869c:	f7ff ffde 	bl	800865c <HAL_RCC_GetHCLKFreq>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	0adb      	lsrs	r3, r3, #11
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	4903      	ldr	r1, [pc, #12]	; (80086bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80086ae:	5ccb      	ldrb	r3, [r1, r3]
 80086b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40021000 	.word	0x40021000
 80086bc:	0800fc7c 	.word	0x0800fc7c

080086c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80086c8:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <RCC_Delay+0x34>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <RCC_Delay+0x38>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	0a5b      	lsrs	r3, r3, #9
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	fb02 f303 	mul.w	r3, r2, r3
 80086da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80086dc:	bf00      	nop
  }
  while (Delay --);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	1e5a      	subs	r2, r3, #1
 80086e2:	60fa      	str	r2, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f9      	bne.n	80086dc <RCC_Delay+0x1c>
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr
 80086f4:	200001c4 	.word	0x200001c4
 80086f8:	10624dd3 	.word	0x10624dd3

080086fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e076      	b.n	80087fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d108      	bne.n	8008728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800871e:	d009      	beq.n	8008734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	61da      	str	r2, [r3, #28]
 8008726:	e005      	b.n	8008734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fd fdc8 	bl	80062e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800876a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	431a      	orrs	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b8:	ea42 0103 	orr.w	r1, r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	0c1a      	lsrs	r2, r3, #16
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f002 0204 	and.w	r2, r2, #4
 80087da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69da      	ldr	r2, [r3, #28]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	4613      	mov	r3, r2
 8008812:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800881e:	2b01      	cmp	r3, #1
 8008820:	d101      	bne.n	8008826 <HAL_SPI_Transmit+0x22>
 8008822:	2302      	movs	r3, #2
 8008824:	e126      	b.n	8008a74 <HAL_SPI_Transmit+0x270>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800882e:	f7fd ff0f 	bl	8006650 <HAL_GetTick>
 8008832:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	d002      	beq.n	800884a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008844:	2302      	movs	r3, #2
 8008846:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008848:	e10b      	b.n	8008a62 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <HAL_SPI_Transmit+0x52>
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d102      	bne.n	800885c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800885a:	e102      	b.n	8008a62 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2203      	movs	r2, #3
 8008860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	88fa      	ldrh	r2, [r7, #6]
 8008874:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	88fa      	ldrh	r2, [r7, #6]
 800887a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a2:	d10f      	bne.n	80088c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d007      	beq.n	80088e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ea:	d14b      	bne.n	8008984 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <HAL_SPI_Transmit+0xf6>
 80088f4:	8afb      	ldrh	r3, [r7, #22]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d13e      	bne.n	8008978 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	881a      	ldrh	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	1c9a      	adds	r2, r3, #2
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800891e:	e02b      	b.n	8008978 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b02      	cmp	r3, #2
 800892c:	d112      	bne.n	8008954 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	881a      	ldrh	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	1c9a      	adds	r2, r3, #2
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	86da      	strh	r2, [r3, #54]	; 0x36
 8008952:	e011      	b.n	8008978 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008954:	f7fd fe7c 	bl	8006650 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d803      	bhi.n	800896c <HAL_SPI_Transmit+0x168>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800896a:	d102      	bne.n	8008972 <HAL_SPI_Transmit+0x16e>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008976:	e074      	b.n	8008a62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1ce      	bne.n	8008920 <HAL_SPI_Transmit+0x11c>
 8008982:	e04c      	b.n	8008a1e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_SPI_Transmit+0x18e>
 800898c:	8afb      	ldrh	r3, [r7, #22]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d140      	bne.n	8008a14 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	330c      	adds	r3, #12
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80089b8:	e02c      	b.n	8008a14 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d113      	bne.n	80089f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	7812      	ldrb	r2, [r2, #0]
 80089d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80089ee:	e011      	b.n	8008a14 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f0:	f7fd fe2e 	bl	8006650 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d803      	bhi.n	8008a08 <HAL_SPI_Transmit+0x204>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a06:	d102      	bne.n	8008a0e <HAL_SPI_Transmit+0x20a>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a12:	e026      	b.n	8008a62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1cd      	bne.n	80089ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fa54 	bl	8008ed0 <SPI_EndRxTxTransaction>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2220      	movs	r2, #32
 8008a32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	613b      	str	r3, [r7, #16]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	613b      	str	r3, [r7, #16]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	77fb      	strb	r3, [r7, #31]
 8008a5e:	e000      	b.n	8008a62 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008a60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3720      	adds	r7, #32
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08c      	sub	sp, #48	; 0x30
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d101      	bne.n	8008aa2 <HAL_SPI_TransmitReceive+0x26>
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	e18a      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x33c>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aaa:	f7fd fdd1 	bl	8006650 <HAL_GetTick>
 8008aae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ac0:	887b      	ldrh	r3, [r7, #2]
 8008ac2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d00f      	beq.n	8008aec <HAL_SPI_TransmitReceive+0x70>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ad2:	d107      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x68>
 8008adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d003      	beq.n	8008aec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008aea:	e15b      	b.n	8008da4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_SPI_TransmitReceive+0x82>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_SPI_TransmitReceive+0x82>
 8008af8:	887b      	ldrh	r3, [r7, #2]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d103      	bne.n	8008b06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b04:	e14e      	b.n	8008da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d003      	beq.n	8008b1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2205      	movs	r2, #5
 8008b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	887a      	ldrh	r2, [r7, #2]
 8008b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	887a      	ldrh	r2, [r7, #2]
 8008b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	887a      	ldrh	r2, [r7, #2]
 8008b3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	887a      	ldrh	r2, [r7, #2]
 8008b42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	d007      	beq.n	8008b6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b76:	d178      	bne.n	8008c6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <HAL_SPI_TransmitReceive+0x10a>
 8008b80:	8b7b      	ldrh	r3, [r7, #26]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d166      	bne.n	8008c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	881a      	ldrh	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	1c9a      	adds	r2, r3, #2
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008baa:	e053      	b.n	8008c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d11b      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x176>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d016      	beq.n	8008bf2 <HAL_SPI_TransmitReceive+0x176>
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d113      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	881a      	ldrh	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	1c9a      	adds	r2, r3, #2
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d119      	bne.n	8008c34 <HAL_SPI_TransmitReceive+0x1b8>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d014      	beq.n	8008c34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	b292      	uxth	r2, r2
 8008c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	1c9a      	adds	r2, r3, #2
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c30:	2301      	movs	r3, #1
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c34:	f7fd fd0c 	bl	8006650 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d807      	bhi.n	8008c54 <HAL_SPI_TransmitReceive+0x1d8>
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c4a:	d003      	beq.n	8008c54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c52:	e0a7      	b.n	8008da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1a6      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x130>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1a1      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x130>
 8008c68:	e07c      	b.n	8008d64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_SPI_TransmitReceive+0x1fc>
 8008c72:	8b7b      	ldrh	r3, [r7, #26]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d16b      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	330c      	adds	r3, #12
 8008c82:	7812      	ldrb	r2, [r2, #0]
 8008c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c9e:	e057      	b.n	8008d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d11c      	bne.n	8008ce8 <HAL_SPI_TransmitReceive+0x26c>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d017      	beq.n	8008ce8 <HAL_SPI_TransmitReceive+0x26c>
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d114      	bne.n	8008ce8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d119      	bne.n	8008d2a <HAL_SPI_TransmitReceive+0x2ae>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d014      	beq.n	8008d2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d26:	2301      	movs	r3, #1
 8008d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d2a:	f7fd fc91 	bl	8006650 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d803      	bhi.n	8008d42 <HAL_SPI_TransmitReceive+0x2c6>
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d40:	d102      	bne.n	8008d48 <HAL_SPI_TransmitReceive+0x2cc>
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d4e:	e029      	b.n	8008da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1a2      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x224>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d19d      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 f8b1 	bl	8008ed0 <SPI_EndRxTxTransaction>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d006      	beq.n	8008d82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008d80:	e010      	b.n	8008da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10b      	bne.n	8008da2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	617b      	str	r3, [r7, #20]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	e000      	b.n	8008da4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008da2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008db4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3730      	adds	r7, #48	; 0x30
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	603b      	str	r3, [r7, #0]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008dd0:	f7fd fc3e 	bl	8006650 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	1a9b      	subs	r3, r3, r2
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4413      	add	r3, r2
 8008dde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008de0:	f7fd fc36 	bl	8006650 <HAL_GetTick>
 8008de4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008de6:	4b39      	ldr	r3, [pc, #228]	; (8008ecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	015b      	lsls	r3, r3, #5
 8008dec:	0d1b      	lsrs	r3, r3, #20
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008df6:	e054      	b.n	8008ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dfe:	d050      	beq.n	8008ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e00:	f7fd fc26 	bl	8006650 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d902      	bls.n	8008e16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d13d      	bne.n	8008e92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e2e:	d111      	bne.n	8008e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e38:	d004      	beq.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e42:	d107      	bne.n	8008e54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e5c:	d10f      	bne.n	8008e7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e017      	b.n	8008ec2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	bf0c      	ite	eq
 8008eb2:	2301      	moveq	r3, #1
 8008eb4:	2300      	movne	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	461a      	mov	r2, r3
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d19b      	bne.n	8008df8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3720      	adds	r7, #32
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	200001c4 	.word	0x200001c4

08008ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af02      	add	r7, sp, #8
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7ff ff6a 	bl	8008dc0 <SPI_WaitFlagStateUntilTimeout>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef6:	f043 0220 	orr.w	r2, r3, #32
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e000      	b.n	8008f04 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e041      	b.n	8008fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fd fa20 	bl	8006378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	f000 fa70 	bl	8009430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d001      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e03a      	b.n	800903a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a18      	ldr	r2, [pc, #96]	; (8009044 <HAL_TIM_Base_Start_IT+0x98>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00e      	beq.n	8009004 <HAL_TIM_Base_Start_IT+0x58>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fee:	d009      	beq.n	8009004 <HAL_TIM_Base_Start_IT+0x58>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a14      	ldr	r2, [pc, #80]	; (8009048 <HAL_TIM_Base_Start_IT+0x9c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d004      	beq.n	8009004 <HAL_TIM_Base_Start_IT+0x58>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a13      	ldr	r2, [pc, #76]	; (800904c <HAL_TIM_Base_Start_IT+0xa0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d111      	bne.n	8009028 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b06      	cmp	r3, #6
 8009014:	d010      	beq.n	8009038 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0201 	orr.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009026:	e007      	b.n	8009038 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0201 	orr.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr
 8009044:	40012c00 	.word	0x40012c00
 8009048:	40000400 	.word	0x40000400
 800904c:	40000800 	.word	0x40000800

08009050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b02      	cmp	r3, #2
 8009064:	d122      	bne.n	80090ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b02      	cmp	r3, #2
 8009072:	d11b      	bne.n	80090ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0202 	mvn.w	r2, #2
 800907c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f9b1 	bl	80093fa <HAL_TIM_IC_CaptureCallback>
 8009098:	e005      	b.n	80090a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f9a4 	bl	80093e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9b3 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d122      	bne.n	8009100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d11b      	bne.n	8009100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0204 	mvn.w	r2, #4
 80090d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f987 	bl	80093fa <HAL_TIM_IC_CaptureCallback>
 80090ec:	e005      	b.n	80090fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f97a 	bl	80093e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f989 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b08      	cmp	r3, #8
 800910c:	d122      	bne.n	8009154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b08      	cmp	r3, #8
 800911a:	d11b      	bne.n	8009154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f06f 0208 	mvn.w	r2, #8
 8009124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2204      	movs	r2, #4
 800912a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f95d 	bl	80093fa <HAL_TIM_IC_CaptureCallback>
 8009140:	e005      	b.n	800914e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f950 	bl	80093e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f95f 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b10      	cmp	r3, #16
 8009160:	d122      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b10      	cmp	r3, #16
 800916e:	d11b      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f06f 0210 	mvn.w	r2, #16
 8009178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2208      	movs	r2, #8
 800917e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f933 	bl	80093fa <HAL_TIM_IC_CaptureCallback>
 8009194:	e005      	b.n	80091a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f926 	bl	80093e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f935 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d10e      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d107      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f06f 0201 	mvn.w	r2, #1
 80091cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7fc f882 	bl	80052d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091de:	2b80      	cmp	r3, #128	; 0x80
 80091e0:	d10e      	bne.n	8009200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ec:	2b80      	cmp	r3, #128	; 0x80
 80091ee:	d107      	bne.n	8009200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa77 	bl	80096ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009218:	2b40      	cmp	r3, #64	; 0x40
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8f9 	bl	800941e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b20      	cmp	r3, #32
 8009238:	d10e      	bne.n	8009258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b20      	cmp	r3, #32
 8009246:	d107      	bne.n	8009258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0220 	mvn.w	r2, #32
 8009250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fa42 	bl	80096dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_TIM_ConfigClockSource+0x18>
 8009274:	2302      	movs	r3, #2
 8009276:	e0b3      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x180>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800929e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b0:	d03e      	beq.n	8009330 <HAL_TIM_ConfigClockSource+0xd0>
 80092b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b6:	f200 8087 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092be:	f000 8085 	beq.w	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c6:	d87f      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092c8:	2b70      	cmp	r3, #112	; 0x70
 80092ca:	d01a      	beq.n	8009302 <HAL_TIM_ConfigClockSource+0xa2>
 80092cc:	2b70      	cmp	r3, #112	; 0x70
 80092ce:	d87b      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092d0:	2b60      	cmp	r3, #96	; 0x60
 80092d2:	d050      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x116>
 80092d4:	2b60      	cmp	r3, #96	; 0x60
 80092d6:	d877      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092d8:	2b50      	cmp	r3, #80	; 0x50
 80092da:	d03c      	beq.n	8009356 <HAL_TIM_ConfigClockSource+0xf6>
 80092dc:	2b50      	cmp	r3, #80	; 0x50
 80092de:	d873      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092e0:	2b40      	cmp	r3, #64	; 0x40
 80092e2:	d058      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x136>
 80092e4:	2b40      	cmp	r3, #64	; 0x40
 80092e6:	d86f      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092e8:	2b30      	cmp	r3, #48	; 0x30
 80092ea:	d064      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x156>
 80092ec:	2b30      	cmp	r3, #48	; 0x30
 80092ee:	d86b      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	d060      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x156>
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d867      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d05c      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x156>
 80092fc:	2b10      	cmp	r3, #16
 80092fe:	d05a      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009300:	e062      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6899      	ldr	r1, [r3, #8]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f000 f966 	bl	80095e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009324:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	609a      	str	r2, [r3, #8]
      break;
 800932e:	e04e      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6899      	ldr	r1, [r3, #8]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f000 f94f 	bl	80095e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009352:	609a      	str	r2, [r3, #8]
      break;
 8009354:	e03b      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	6859      	ldr	r1, [r3, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	461a      	mov	r2, r3
 8009364:	f000 f8c6 	bl	80094f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2150      	movs	r1, #80	; 0x50
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f91d 	bl	80095ae <TIM_ITRx_SetConfig>
      break;
 8009374:	e02b      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6859      	ldr	r1, [r3, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	461a      	mov	r2, r3
 8009384:	f000 f8e4 	bl	8009550 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2160      	movs	r1, #96	; 0x60
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f90d 	bl	80095ae <TIM_ITRx_SetConfig>
      break;
 8009394:	e01b      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	6859      	ldr	r1, [r3, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f000 f8a6 	bl	80094f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2140      	movs	r1, #64	; 0x40
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f8fd 	bl	80095ae <TIM_ITRx_SetConfig>
      break;
 80093b4:	e00b      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4619      	mov	r1, r3
 80093c0:	4610      	mov	r0, r2
 80093c2:	f000 f8f4 	bl	80095ae <TIM_ITRx_SetConfig>
        break;
 80093c6:	e002      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80093c8:	bf00      	nop
 80093ca:	e000      	b.n	80093ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80093cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009402:	bf00      	nop
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr

0800940c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	bc80      	pop	{r7}
 800941c:	4770      	bx	lr

0800941e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	bc80      	pop	{r7}
 800942e:	4770      	bx	lr

08009430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a29      	ldr	r2, [pc, #164]	; (80094e8 <TIM_Base_SetConfig+0xb8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00b      	beq.n	8009460 <TIM_Base_SetConfig+0x30>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800944e:	d007      	beq.n	8009460 <TIM_Base_SetConfig+0x30>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a26      	ldr	r2, [pc, #152]	; (80094ec <TIM_Base_SetConfig+0xbc>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d003      	beq.n	8009460 <TIM_Base_SetConfig+0x30>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a25      	ldr	r2, [pc, #148]	; (80094f0 <TIM_Base_SetConfig+0xc0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d108      	bne.n	8009472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	4313      	orrs	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a1c      	ldr	r2, [pc, #112]	; (80094e8 <TIM_Base_SetConfig+0xb8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00b      	beq.n	8009492 <TIM_Base_SetConfig+0x62>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009480:	d007      	beq.n	8009492 <TIM_Base_SetConfig+0x62>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a19      	ldr	r2, [pc, #100]	; (80094ec <TIM_Base_SetConfig+0xbc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_Base_SetConfig+0x62>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a18      	ldr	r2, [pc, #96]	; (80094f0 <TIM_Base_SetConfig+0xc0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d108      	bne.n	80094a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a07      	ldr	r2, [pc, #28]	; (80094e8 <TIM_Base_SetConfig+0xb8>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d103      	bne.n	80094d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	691a      	ldr	r2, [r3, #16]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	615a      	str	r2, [r3, #20]
}
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr
 80094e8:	40012c00 	.word	0x40012c00
 80094ec:	40000400 	.word	0x40000400
 80094f0:	40000800 	.word	0x40000800

080094f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	f023 0201 	bic.w	r2, r3, #1
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800951e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	4313      	orrs	r3, r2
 8009528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f023 030a 	bic.w	r3, r3, #10
 8009530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4313      	orrs	r3, r2
 8009538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	621a      	str	r2, [r3, #32]
}
 8009546:	bf00      	nop
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	f023 0210 	bic.w	r2, r3, #16
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800957a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	031b      	lsls	r3, r3, #12
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800958c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	621a      	str	r2, [r3, #32]
}
 80095a4:	bf00      	nop
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr

080095ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	f043 0307 	orr.w	r3, r3, #7
 80095d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	609a      	str	r2, [r3, #8]
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr

080095e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b087      	sub	sp, #28
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	60b9      	str	r1, [r7, #8]
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	021a      	lsls	r2, r3, #8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	431a      	orrs	r2, r3
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4313      	orrs	r3, r2
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	609a      	str	r2, [r3, #8]
}
 8009616:	bf00      	nop
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	bc80      	pop	{r7}
 800961e:	4770      	bx	lr

08009620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009634:	2302      	movs	r3, #2
 8009636:	e046      	b.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a16      	ldr	r2, [pc, #88]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d00e      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009684:	d009      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a12      	ldr	r2, [pc, #72]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d004      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a10      	ldr	r2, [pc, #64]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d10c      	bne.n	80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40000400 	.word	0x40000400
 80096d8:	40000800 	.word	0x40000800

080096dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr

080096ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr

08009700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e03f      	b.n	8009792 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7fc fe68 	bl	80063fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2224      	movs	r2, #36	; 0x24
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f829 	bl	800979c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	695a      	ldr	r2, [r3, #20]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	431a      	orrs	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80097d6:	f023 030c 	bic.w	r3, r3, #12
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	68b9      	ldr	r1, [r7, #8]
 80097e0:	430b      	orrs	r3, r1
 80097e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a2c      	ldr	r2, [pc, #176]	; (80098b0 <UART_SetConfig+0x114>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d103      	bne.n	800980c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009804:	f7fe ff48 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	e002      	b.n	8009812 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800980c:	f7fe ff30 	bl	8008670 <HAL_RCC_GetPCLK1Freq>
 8009810:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009a      	lsls	r2, r3, #2
 800981c:	441a      	add	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	fbb2 f3f3 	udiv	r3, r2, r3
 8009828:	4a22      	ldr	r2, [pc, #136]	; (80098b4 <UART_SetConfig+0x118>)
 800982a:	fba2 2303 	umull	r2, r3, r2, r3
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	0119      	lsls	r1, r3, #4
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009a      	lsls	r2, r3, #2
 800983c:	441a      	add	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	fbb2 f2f3 	udiv	r2, r2, r3
 8009848:	4b1a      	ldr	r3, [pc, #104]	; (80098b4 <UART_SetConfig+0x118>)
 800984a:	fba3 0302 	umull	r0, r3, r3, r2
 800984e:	095b      	lsrs	r3, r3, #5
 8009850:	2064      	movs	r0, #100	; 0x64
 8009852:	fb00 f303 	mul.w	r3, r0, r3
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	011b      	lsls	r3, r3, #4
 800985a:	3332      	adds	r3, #50	; 0x32
 800985c:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <UART_SetConfig+0x118>)
 800985e:	fba2 2303 	umull	r2, r3, r2, r3
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009868:	4419      	add	r1, r3
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009a      	lsls	r2, r3, #2
 8009874:	441a      	add	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009880:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <UART_SetConfig+0x118>)
 8009882:	fba3 0302 	umull	r0, r3, r3, r2
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	2064      	movs	r0, #100	; 0x64
 800988a:	fb00 f303 	mul.w	r3, r0, r3
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	3332      	adds	r3, #50	; 0x32
 8009894:	4a07      	ldr	r2, [pc, #28]	; (80098b4 <UART_SetConfig+0x118>)
 8009896:	fba2 2303 	umull	r2, r3, r2, r3
 800989a:	095b      	lsrs	r3, r3, #5
 800989c:	f003 020f 	and.w	r2, r3, #15
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	440a      	add	r2, r1
 80098a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80098a8:	bf00      	nop
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40013800 	.word	0x40013800
 80098b4:	51eb851f 	.word	0x51eb851f

080098b8 <Show_Passkey>:

// Load Local libraries
#include "ble_ui_pages.h"
#include "design_elements.h"

void Show_Passkey(void) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af02      	add	r7, sp, #8

	start_timeout_passkey = 1;
 80098be:	4b22      	ldr	r3, [pc, #136]	; (8009948 <Show_Passkey+0x90>)
 80098c0:	2201      	movs	r2, #1
 80098c2:	601a      	str	r2, [r3, #0]
	initialize_graphics_controller();
 80098c4:	f005 fc98 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 80098c8:	f005 f994 	bl	800ebf4 <background_color_black>

	clearscreen();
 80098cc:	f005 fcfa 	bl	800f2c4 <clearscreen>
	show_small_yatri_logo();
 80098d0:	f003 fa28 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 80098d4:	f005 fb28 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 80098d8:	f005 f966 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 40, 1, OPT_CENTERX, "Passkey to pair with YatriHub");
 80098dc:	4b1b      	ldr	r3, [pc, #108]	; (800994c <Show_Passkey+0x94>)
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <Show_Passkey+0x98>)
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	2301      	movs	r3, #1
 80098ec:	2228      	movs	r2, #40	; 0x28
 80098ee:	21f0      	movs	r1, #240	; 0xf0
 80098f0:	f004 faf3 	bl	800deda <Gpu_CoCmd_Text>

	Barlow_semibold_48();
 80098f4:	f005 fc44 	bl	800f180 <Barlow_semibold_48>
	load_color_turquoise();
 80098f8:	f005 f8e4 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 88, 1, OPT_CENTERX, dash_passkey);
 80098fc:	4b13      	ldr	r3, [pc, #76]	; (800994c <Show_Passkey+0x94>)
 80098fe:	6818      	ldr	r0, [r3, #0]
 8009900:	4b14      	ldr	r3, [pc, #80]	; (8009954 <Show_Passkey+0x9c>)
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	2301      	movs	r3, #1
 800990c:	2258      	movs	r2, #88	; 0x58
 800990e:	21f0      	movs	r1, #240	; 0xf0
 8009910:	f004 fae3 	bl	800deda <Gpu_CoCmd_Text>

	Barlow_bold_32();
 8009914:	f005 fb08 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009918:	f005 f946 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 180, 1, OPT_CENTERX, dash_passkey_timeout);
 800991c:	4b0b      	ldr	r3, [pc, #44]	; (800994c <Show_Passkey+0x94>)
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <Show_Passkey+0xa0>)
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	2301      	movs	r3, #1
 800992c:	22b4      	movs	r2, #180	; 0xb4
 800992e:	21f0      	movs	r1, #240	; 0xf0
 8009930:	f004 fad3 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 8009934:	4b09      	ldr	r3, [pc, #36]	; (800995c <Show_Passkey+0xa4>)
 8009936:	2201      	movs	r2, #1
 8009938:	601a      	str	r2, [r3, #0]

	launch_dash();
 800993a:	f005 fcb7 	bl	800f2ac <launch_dash>
	clear_buffer();
 800993e:	f005 fccf 	bl	800f2e0 <clear_buffer>
}
 8009942:	bf00      	nop
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000578 	.word	0x20000578
 800994c:	20000bc8 	.word	0x20000bc8
 8009950:	0800f824 	.word	0x0800f824
 8009954:	2000058c 	.word	0x2000058c
 8009958:	200005ac 	.word	0x200005ac
 800995c:	200009a0 	.word	0x200009a0

08009960 <Pairing_Successful>:

void Pairing_Successful(void) {
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009966:	f005 fc47 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800996a:	f005 f943 	bl	800ebf4 <background_color_black>

	clearscreen();
 800996e:	f005 fca9 	bl	800f2c4 <clearscreen>
	show_small_yatri_logo();
 8009972:	f003 f9d7 	bl	800cd24 <show_small_yatri_logo>

	Barlow_extrabold_40();
 8009976:	f005 fb4f 	bl	800f018 <Barlow_extrabold_40>
	load_color_white();
 800997a:	f005 f915 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 85, 1, OPT_CENTERX, "Pairing");
 800997e:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <Pairing_Successful+0x68>)
 8009980:	6818      	ldr	r0, [r3, #0]
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <Pairing_Successful+0x6c>)
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	2301      	movs	r3, #1
 800998e:	2255      	movs	r2, #85	; 0x55
 8009990:	21f0      	movs	r1, #240	; 0xf0
 8009992:	f004 faa2 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009996:	f005 f895 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 140, 1, OPT_CENTERX, "Successful");
 800999a:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <Pairing_Successful+0x68>)
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <Pairing_Successful+0x70>)
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	2301      	movs	r3, #1
 80099aa:	228c      	movs	r2, #140	; 0x8c
 80099ac:	21f0      	movs	r1, #240	; 0xf0
 80099ae:	f004 fa94 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 80099b2:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <Pairing_Successful+0x74>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]

	launch_dash();
 80099b8:	f005 fc78 	bl	800f2ac <launch_dash>
	clear_buffer();
 80099bc:	f005 fc90 	bl	800f2e0 <clear_buffer>
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000bc8 	.word	0x20000bc8
 80099cc:	0800f844 	.word	0x0800f844
 80099d0:	0800f84c 	.word	0x0800f84c
 80099d4:	200009a0 	.word	0x200009a0

080099d8 <Pairing_Failed>:

void Pairing_Failed(void) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 80099de:	f005 fc0b 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 80099e2:	f005 f907 	bl	800ebf4 <background_color_black>

	clearscreen();
 80099e6:	f005 fc6d 	bl	800f2c4 <clearscreen>
	show_small_yatri_logo();
 80099ea:	f003 f99b 	bl	800cd24 <show_small_yatri_logo>

	Barlow_extrabold_40();
 80099ee:	f005 fb13 	bl	800f018 <Barlow_extrabold_40>
	load_color_white();
 80099f2:	f005 f8d9 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 175, 105, 1, OPT_CENTERX, "Pairing");
 80099f6:	4b12      	ldr	r3, [pc, #72]	; (8009a40 <Pairing_Failed+0x68>)
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <Pairing_Failed+0x6c>)
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2301      	movs	r3, #1
 8009a06:	2269      	movs	r2, #105	; 0x69
 8009a08:	21af      	movs	r1, #175	; 0xaf
 8009a0a:	f004 fa66 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009a0e:	f005 f859 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 300, 105, 1, OPT_CENTERX, "Failed");
 8009a12:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <Pairing_Failed+0x68>)
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <Pairing_Failed+0x70>)
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	2301      	movs	r3, #1
 8009a22:	2269      	movs	r2, #105	; 0x69
 8009a24:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009a28:	f004 fa57 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 8009a2c:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <Pairing_Failed+0x74>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009a32:	f005 fc3b 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009a36:	f005 fc53 	bl	800f2e0 <clear_buffer>
}
 8009a3a:	bf00      	nop
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000bc8 	.word	0x20000bc8
 8009a44:	0800f844 	.word	0x0800f844
 8009a48:	0800f858 	.word	0x0800f858
 8009a4c:	200009a0 	.word	0x200009a0

08009a50 <Wait_For_Verification>:

// Load Local libraries
#include "charging_ui_pages.h"
#include "design_elements.h"

void Wait_For_Verification(void) {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009a56:	f005 fbcf 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009a5a:	f005 f8cb 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009a5e:	f005 fc31 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009a62:	f003 f95f 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009a66:	f005 fa5f 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009a6a:	f005 f89d 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 85, 1, OPT_CENTERX, "Please Disconnect Until");
 8009a6e:	4b14      	ldr	r3, [pc, #80]	; (8009ac0 <Wait_For_Verification+0x70>)
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	4b14      	ldr	r3, [pc, #80]	; (8009ac4 <Wait_For_Verification+0x74>)
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	2255      	movs	r2, #85	; 0x55
 8009a80:	21f0      	movs	r1, #240	; 0xf0
 8009a82:	f004 fa2a 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009a86:	f005 f81d 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 1, 140, 1, 0, "Previous Transaction Completes");
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ac0 <Wait_For_Verification+0x70>)
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ac8 <Wait_For_Verification+0x78>)
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	2300      	movs	r3, #0
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	2301      	movs	r3, #1
 8009a98:	228c      	movs	r2, #140	; 0x8c
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	f004 fa1d 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_exclamation(465, 140);
 8009aa0:	218c      	movs	r1, #140	; 0x8c
 8009aa2:	f240 10d1 	movw	r0, #465	; 0x1d1
 8009aa6:	f001 fbf7 	bl	800b298 <dynamic_exclamation>

	UI_lastState = 1;
 8009aaa:	4b08      	ldr	r3, [pc, #32]	; (8009acc <Wait_For_Verification+0x7c>)
 8009aac:	2201      	movs	r2, #1
 8009aae:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009ab0:	f005 fbfc 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009ab4:	f005 fc14 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(10);
}
 8009ab8:	bf00      	nop
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000bc8 	.word	0x20000bc8
 8009ac4:	0800f860 	.word	0x0800f860
 8009ac8:	0800f878 	.word	0x0800f878
 8009acc:	200009a0 	.word	0x200009a0

08009ad0 <Click_To_Disconnect_Charger>:

void Click_To_Disconnect_Charger(void) {
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af02      	add	r7, sp, #8

	ui_mode = DARK_MODE;
 8009ad6:	4b23      	ldr	r3, [pc, #140]	; (8009b64 <Click_To_Disconnect_Charger+0x94>)
 8009ad8:	2201      	movs	r2, #1
 8009ada:	701a      	strb	r2, [r3, #0]
	set_ui_mode();
 8009adc:	f005 f96a 	bl	800edb4 <set_ui_mode>
	App_Common_Init(&host);
 8009ae0:	4821      	ldr	r0, [pc, #132]	; (8009b68 <Click_To_Disconnect_Charger+0x98>)
 8009ae2:	f004 f8b5 	bl	800dc50 <App_Common_Init>

	initialize_graphics_controller();
 8009ae6:	f005 fb87 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009aea:	f005 f883 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009aee:	f005 fbe9 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009af2:	f003 f917 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009af6:	f005 fa17 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009afa:	f005 f855 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 85, 1, OPT_CENTERX, "Please Disconnect");
 8009afe:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <Click_To_Disconnect_Charger+0x9c>)
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	4b1b      	ldr	r3, [pc, #108]	; (8009b70 <Click_To_Disconnect_Charger+0xa0>)
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	2255      	movs	r2, #85	; 0x55
 8009b10:	21f0      	movs	r1, #240	; 0xf0
 8009b12:	f004 f9e2 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 157, 140, 1, 0, "the");
 8009b16:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <Click_To_Disconnect_Charger+0x9c>)
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	4b16      	ldr	r3, [pc, #88]	; (8009b74 <Click_To_Disconnect_Charger+0xa4>)
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	2301      	movs	r3, #1
 8009b24:	228c      	movs	r2, #140	; 0x8c
 8009b26:	219d      	movs	r1, #157	; 0x9d
 8009b28:	f004 f9d7 	bl	800deda <Gpu_CoCmd_Text>
//	load_color_white();
	dynamic_exclamation(325, 140);
 8009b2c:	218c      	movs	r1, #140	; 0x8c
 8009b2e:	f240 1045 	movw	r0, #325	; 0x145
 8009b32:	f001 fbb1 	bl	800b298 <dynamic_exclamation>

	load_color_turquoise();
 8009b36:	f004 ffc5 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 210, 140, 1, 0, "Charger");
 8009b3a:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <Click_To_Disconnect_Charger+0x9c>)
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <Click_To_Disconnect_Charger+0xa8>)
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	228c      	movs	r2, #140	; 0x8c
 8009b4a:	21d2      	movs	r1, #210	; 0xd2
 8009b4c:	f004 f9c5 	bl	800deda <Gpu_CoCmd_Text>


	UI_lastState = 1;
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <Click_To_Disconnect_Charger+0xac>)
 8009b52:	2201      	movs	r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009b56:	f005 fba9 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009b5a:	f005 fbc1 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(10);
}
 8009b5e:	bf00      	nop
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200009a4 	.word	0x200009a4
 8009b68:	20000ae0 	.word	0x20000ae0
 8009b6c:	20000bc8 	.word	0x20000bc8
 8009b70:	0800f898 	.word	0x0800f898
 8009b74:	0800f8ac 	.word	0x0800f8ac
 8009b78:	0800f8b0 	.word	0x0800f8b0
 8009b7c:	200009a0 	.word	0x200009a0

08009b80 <Charger_Out_Of_Service>:

void Charger_Out_Of_Service(void) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009b86:	f005 fb37 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009b8a:	f005 f833 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009b8e:	f005 fb99 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009b92:	f003 f8c7 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009b96:	f005 f9c7 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009b9a:	f005 f805 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 80, 1, OPT_CENTERX, "Out of Service at the moment");
 8009b9e:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <Charger_Out_Of_Service+0x70>)
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	4b14      	ldr	r3, [pc, #80]	; (8009bf4 <Charger_Out_Of_Service+0x74>)
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	2301      	movs	r3, #1
 8009bae:	2250      	movs	r2, #80	; 0x50
 8009bb0:	21f0      	movs	r1, #240	; 0xf0
 8009bb2:	f004 f992 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009bb6:	f004 ff85 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 235, 140, 1, OPT_CENTERX, "Please Disconnect");
 8009bba:	4b0d      	ldr	r3, [pc, #52]	; (8009bf0 <Charger_Out_Of_Service+0x70>)
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	4b0e      	ldr	r3, [pc, #56]	; (8009bf8 <Charger_Out_Of_Service+0x78>)
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	228c      	movs	r2, #140	; 0x8c
 8009bcc:	21eb      	movs	r1, #235	; 0xeb
 8009bce:	f004 f984 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_exclamation(370, 140);
 8009bd2:	218c      	movs	r1, #140	; 0x8c
 8009bd4:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8009bd8:	f001 fb5e 	bl	800b298 <dynamic_exclamation>

	UI_lastState = 1;
 8009bdc:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <Charger_Out_Of_Service+0x7c>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009be2:	f005 fb63 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009be6:	f005 fb7b 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(10);
}
 8009bea:	bf00      	nop
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20000bc8 	.word	0x20000bc8
 8009bf4:	0800f8b8 	.word	0x0800f8b8
 8009bf8:	0800f898 	.word	0x0800f898
 8009bfc:	200009a0 	.word	0x200009a0

08009c00 <Press_Button_To_Initiate_Charging>:

void Press_Button_To_Initiate_Charging(void) {
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af02      	add	r7, sp, #8

	ui_mode = DARK_MODE;
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <Press_Button_To_Initiate_Charging+0x98>)
 8009c08:	2201      	movs	r2, #1
 8009c0a:	701a      	strb	r2, [r3, #0]
	set_ui_mode();
 8009c0c:	f005 f8d2 	bl	800edb4 <set_ui_mode>
	App_Common_Init(&host);
 8009c10:	4822      	ldr	r0, [pc, #136]	; (8009c9c <Press_Button_To_Initiate_Charging+0x9c>)
 8009c12:	f004 f81d 	bl	800dc50 <App_Common_Init>

	initialize_graphics_controller();
 8009c16:	f005 faef 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009c1a:	f004 ffeb 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009c1e:	f005 fb51 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009c22:	f003 f87f 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009c26:	f005 f97f 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009c2a:	f004 ffbd 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 85, 1, OPT_CENTERX, "Press the Side Button");
 8009c2e:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <Press_Button_To_Initiate_Charging+0xa0>)
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <Press_Button_To_Initiate_Charging+0xa4>)
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	2255      	movs	r2, #85	; 0x55
 8009c40:	21f0      	movs	r1, #240	; 0xf0
 8009c42:	f004 f94a 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 100, 140, 1, 0, "to initiate");
 8009c46:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <Press_Button_To_Initiate_Charging+0xa0>)
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <Press_Button_To_Initiate_Charging+0xa8>)
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	2301      	movs	r3, #1
 8009c54:	228c      	movs	r2, #140	; 0x8c
 8009c56:	2164      	movs	r1, #100	; 0x64
 8009c58:	f004 f93f 	bl	800deda <Gpu_CoCmd_Text>

//	load_color_turquoise();
	r2p();
 8009c5c:	f005 f84a 	bl	800ecf4 <r2p>
	Gpu_CoCmd_Text(phost, 242, 140, 1, 0, "Charging");
 8009c60:	4b0f      	ldr	r3, [pc, #60]	; (8009ca0 <Press_Button_To_Initiate_Charging+0xa0>)
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	4b11      	ldr	r3, [pc, #68]	; (8009cac <Press_Button_To_Initiate_Charging+0xac>)
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	228c      	movs	r2, #140	; 0x8c
 8009c70:	21f2      	movs	r1, #242	; 0xf2
 8009c72:	f004 f932 	bl	800deda <Gpu_CoCmd_Text>

	load_color_white();
 8009c76:	f004 ff97 	bl	800eba8 <load_color_white>
	dynamic_exclamation(372, 140);
 8009c7a:	218c      	movs	r1, #140	; 0x8c
 8009c7c:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8009c80:	f001 fb0a 	bl	800b298 <dynamic_exclamation>

	UI_lastState = 1;
 8009c84:	4b0a      	ldr	r3, [pc, #40]	; (8009cb0 <Press_Button_To_Initiate_Charging+0xb0>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009c8a:	f005 fb0f 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009c8e:	f005 fb27 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(10);
}
 8009c92:	bf00      	nop
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	200009a4 	.word	0x200009a4
 8009c9c:	20000ae0 	.word	0x20000ae0
 8009ca0:	20000bc8 	.word	0x20000bc8
 8009ca4:	0800f8d8 	.word	0x0800f8d8
 8009ca8:	0800f8f0 	.word	0x0800f8f0
 8009cac:	0800f8fc 	.word	0x0800f8fc
 8009cb0:	200009a0 	.word	0x200009a0

08009cb4 <Insufficient_Balance_For_Charging>:

void Insufficient_Balance_For_Charging(void) {
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009cba:	f005 fa9d 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009cbe:	f004 ff99 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009cc2:	f005 faff 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009cc6:	f003 f82d 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009cca:	f005 f92d 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009cce:	f004 ff6b 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 85, 1, OPT_CENTERX, "Insufficient Balance in Wallet");
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <Insufficient_Balance_For_Charging+0x68>)
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <Insufficient_Balance_For_Charging+0x6c>)
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	2255      	movs	r2, #85	; 0x55
 8009ce4:	21f0      	movs	r1, #240	; 0xf0
 8009ce6:	f004 f8f8 	bl	800deda <Gpu_CoCmd_Text>

	r2p();
 8009cea:	f005 f803 	bl	800ecf4 <r2p>
	Gpu_CoCmd_Text(phost, 240, 140, 1, OPT_CENTERX, "Please Recharge!");
 8009cee:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <Insufficient_Balance_For_Charging+0x68>)
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <Insufficient_Balance_For_Charging+0x70>)
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	228c      	movs	r2, #140	; 0x8c
 8009d00:	21f0      	movs	r1, #240	; 0xf0
 8009d02:	f004 f8ea 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <Insufficient_Balance_For_Charging+0x74>)
 8009d08:	2201      	movs	r2, #1
 8009d0a:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009d0c:	f005 face 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009d10:	f005 fae6 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(10);
}
 8009d14:	bf00      	nop
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20000bc8 	.word	0x20000bc8
 8009d20:	0800f908 	.word	0x0800f908
 8009d24:	0800f928 	.word	0x0800f928
 8009d28:	200009a0 	.word	0x200009a0

08009d2c <Verification_Process>:

void Verification_Process(void) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009d32:	f005 fa61 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009d36:	f004 ff5d 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009d3a:	f005 fac3 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009d3e:	f002 fff1 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009d42:	f005 f8f1 	bl	800ef28 <Barlow_bold_32>
	r2p();
 8009d46:	f004 ffd5 	bl	800ecf4 <r2p>
	Gpu_CoCmd_Text(phost, 240, 85, 1, OPT_CENTERX, "Verifying Your Bike");
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <Verification_Process+0x70>)
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <Verification_Process+0x74>)
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2301      	movs	r3, #1
 8009d5a:	2255      	movs	r2, #85	; 0x55
 8009d5c:	21f0      	movs	r1, #240	; 0xf0
 8009d5e:	f004 f8bc 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009d62:	f004 feaf 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 150, 140, 1, 0, "Please Wait");
 8009d66:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <Verification_Process+0x70>)
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <Verification_Process+0x78>)
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	2301      	movs	r3, #1
 8009d74:	228c      	movs	r2, #140	; 0x8c
 8009d76:	2196      	movs	r1, #150	; 0x96
 8009d78:	f004 f8af 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_dot(320, 140);
 8009d7c:	218c      	movs	r1, #140	; 0x8c
 8009d7e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8009d82:	f001 fa0f 	bl	800b1a4 <dynamic_dot>

	UI_lastState = 1;
 8009d86:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <Verification_Process+0x7c>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009d8c:	f005 fa8e 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009d90:	f005 faa6 	bl	800f2e0 <clear_buffer>
}
 8009d94:	bf00      	nop
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000bc8 	.word	0x20000bc8
 8009da0:	0800f93c 	.word	0x0800f93c
 8009da4:	0800f950 	.word	0x0800f950
 8009da8:	200009a0 	.word	0x200009a0

08009dac <Retry_Verification>:

void Retry_Verification(void) {
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009db2:	f005 fa21 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009db6:	f004 ff1d 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009dba:	f005 fa83 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009dbe:	f002 ffb1 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009dc2:	f005 f8b1 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009dc6:	f004 feef 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 165, 85, 1, 0, "Retrying");
 8009dca:	4b14      	ldr	r3, [pc, #80]	; (8009e1c <Retry_Verification+0x70>)
 8009dcc:	6818      	ldr	r0, [r3, #0]
 8009dce:	4b14      	ldr	r3, [pc, #80]	; (8009e20 <Retry_Verification+0x74>)
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	2255      	movs	r2, #85	; 0x55
 8009dda:	21a5      	movs	r1, #165	; 0xa5
 8009ddc:	f004 f87d 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_dot(290, 85);
 8009de0:	2155      	movs	r1, #85	; 0x55
 8009de2:	f44f 7091 	mov.w	r0, #290	; 0x122
 8009de6:	f001 f9dd 	bl	800b1a4 <dynamic_dot>

	load_color_turquoise();
 8009dea:	f004 fe6b 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 140, 1, OPT_CENTERX, "Please Wait");
 8009dee:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <Retry_Verification+0x70>)
 8009df0:	6818      	ldr	r0, [r3, #0]
 8009df2:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <Retry_Verification+0x78>)
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	228c      	movs	r2, #140	; 0x8c
 8009e00:	21f0      	movs	r1, #240	; 0xf0
 8009e02:	f004 f86a 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 8009e06:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <Retry_Verification+0x7c>)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009e0c:	f005 fa4e 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009e10:	f005 fa66 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(10);
}
 8009e14:	bf00      	nop
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000bc8 	.word	0x20000bc8
 8009e20:	0800f95c 	.word	0x0800f95c
 8009e24:	0800f950 	.word	0x0800f950
 8009e28:	200009a0 	.word	0x200009a0

08009e2c <Verification_Failed>:

void Verification_Failed(void) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009e32:	f005 f9e1 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009e36:	f004 fedd 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009e3a:	f005 fa43 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009e3e:	f002 ff71 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009e42:	f005 f871 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009e46:	f004 feaf 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 85, 1, OPT_CENTERX, "Verification Failed");
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <Verification_Failed+0x70>)
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	4b14      	ldr	r3, [pc, #80]	; (8009ea0 <Verification_Failed+0x74>)
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	2255      	movs	r2, #85	; 0x55
 8009e5c:	21f0      	movs	r1, #240	; 0xf0
 8009e5e:	f004 f83c 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009e62:	f004 fe2f 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 235, 140, 1, OPT_CENTERX, "Please Disconnect");
 8009e66:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <Verification_Failed+0x70>)
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ea4 <Verification_Failed+0x78>)
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2301      	movs	r3, #1
 8009e76:	228c      	movs	r2, #140	; 0x8c
 8009e78:	21eb      	movs	r1, #235	; 0xeb
 8009e7a:	f004 f82e 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_exclamation(370, 140);
 8009e7e:	218c      	movs	r1, #140	; 0x8c
 8009e80:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8009e84:	f001 fa08 	bl	800b298 <dynamic_exclamation>

	UI_lastState = 1;
 8009e88:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <Verification_Failed+0x7c>)
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009e8e:	f005 fa0d 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009e92:	f005 fa25 	bl	800f2e0 <clear_buffer>
}
 8009e96:	bf00      	nop
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20000bc8 	.word	0x20000bc8
 8009ea0:	0800f968 	.word	0x0800f968
 8009ea4:	0800f898 	.word	0x0800f898
 8009ea8:	200009a0 	.word	0x200009a0

08009eac <Charging_Initiated>:

void Charging_Initiated(void) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0

	ui_mode = DARK_MODE;
 8009eb0:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <Charging_Initiated+0x4c>)
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	701a      	strb	r2, [r3, #0]
	set_ui_mode();
 8009eb6:	f004 ff7d 	bl	800edb4 <set_ui_mode>
	App_Common_Init(&host);
 8009eba:	4810      	ldr	r0, [pc, #64]	; (8009efc <Charging_Initiated+0x50>)
 8009ebc:	f003 fec8 	bl	800dc50 <App_Common_Init>
	initialize_graphics_controller();
 8009ec0:	f005 f99a 	bl	800f1f8 <initialize_graphics_controller>
	clearscreen();
 8009ec4:	f005 f9fe 	bl	800f2c4 <clearscreen>

	background_color_grey_118();
 8009ec8:	f004 feaa 	bl	800ec20 <background_color_grey_118>

	show_SoC_circular_bar();
 8009ecc:	f001 fe30 	bl	800bb30 <show_SoC_circular_bar>

	load_color_white();
 8009ed0:	f004 fe6a 	bl	800eba8 <load_color_white>
	show_icons_chargingUI();
 8009ed4:	f001 fe24 	bl	800bb20 <show_icons_chargingUI>
	show_charging_SoC();
 8009ed8:	f002 fc54 	bl	800c784 <show_charging_SoC>
	show_eta();
 8009edc:	f002 fc6c 	bl	800c7b8 <show_eta>
	show_travelBoldly();
 8009ee0:	f002 fa5a 	bl	800c398 <show_travelBoldly>

	UI_lastState = 1;
 8009ee4:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <Charging_Initiated+0x54>)
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009eea:	f005 f9df 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009eee:	f005 f9f7 	bl	800f2e0 <clear_buffer>
}
 8009ef2:	bf00      	nop
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	200009a4 	.word	0x200009a4
 8009efc:	20000ae0 	.word	0x20000ae0
 8009f00:	200009a0 	.word	0x200009a0

08009f04 <Precheck_SoC>:
#include "ota_ui_pages.h"
#include "design_elements.h"
#include "print.h"


void Precheck_SoC(void) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af02      	add	r7, sp, #8

	OTA_download_completion_pct = 0;
 8009f0a:	4b22      	ldr	r3, [pc, #136]	; (8009f94 <Precheck_SoC+0x90>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
	OTA_est_time = 0;
 8009f10:	4b21      	ldr	r3, [pc, #132]	; (8009f98 <Precheck_SoC+0x94>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]

	memset(dash_OTA_download_pct, 0, sizeof(dash_OTA_download_pct));
 8009f16:	221e      	movs	r2, #30
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4820      	ldr	r0, [pc, #128]	; (8009f9c <Precheck_SoC+0x98>)
 8009f1c:	f005 fba8 	bl	800f670 <memset>
	memset(dash_OTA_eta_time, 0, sizeof(dash_OTA_eta_time));
 8009f20:	221e      	movs	r2, #30
 8009f22:	2100      	movs	r1, #0
 8009f24:	481e      	ldr	r0, [pc, #120]	; (8009fa0 <Precheck_SoC+0x9c>)
 8009f26:	f005 fba3 	bl	800f670 <memset>

	initialize_graphics_controller();
 8009f2a:	f005 f965 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009f2e:	f004 fe61 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009f32:	f005 f9c7 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009f36:	f002 fef5 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009f3a:	f004 fff5 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009f3e:	f004 fe33 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Checking");
 8009f42:	4b18      	ldr	r3, [pc, #96]	; (8009fa4 <Precheck_SoC+0xa0>)
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	4b18      	ldr	r3, [pc, #96]	; (8009fa8 <Precheck_SoC+0xa4>)
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	2301      	movs	r3, #1
 8009f52:	225a      	movs	r2, #90	; 0x5a
 8009f54:	21f0      	movs	r1, #240	; 0xf0
 8009f56:	f003 ffc0 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009f5a:	f004 fdb3 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 203, 135, 1, 0, "SoC");
 8009f5e:	4b11      	ldr	r3, [pc, #68]	; (8009fa4 <Precheck_SoC+0xa0>)
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	4b12      	ldr	r3, [pc, #72]	; (8009fac <Precheck_SoC+0xa8>)
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	2300      	movs	r3, #0
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	2287      	movs	r2, #135	; 0x87
 8009f6e:	21cb      	movs	r1, #203	; 0xcb
 8009f70:	f003 ffb3 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_dot(262, 135);
 8009f74:	2187      	movs	r1, #135	; 0x87
 8009f76:	f44f 7083 	mov.w	r0, #262	; 0x106
 8009f7a:	f001 f913 	bl	800b1a4 <dynamic_dot>

	UI_lastState = 1;
 8009f7e:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <Precheck_SoC+0xac>)
 8009f80:	2201      	movs	r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

	launch_dash();
 8009f84:	f005 f992 	bl	800f2ac <launch_dash>
	clear_buffer();
 8009f88:	f005 f9aa 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(100);
}
 8009f8c:	bf00      	nop
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	200003b0 	.word	0x200003b0
 8009f98:	20000814 	.word	0x20000814
 8009f9c:	200007d4 	.word	0x200007d4
 8009fa0:	20000710 	.word	0x20000710
 8009fa4:	20000bc8 	.word	0x20000bc8
 8009fa8:	0800f97c 	.word	0x0800f97c
 8009fac:	0800f988 	.word	0x0800f988
 8009fb0:	200009a0 	.word	0x200009a0

08009fb4 <Precheck_Network_Strength>:

void Precheck_Network_Strength(void) {
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 8009fba:	f005 f91d 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 8009fbe:	f004 fe19 	bl	800ebf4 <background_color_black>
	clearscreen();
 8009fc2:	f005 f97f 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 8009fc6:	f002 fead 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 8009fca:	f004 ffad 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 8009fce:	f004 fdeb 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Checking");
 8009fd2:	4b14      	ldr	r3, [pc, #80]	; (800a024 <Precheck_Network_Strength+0x70>)
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	4b14      	ldr	r3, [pc, #80]	; (800a028 <Precheck_Network_Strength+0x74>)
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	225a      	movs	r2, #90	; 0x5a
 8009fe4:	21f0      	movs	r1, #240	; 0xf0
 8009fe6:	f003 ff78 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 8009fea:	f004 fd6b 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 225, 135, 1, OPT_CENTERX, "Network Connectivity");
 8009fee:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <Precheck_Network_Strength+0x70>)
 8009ff0:	6818      	ldr	r0, [r3, #0]
 8009ff2:	4b0e      	ldr	r3, [pc, #56]	; (800a02c <Precheck_Network_Strength+0x78>)
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	2287      	movs	r2, #135	; 0x87
 800a000:	21e1      	movs	r1, #225	; 0xe1
 800a002:	f003 ff6a 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_dot(380, 135);
 800a006:	2187      	movs	r1, #135	; 0x87
 800a008:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800a00c:	f001 f8ca 	bl	800b1a4 <dynamic_dot>

	UI_lastState = 1;
 800a010:	4b07      	ldr	r3, [pc, #28]	; (800a030 <Precheck_Network_Strength+0x7c>)
 800a012:	2201      	movs	r2, #1
 800a014:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a016:	f005 f949 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a01a:	f005 f961 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(100);
}
 800a01e:	bf00      	nop
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20000bc8 	.word	0x20000bc8
 800a028:	0800f97c 	.word	0x0800f97c
 800a02c:	0800f98c 	.word	0x0800f98c
 800a030:	200009a0 	.word	0x200009a0

0800a034 <Precheck_Firmware_Version>:

void Precheck_Firmware_Version(void) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a03a:	f005 f8dd 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a03e:	f004 fdd9 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a042:	f005 f93f 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a046:	f002 fe6d 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a04a:	f004 ff6d 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a04e:	f004 fdab 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Checking");
 800a052:	4b14      	ldr	r3, [pc, #80]	; (800a0a4 <Precheck_Firmware_Version+0x70>)
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <Precheck_Firmware_Version+0x74>)
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2301      	movs	r3, #1
 800a062:	225a      	movs	r2, #90	; 0x5a
 800a064:	21f0      	movs	r1, #240	; 0xf0
 800a066:	f003 ff38 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a06a:	f004 fd2b 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 228, 135, 1, OPT_CENTERX, "Version");
 800a06e:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <Precheck_Firmware_Version+0x70>)
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <Precheck_Firmware_Version+0x78>)
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	2301      	movs	r3, #1
 800a07e:	2287      	movs	r2, #135	; 0x87
 800a080:	21e4      	movs	r1, #228	; 0xe4
 800a082:	f003 ff2a 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_dot(287, 135);
 800a086:	2187      	movs	r1, #135	; 0x87
 800a088:	f240 101f 	movw	r0, #287	; 0x11f
 800a08c:	f001 f88a 	bl	800b1a4 <dynamic_dot>

	UI_lastState = 1;
 800a090:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <Precheck_Firmware_Version+0x7c>)
 800a092:	2201      	movs	r2, #1
 800a094:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a096:	f005 f909 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a09a:	f005 f921 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(100);
}
 800a09e:	bf00      	nop
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20000bc8 	.word	0x20000bc8
 800a0a8:	0800f97c 	.word	0x0800f97c
 800a0ac:	0800f9a4 	.word	0x0800f9a4
 800a0b0:	200009a0 	.word	0x200009a0

0800a0b4 <Precheck_Balance>:

void Precheck_Balance(void) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a0ba:	f005 f89d 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a0be:	f004 fd99 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a0c2:	f005 f8ff 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a0c6:	f002 fe2d 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a0ca:	f004 ff2d 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a0ce:	f004 fd6b 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Checking");
 800a0d2:	4b14      	ldr	r3, [pc, #80]	; (800a124 <Precheck_Balance+0x70>)
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	4b14      	ldr	r3, [pc, #80]	; (800a128 <Precheck_Balance+0x74>)
 800a0d8:	9301      	str	r3, [sp, #4]
 800a0da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	225a      	movs	r2, #90	; 0x5a
 800a0e4:	21f0      	movs	r1, #240	; 0xf0
 800a0e6:	f003 fef8 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a0ea:	f004 fceb 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 230, 135, 1, OPT_CENTERX, "Balance in Wallet");
 800a0ee:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <Precheck_Balance+0x70>)
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <Precheck_Balance+0x78>)
 800a0f4:	9301      	str	r3, [sp, #4]
 800a0f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	2287      	movs	r2, #135	; 0x87
 800a100:	21e6      	movs	r1, #230	; 0xe6
 800a102:	f003 feea 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_dot(354, 135);
 800a106:	2187      	movs	r1, #135	; 0x87
 800a108:	f44f 70b1 	mov.w	r0, #354	; 0x162
 800a10c:	f001 f84a 	bl	800b1a4 <dynamic_dot>

	UI_lastState = 1;
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <Precheck_Balance+0x7c>)
 800a112:	2201      	movs	r2, #1
 800a114:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a116:	f005 f8c9 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a11a:	f005 f8e1 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(100);
}
 800a11e:	bf00      	nop
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000bc8 	.word	0x20000bc8
 800a128:	0800f97c 	.word	0x0800f97c
 800a12c:	0800f9ac 	.word	0x0800f9ac
 800a130:	200009a0 	.word	0x200009a0

0800a134 <Downloading_Firmware>:

void Downloading_Firmware(void) {
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a13a:	f005 f85d 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a13e:	f004 fd59 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a142:	f005 f8bf 	bl	800f2c4 <clearscreen>

	background_color_grey_118();
 800a146:	f004 fd6b 	bl	800ec20 <background_color_grey_118>
	load_color_white();
 800a14a:	f004 fd2d 	bl	800eba8 <load_color_white>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800a14e:	4b4d      	ldr	r3, [pc, #308]	; (800a284 <Downloading_Firmware+0x150>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	494d      	ldr	r1, [pc, #308]	; (800a288 <Downloading_Firmware+0x154>)
 800a154:	4618      	mov	r0, r3
 800a156:	f003 fd59 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(50));
 800a15a:	4b4a      	ldr	r3, [pc, #296]	; (800a284 <Downloading_Firmware+0x150>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	494b      	ldr	r1, [pc, #300]	; (800a28c <Downloading_Firmware+0x158>)
 800a160:	4618      	mov	r0, r3
 800a162:	f003 fd53 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(120, 125, 0, 0));
 800a166:	4b47      	ldr	r3, [pc, #284]	; (800a284 <Downloading_Firmware+0x150>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4949      	ldr	r1, [pc, #292]	; (800a290 <Downloading_Firmware+0x15c>)
 800a16c:	4618      	mov	r0, r3
 800a16e:	f003 fd4d 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(360, 135, 0, 0));
 800a172:	4b44      	ldr	r3, [pc, #272]	; (800a284 <Downloading_Firmware+0x150>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4947      	ldr	r1, [pc, #284]	; (800a294 <Downloading_Firmware+0x160>)
 800a178:	4618      	mov	r0, r3
 800a17a:	f003 fd47 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800a17e:	4b41      	ldr	r3, [pc, #260]	; (800a284 <Downloading_Firmware+0x150>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800a186:	4618      	mov	r0, r3
 800a188:	f003 fd40 	bl	800dc0c <App_WrCoCmd_Buffer>

	load_color_turquoise();
 800a18c:	f004 fc9a 	bl	800eac4 <load_color_turquoise>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800a190:	4b3c      	ldr	r3, [pc, #240]	; (800a284 <Downloading_Firmware+0x150>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	493c      	ldr	r1, [pc, #240]	; (800a288 <Downloading_Firmware+0x154>)
 800a196:	4618      	mov	r0, r3
 800a198:	f003 fd38 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(50));
 800a19c:	4b39      	ldr	r3, [pc, #228]	; (800a284 <Downloading_Firmware+0x150>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	493a      	ldr	r1, [pc, #232]	; (800a28c <Downloading_Firmware+0x158>)
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f003 fd32 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(120, 125, 0, 0));
 800a1a8:	4b36      	ldr	r3, [pc, #216]	; (800a284 <Downloading_Firmware+0x150>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4938      	ldr	r1, [pc, #224]	; (800a290 <Downloading_Firmware+0x15c>)
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f003 fd2c 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(120 + (240 * OTA_download_completion_pct) / 100, 135, 0, 0));
 800a1b4:	4b33      	ldr	r3, [pc, #204]	; (800a284 <Downloading_Firmware+0x150>)
 800a1b6:	6818      	ldr	r0, [r3, #0]
 800a1b8:	4b37      	ldr	r3, [pc, #220]	; (800a298 <Downloading_Firmware+0x164>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	011b      	lsls	r3, r3, #4
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	4a35      	ldr	r2, [pc, #212]	; (800a29c <Downloading_Firmware+0x168>)
 800a1c6:	fb82 1203 	smull	r1, r2, r2, r3
 800a1ca:	1152      	asrs	r2, r2, #5
 800a1cc:	17db      	asrs	r3, r3, #31
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	3378      	adds	r3, #120	; 0x78
 800a1d2:	055a      	lsls	r2, r3, #21
 800a1d4:	4b32      	ldr	r3, [pc, #200]	; (800a2a0 <Downloading_Firmware+0x16c>)
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1dc:	f443 2307 	orr.w	r3, r3, #552960	; 0x87000
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	f003 fd13 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800a1e6:	4b27      	ldr	r3, [pc, #156]	; (800a284 <Downloading_Firmware+0x150>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f003 fd0c 	bl	800dc0c <App_WrCoCmd_Buffer>

	show_small_yatri_logo();
 800a1f4:	f002 fd96 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a1f8:	f004 fe96 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a1fc:	f004 fcd4 	bl	800eba8 <load_color_white>
	sprint(dash_OTA_download_pct, "%d", OTA_download_completion_pct);
 800a200:	4b25      	ldr	r3, [pc, #148]	; (800a298 <Downloading_Firmware+0x164>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	4927      	ldr	r1, [pc, #156]	; (800a2a4 <Downloading_Firmware+0x170>)
 800a208:	4827      	ldr	r0, [pc, #156]	; (800a2a8 <Downloading_Firmware+0x174>)
 800a20a:	f003 fbe9 	bl	800d9e0 <sprint>
	Gpu_CoCmd_Text(phost, 256, 75, 1, OPT_RIGHTX, dash_OTA_download_pct);
 800a20e:	4b1d      	ldr	r3, [pc, #116]	; (800a284 <Downloading_Firmware+0x150>)
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	4b25      	ldr	r3, [pc, #148]	; (800a2a8 <Downloading_Firmware+0x174>)
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	2301      	movs	r3, #1
 800a21e:	224b      	movs	r2, #75	; 0x4b
 800a220:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a224:	f003 fe59 	bl	800deda <Gpu_CoCmd_Text>

	Barlow_bold_18();
 800a228:	f004 fe42 	bl	800eeb0 <Barlow_bold_18>
	Gpu_CoCmd_Text(phost, 258, 85, 1, 0, "%");
 800a22c:	4b15      	ldr	r3, [pc, #84]	; (800a284 <Downloading_Firmware+0x150>)
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	4b1e      	ldr	r3, [pc, #120]	; (800a2ac <Downloading_Firmware+0x178>)
 800a232:	9301      	str	r3, [sp, #4]
 800a234:	2300      	movs	r3, #0
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	2301      	movs	r3, #1
 800a23a:	2255      	movs	r2, #85	; 0x55
 800a23c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a240:	f003 fe4b 	bl	800deda <Gpu_CoCmd_Text>

	Barlow_bold_20();
 800a244:	f004 fe52 	bl	800eeec <Barlow_bold_20>
	sprint(dash_OTA_eta_time, "%d minutes remaining", OTA_est_time);
 800a248:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <Downloading_Firmware+0x17c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4919      	ldr	r1, [pc, #100]	; (800a2b4 <Downloading_Firmware+0x180>)
 800a250:	4819      	ldr	r0, [pc, #100]	; (800a2b8 <Downloading_Firmware+0x184>)
 800a252:	f003 fbc5 	bl	800d9e0 <sprint>
	Gpu_CoCmd_Text(phost, 240, 155, 1, OPT_CENTERX, dash_OTA_eta_time);
 800a256:	4b0b      	ldr	r3, [pc, #44]	; (800a284 <Downloading_Firmware+0x150>)
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	4b17      	ldr	r3, [pc, #92]	; (800a2b8 <Downloading_Firmware+0x184>)
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	2301      	movs	r3, #1
 800a266:	229b      	movs	r2, #155	; 0x9b
 800a268:	21f0      	movs	r1, #240	; 0xf0
 800a26a:	f003 fe36 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 800a26e:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <Downloading_Firmware+0x188>)
 800a270:	2201      	movs	r2, #1
 800a272:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a274:	f005 f81a 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a278:	f005 f832 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(100);
}
 800a27c:	bf00      	nop
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000bc8 	.word	0x20000bc8
 800a288:	1f000009 	.word	0x1f000009
 800a28c:	0e000032 	.word	0x0e000032
 800a290:	8f07d000 	.word	0x8f07d000
 800a294:	ad087000 	.word	0xad087000
 800a298:	200003b0 	.word	0x200003b0
 800a29c:	51eb851f 	.word	0x51eb851f
 800a2a0:	3fe00000 	.word	0x3fe00000
 800a2a4:	0800f9c0 	.word	0x0800f9c0
 800a2a8:	200007d4 	.word	0x200007d4
 800a2ac:	0800f9c4 	.word	0x0800f9c4
 800a2b0:	20000814 	.word	0x20000814
 800a2b4:	0800f9c8 	.word	0x0800f9c8
 800a2b8:	20000710 	.word	0x20000710
 800a2bc:	200009a0 	.word	0x200009a0

0800a2c0 <Installing_Firmware>:

void Installing_Firmware(void) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a2c6:	f004 ff97 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a2ca:	f004 fc93 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a2ce:	f004 fff9 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a2d2:	f002 fd27 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a2d6:	f004 fe27 	bl	800ef28 <Barlow_bold_32>
//	load_color_turquoise();
	r2p();
 800a2da:	f004 fd0b 	bl	800ecf4 <r2p>
	Gpu_CoCmd_Text(phost, 240, 80, 1, OPT_CENTERX, "Installing Updates");
 800a2de:	4b19      	ldr	r3, [pc, #100]	; (800a344 <Installing_Firmware+0x84>)
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	4b19      	ldr	r3, [pc, #100]	; (800a348 <Installing_Firmware+0x88>)
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	2250      	movs	r2, #80	; 0x50
 800a2f0:	21f0      	movs	r1, #240	; 0xf0
 800a2f2:	f003 fdf2 	bl	800deda <Gpu_CoCmd_Text>
	load_color_white();
 800a2f6:	f004 fc57 	bl	800eba8 <load_color_white>
	Barlow_semibold_20();
 800a2fa:	f004 ff05 	bl	800f108 <Barlow_semibold_20>
	Gpu_CoCmd_Text(phost, 240, 125, 1, OPT_CENTERX, "The screen will turn off automatically");
 800a2fe:	4b11      	ldr	r3, [pc, #68]	; (800a344 <Installing_Firmware+0x84>)
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	4b12      	ldr	r3, [pc, #72]	; (800a34c <Installing_Firmware+0x8c>)
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	2301      	movs	r3, #1
 800a30e:	227d      	movs	r2, #125	; 0x7d
 800a310:	21f0      	movs	r1, #240	; 0xf0
 800a312:	f003 fde2 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 240, 145, 1, OPT_CENTERX, "after the update completes.");
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <Installing_Firmware+0x84>)
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	4b0d      	ldr	r3, [pc, #52]	; (800a350 <Installing_Firmware+0x90>)
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	2301      	movs	r3, #1
 800a326:	2291      	movs	r2, #145	; 0x91
 800a328:	21f0      	movs	r1, #240	; 0xf0
 800a32a:	f003 fdd6 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 800a32e:	4b09      	ldr	r3, [pc, #36]	; (800a354 <Installing_Firmware+0x94>)
 800a330:	2201      	movs	r2, #1
 800a332:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a334:	f004 ffba 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a338:	f004 ffd2 	bl	800f2e0 <clear_buffer>
//	HAL_Delay(100);
}
 800a33c:	bf00      	nop
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20000bc8 	.word	0x20000bc8
 800a348:	0800f9e0 	.word	0x0800f9e0
 800a34c:	0800f9f4 	.word	0x0800f9f4
 800a350:	0800fa1c 	.word	0x0800fa1c
 800a354:	200009a0 	.word	0x200009a0

0800a358 <Firmware_Installation_Successful>:

void Firmware_Installation_Successful(void) {
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a35e:	f004 ff4b 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a362:	f004 fc47 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a366:	f004 ffad 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a36a:	f002 fcdb 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a36e:	f004 fddb 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a372:	f004 fc19 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 100, 110, 1, 0, "Firmware");
 800a376:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <Firmware_Installation_Successful+0x94>)
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	4b1d      	ldr	r3, [pc, #116]	; (800a3f0 <Firmware_Installation_Successful+0x98>)
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	2300      	movs	r3, #0
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	2301      	movs	r3, #1
 800a384:	226e      	movs	r2, #110	; 0x6e
 800a386:	2164      	movs	r1, #100	; 0x64
 800a388:	f003 fda7 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a38c:	f004 fb9a 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 245, 110, 1, 0, "Updated");
 800a390:	4b16      	ldr	r3, [pc, #88]	; (800a3ec <Firmware_Installation_Successful+0x94>)
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	4b17      	ldr	r3, [pc, #92]	; (800a3f4 <Firmware_Installation_Successful+0x9c>)
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	2300      	movs	r3, #0
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	2301      	movs	r3, #1
 800a39e:	226e      	movs	r2, #110	; 0x6e
 800a3a0:	21f5      	movs	r1, #245	; 0xf5
 800a3a2:	f003 fd9a 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 368, 110, 1, 0, "!");
 800a3a6:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <Firmware_Installation_Successful+0x94>)
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	4b13      	ldr	r3, [pc, #76]	; (800a3f8 <Firmware_Installation_Successful+0xa0>)
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	226e      	movs	r2, #110	; 0x6e
 800a3b6:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800a3ba:	f003 fd8e 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 800a3be:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <Firmware_Installation_Successful+0xa4>)
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a3c4:	f004 ff72 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a3c8:	f004 ff8a 	bl	800f2e0 <clear_buffer>

	HAL_Delay(2000);
 800a3cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3d0:	f7fc f948 	bl	8006664 <HAL_Delay>
	if (ota_trigger_from_esp == 1) {
 800a3d4:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <Firmware_Installation_Successful+0xa8>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d104      	bne.n	800a3e6 <Firmware_Installation_Successful+0x8e>
		ota_trigger_from_esp = 0;
 800a3dc:	4b08      	ldr	r3, [pc, #32]	; (800a400 <Firmware_Installation_Successful+0xa8>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
		display_power_down();
 800a3e2:	f004 ff37 	bl	800f254 <display_power_down>
	}
}
 800a3e6:	bf00      	nop
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000bc8 	.word	0x20000bc8
 800a3f0:	0800fa38 	.word	0x0800fa38
 800a3f4:	0800fa44 	.word	0x0800fa44
 800a3f8:	0800fa4c 	.word	0x0800fa4c
 800a3fc:	200009a0 	.word	0x200009a0
 800a400:	200009bc 	.word	0x200009bc

0800a404 <Firmware_Installation_Failed>:

void Firmware_Installation_Failed(void) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a40a:	f004 fef5 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a40e:	f004 fbf1 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a412:	f004 ff57 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a416:	f002 fc85 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a41a:	f004 fd85 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a41e:	f004 fbc3 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Firmware Update");
 800a422:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <Firmware_Installation_Failed+0x90>)
 800a424:	6818      	ldr	r0, [r3, #0]
 800a426:	4b1c      	ldr	r3, [pc, #112]	; (800a498 <Firmware_Installation_Failed+0x94>)
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	2301      	movs	r3, #1
 800a432:	225a      	movs	r2, #90	; 0x5a
 800a434:	21f0      	movs	r1, #240	; 0xf0
 800a436:	f003 fd50 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a43a:	f004 fb43 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 135, 1, OPT_CENTERX, "Failed!");
 800a43e:	4b15      	ldr	r3, [pc, #84]	; (800a494 <Firmware_Installation_Failed+0x90>)
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	4b16      	ldr	r3, [pc, #88]	; (800a49c <Firmware_Installation_Failed+0x98>)
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	2301      	movs	r3, #1
 800a44e:	2287      	movs	r2, #135	; 0x87
 800a450:	21f0      	movs	r1, #240	; 0xf0
 800a452:	f003 fd42 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 800a456:	4b12      	ldr	r3, [pc, #72]	; (800a4a0 <Firmware_Installation_Failed+0x9c>)
 800a458:	2201      	movs	r2, #1
 800a45a:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a45c:	f004 ff26 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a460:	f004 ff3e 	bl	800f2e0 <clear_buffer>

	if (OTA_received == 1) {
 800a464:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <Firmware_Installation_Failed+0xa0>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d102      	bne.n	800a472 <Firmware_Installation_Failed+0x6e>
		OTA_failed_timer_start = 1;
 800a46c:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <Firmware_Installation_Failed+0xa4>)
 800a46e:	2201      	movs	r2, #1
 800a470:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(2000);
 800a472:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a476:	f7fc f8f5 	bl	8006664 <HAL_Delay>
	if (ota_trigger_from_esp == 1) {
 800a47a:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <Firmware_Installation_Failed+0xa8>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d104      	bne.n	800a48c <Firmware_Installation_Failed+0x88>
		ota_trigger_from_esp = 0;
 800a482:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <Firmware_Installation_Failed+0xa8>)
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
		display_power_down();
 800a488:	f004 fee4 	bl	800f254 <display_power_down>
	}
}
 800a48c:	bf00      	nop
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20000bc8 	.word	0x20000bc8
 800a498:	0800fa50 	.word	0x0800fa50
 800a49c:	0800fa60 	.word	0x0800fa60
 800a4a0:	200009a0 	.word	0x200009a0
 800a4a4:	20000870 	.word	0x20000870
 800a4a8:	200004b0 	.word	0x200004b0
 800a4ac:	200009bc 	.word	0x200009bc

0800a4b0 <Network_Connection_Error>:

void Network_Connection_Error(void) {
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a4b6:	f004 fe9f 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a4ba:	f004 fb9b 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a4be:	f004 ff01 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a4c2:	f002 fc2f 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a4c6:	f004 fd2f 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a4ca:	f004 fb6d 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Network");
 800a4ce:	4b15      	ldr	r3, [pc, #84]	; (800a524 <Network_Connection_Error+0x74>)
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <Network_Connection_Error+0x78>)
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	2301      	movs	r3, #1
 800a4de:	225a      	movs	r2, #90	; 0x5a
 800a4e0:	21f0      	movs	r1, #240	; 0xf0
 800a4e2:	f003 fcfa 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a4e6:	f004 faed 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 135, 1, OPT_CENTERX, "Connection Error");
 800a4ea:	4b0e      	ldr	r3, [pc, #56]	; (800a524 <Network_Connection_Error+0x74>)
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <Network_Connection_Error+0x7c>)
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	2287      	movs	r2, #135	; 0x87
 800a4fc:	21f0      	movs	r1, #240	; 0xf0
 800a4fe:	f003 fcec 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 800a502:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <Network_Connection_Error+0x80>)
 800a504:	2201      	movs	r2, #1
 800a506:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a508:	f004 fed0 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a50c:	f004 fee8 	bl	800f2e0 <clear_buffer>
	HAL_Delay(2000);
 800a510:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a514:	f7fc f8a6 	bl	8006664 <HAL_Delay>
	OTA_received = 0;
 800a518:	4b06      	ldr	r3, [pc, #24]	; (800a534 <Network_Connection_Error+0x84>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	601a      	str	r2, [r3, #0]
}
 800a51e:	bf00      	nop
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	20000bc8 	.word	0x20000bc8
 800a528:	0800fa68 	.word	0x0800fa68
 800a52c:	0800fa70 	.word	0x0800fa70
 800a530:	200009a0 	.word	0x200009a0
 800a534:	20000870 	.word	0x20000870

0800a538 <Firmware_Version_Upto_Date>:

void Firmware_Version_Upto_Date(void) {
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a53e:	f004 fe5b 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a542:	f004 fb57 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a546:	f004 febd 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a54a:	f002 fbeb 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a54e:	f004 fceb 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a552:	f004 fb29 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "You are already");
 800a556:	4b15      	ldr	r3, [pc, #84]	; (800a5ac <Firmware_Version_Upto_Date+0x74>)
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	4b15      	ldr	r3, [pc, #84]	; (800a5b0 <Firmware_Version_Upto_Date+0x78>)
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	2301      	movs	r3, #1
 800a566:	225a      	movs	r2, #90	; 0x5a
 800a568:	21f0      	movs	r1, #240	; 0xf0
 800a56a:	f003 fcb6 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a56e:	f004 faa9 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 135, 1, OPT_CENTERX, "up to date!");
 800a572:	4b0e      	ldr	r3, [pc, #56]	; (800a5ac <Firmware_Version_Upto_Date+0x74>)
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <Firmware_Version_Upto_Date+0x7c>)
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	2301      	movs	r3, #1
 800a582:	2287      	movs	r2, #135	; 0x87
 800a584:	21f0      	movs	r1, #240	; 0xf0
 800a586:	f003 fca8 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 800a58a:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <Firmware_Version_Upto_Date+0x80>)
 800a58c:	2201      	movs	r2, #1
 800a58e:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a590:	f004 fe8c 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a594:	f004 fea4 	bl	800f2e0 <clear_buffer>
	HAL_Delay(2000);
 800a598:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a59c:	f7fc f862 	bl	8006664 <HAL_Delay>
	OTA_received = 0;
 800a5a0:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <Firmware_Version_Upto_Date+0x84>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
}
 800a5a6:	bf00      	nop
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20000bc8 	.word	0x20000bc8
 800a5b0:	0800fa84 	.word	0x0800fa84
 800a5b4:	0800fa94 	.word	0x0800fa94
 800a5b8:	200009a0 	.word	0x200009a0
 800a5bc:	20000870 	.word	0x20000870

0800a5c0 <Insufficient_SoC_For_OTA>:

void Insufficient_SoC_For_OTA(void) {
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a5c6:	f004 fe17 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a5ca:	f004 fb13 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a5ce:	f004 fe79 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a5d2:	f002 fba7 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a5d6:	f004 fca7 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a5da:	f004 fae5 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Insufficient SoC");
 800a5de:	4b18      	ldr	r3, [pc, #96]	; (800a640 <Insufficient_SoC_For_OTA+0x80>)
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	4b18      	ldr	r3, [pc, #96]	; (800a644 <Insufficient_SoC_For_OTA+0x84>)
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	225a      	movs	r2, #90	; 0x5a
 800a5f0:	21f0      	movs	r1, #240	; 0xf0
 800a5f2:	f003 fc72 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a5f6:	f004 fa65 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 238, 135, 1, OPT_CENTERX, "Please Charge");
 800a5fa:	4b11      	ldr	r3, [pc, #68]	; (800a640 <Insufficient_SoC_For_OTA+0x80>)
 800a5fc:	6818      	ldr	r0, [r3, #0]
 800a5fe:	4b12      	ldr	r3, [pc, #72]	; (800a648 <Insufficient_SoC_For_OTA+0x88>)
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	2301      	movs	r3, #1
 800a60a:	2287      	movs	r2, #135	; 0x87
 800a60c:	21ee      	movs	r1, #238	; 0xee
 800a60e:	f003 fc64 	bl	800deda <Gpu_CoCmd_Text>
	dynamic_exclamation(340, 135);
 800a612:	2187      	movs	r1, #135	; 0x87
 800a614:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800a618:	f000 fe3e 	bl	800b298 <dynamic_exclamation>

	UI_lastState = 1;
 800a61c:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <Insufficient_SoC_For_OTA+0x8c>)
 800a61e:	2201      	movs	r2, #1
 800a620:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a622:	f004 fe43 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a626:	f004 fe5b 	bl	800f2e0 <clear_buffer>
	HAL_Delay(2000);
 800a62a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a62e:	f7fc f819 	bl	8006664 <HAL_Delay>
	OTA_received = 0;
 800a632:	4b07      	ldr	r3, [pc, #28]	; (800a650 <Insufficient_SoC_For_OTA+0x90>)
 800a634:	2200      	movs	r2, #0
 800a636:	601a      	str	r2, [r3, #0]
}
 800a638:	bf00      	nop
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20000bc8 	.word	0x20000bc8
 800a644:	0800faa0 	.word	0x0800faa0
 800a648:	0800fab4 	.word	0x0800fab4
 800a64c:	200009a0 	.word	0x200009a0
 800a650:	20000870 	.word	0x20000870

0800a654 <Insufficient_Balance_For_OTA>:

void Insufficient_Balance_For_OTA(void) {
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af02      	add	r7, sp, #8

	initialize_graphics_controller();
 800a65a:	f004 fdcd 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800a65e:	f004 fac9 	bl	800ebf4 <background_color_black>
	clearscreen();
 800a662:	f004 fe2f 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800a666:	f002 fb5d 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800a66a:	f004 fc5d 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800a66e:	f004 fa9b 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 90, 1, OPT_CENTERX, "Insufficient Balance");
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <Insufficient_Balance_For_OTA+0x74>)
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	4b15      	ldr	r3, [pc, #84]	; (800a6cc <Insufficient_Balance_For_OTA+0x78>)
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	2301      	movs	r3, #1
 800a682:	225a      	movs	r2, #90	; 0x5a
 800a684:	21f0      	movs	r1, #240	; 0xf0
 800a686:	f003 fc28 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800a68a:	f004 fa1b 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 135, 1, OPT_CENTERX, "Please Recharge!");
 800a68e:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <Insufficient_Balance_For_OTA+0x74>)
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <Insufficient_Balance_For_OTA+0x7c>)
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	2301      	movs	r3, #1
 800a69e:	2287      	movs	r2, #135	; 0x87
 800a6a0:	21f0      	movs	r1, #240	; 0xf0
 800a6a2:	f003 fc1a 	bl	800deda <Gpu_CoCmd_Text>

	UI_lastState = 1;
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <Insufficient_Balance_For_OTA+0x80>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]

	launch_dash();
 800a6ac:	f004 fdfe 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a6b0:	f004 fe16 	bl	800f2e0 <clear_buffer>
	HAL_Delay(2000);
 800a6b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6b8:	f7fb ffd4 	bl	8006664 <HAL_Delay>
	OTA_received = 0;
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <Insufficient_Balance_For_OTA+0x84>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]
}
 800a6c2:	bf00      	nop
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	20000bc8 	.word	0x20000bc8
 800a6cc:	0800fac4 	.word	0x0800fac4
 800a6d0:	0800fadc 	.word	0x0800fadc
 800a6d4:	200009a0 	.word	0x200009a0
 800a6d8:	20000870 	.word	0x20000870
 800a6dc:	00000000 	.word	0x00000000

0800a6e0 <Starting_Splashscreen>:
#include "design_elements.h"
#include "color_elements.h"

extern int popup_color[6];

void Starting_Splashscreen(void) {
 800a6e0:	b5b0      	push	{r4, r5, r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af04      	add	r7, sp, #16

	App_Common_Init(&host);
 800a6e6:	4874      	ldr	r0, [pc, #464]	; (800a8b8 <Starting_Splashscreen+0x1d8>)
 800a6e8:	f003 fab2 	bl	800dc50 <App_Common_Init>
	initialize_graphics_controller();
 800a6ec:	f004 fd84 	bl	800f1f8 <initialize_graphics_controller>
	clearscreen();
 800a6f0:	f004 fde8 	bl	800f2c4 <clearscreen>

	starting_splashscreen_transparency_level = (starting_splashscreen_transparency_level >= 250? 250:starting_splashscreen_transparency_level + 15);
 800a6f4:	4b71      	ldr	r3, [pc, #452]	; (800a8bc <Starting_Splashscreen+0x1dc>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2bf9      	cmp	r3, #249	; 0xf9
 800a6fa:	dc03      	bgt.n	800a704 <Starting_Splashscreen+0x24>
 800a6fc:	4b6f      	ldr	r3, [pc, #444]	; (800a8bc <Starting_Splashscreen+0x1dc>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	330f      	adds	r3, #15
 800a702:	e000      	b.n	800a706 <Starting_Splashscreen+0x26>
 800a704:	23fa      	movs	r3, #250	; 0xfa
 800a706:	4a6d      	ldr	r2, [pc, #436]	; (800a8bc <Starting_Splashscreen+0x1dc>)
 800a708:	6013      	str	r3, [r2, #0]

	App_WrCoCmd_Buffer(phost, COLOR_A(starting_splashscreen_transparency_level));
 800a70a:	4b6d      	ldr	r3, [pc, #436]	; (800a8c0 <Starting_Splashscreen+0x1e0>)
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	4b6b      	ldr	r3, [pc, #428]	; (800a8bc <Starting_Splashscreen+0x1dc>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a718:	4619      	mov	r1, r3
 800a71a:	4610      	mov	r0, r2
 800a71c:	f003 fa76 	bl	800dc0c <App_WrCoCmd_Buffer>

#if 1
	if (continue_scaling == 1){
 800a720:	4b68      	ldr	r3, [pc, #416]	; (800a8c4 <Starting_Splashscreen+0x1e4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d144      	bne.n	800a7b2 <Starting_Splashscreen+0xd2>
		// New Code here
		Gpu_CoCmd_LoadIdentity(phost);
 800a728:	4b65      	ldr	r3, [pc, #404]	; (800a8c0 <Starting_Splashscreen+0x1e0>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f003 fc4f 	bl	800dfd0 <Gpu_CoCmd_LoadIdentity>
		Gpu_CoCmd_Translate(phost, 65536 * 128, 65536 * 128);
 800a732:	4b63      	ldr	r3, [pc, #396]	; (800a8c0 <Starting_Splashscreen+0x1e0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a73a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800a73e:	4618      	mov	r0, r3
 800a740:	f003 fc70 	bl	800e024 <Gpu_CoCmd_Translate>
		Gpu_CoCmd_Scale(phost, (1 + starting_splashscreen_scaling) * 65536, (1 + starting_splashscreen_scaling) * 65536);
 800a744:	4b5e      	ldr	r3, [pc, #376]	; (800a8c0 <Starting_Splashscreen+0x1e0>)
 800a746:	681c      	ldr	r4, [r3, #0]
 800a748:	4b5f      	ldr	r3, [pc, #380]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a750:	4618      	mov	r0, r3
 800a752:	f7f9 f99f 	bl	8003a94 <__addsf3>
 800a756:	4603      	mov	r3, r0
 800a758:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7f9 faa1 	bl	8003ca4 <__aeabi_fmul>
 800a762:	4603      	mov	r3, r0
 800a764:	4618      	mov	r0, r3
 800a766:	f7f9 fc63 	bl	8004030 <__aeabi_f2iz>
 800a76a:	4605      	mov	r5, r0
 800a76c:	4b56      	ldr	r3, [pc, #344]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a774:	4618      	mov	r0, r3
 800a776:	f7f9 f98d 	bl	8003a94 <__addsf3>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800a780:	4618      	mov	r0, r3
 800a782:	f7f9 fa8f 	bl	8003ca4 <__aeabi_fmul>
 800a786:	4603      	mov	r3, r0
 800a788:	4618      	mov	r0, r3
 800a78a:	f7f9 fc51 	bl	8004030 <__aeabi_f2iz>
 800a78e:	4603      	mov	r3, r0
 800a790:	461a      	mov	r2, r3
 800a792:	4629      	mov	r1, r5
 800a794:	4620      	mov	r0, r4
 800a796:	f003 fc66 	bl	800e066 <Gpu_CoCmd_Scale>
		Gpu_CoCmd_Translate(phost, 65536 * -128, 65536 * -128);
 800a79a:	4b49      	ldr	r3, [pc, #292]	; (800a8c0 <Starting_Splashscreen+0x1e0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a4b      	ldr	r2, [pc, #300]	; (800a8cc <Starting_Splashscreen+0x1ec>)
 800a7a0:	494a      	ldr	r1, [pc, #296]	; (800a8cc <Starting_Splashscreen+0x1ec>)
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f003 fc3e 	bl	800e024 <Gpu_CoCmd_Translate>
		Gpu_CoCmd_SetMatrix(phost);
 800a7a8:	4b45      	ldr	r3, [pc, #276]	; (800a8c0 <Starting_Splashscreen+0x1e0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f003 fc7b 	bl	800e0a8 <Gpu_CoCmd_SetMatrix>
	}
#endif

	Load_ImageASTC(&host, 952320, COMPRESSED_RGBA_ASTC_5x5_KHR, 300, 190, 95, 10);
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	9302      	str	r3, [sp, #8]
 800a7b6:	235f      	movs	r3, #95	; 0x5f
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	23be      	movs	r3, #190	; 0xbe
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800a7c2:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800a7c6:	4942      	ldr	r1, [pc, #264]	; (800a8d0 <Starting_Splashscreen+0x1f0>)
 800a7c8:	483b      	ldr	r0, [pc, #236]	; (800a8b8 <Starting_Splashscreen+0x1d8>)
 800a7ca:	f004 fda3 	bl	800f314 <Load_ImageASTC>
	Gpu_CoCmd_LoadIdentity(phost);
	Gpu_CoCmd_Scale(phost,1 * 65536, 1 * 65536);
	Gpu_CoCmd_SetMatrix(phost);
#endif

	Barlow_bold_24();
 800a7ce:	f004 fbc9 	bl	800ef64 <Barlow_bold_24>
	load_color_white();
 800a7d2:	f004 f9e9 	bl	800eba8 <load_color_white>

//	App_WrCoCmd_Buffer(phost, COLOR_A(starting_splashscreen_transparency_level));
	Gpu_CoCmd_Text(phost, 240, 240, 1, OPT_CENTERX | OPT_CENTERY, dash_welcome_username);
 800a7d6:	4b3a      	ldr	r3, [pc, #232]	; (800a8c0 <Starting_Splashscreen+0x1e0>)
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	4b3e      	ldr	r3, [pc, #248]	; (800a8d4 <Starting_Splashscreen+0x1f4>)
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	22f0      	movs	r2, #240	; 0xf0
 800a7e8:	21f0      	movs	r1, #240	; 0xf0
 800a7ea:	f003 fb76 	bl	800deda <Gpu_CoCmd_Text>

	launch_dash();
 800a7ee:	f004 fd5d 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a7f2:	f004 fd75 	bl	800f2e0 <clear_buffer>

	if (continue_scaling == 1){
 800a7f6:	4b33      	ldr	r3, [pc, #204]	; (800a8c4 <Starting_Splashscreen+0x1e4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d14c      	bne.n	800a898 <Starting_Splashscreen+0x1b8>

		if (upscale == 1){
 800a7fe:	4b36      	ldr	r3, [pc, #216]	; (800a8d8 <Starting_Splashscreen+0x1f8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d124      	bne.n	800a850 <Starting_Splashscreen+0x170>

			if (starting_splashscreen_scaling < 0.1){
 800a806:	4b30      	ldr	r3, [pc, #192]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7f9 f80c 	bl	8003828 <__aeabi_f2d>
 800a810:	a325      	add	r3, pc, #148	; (adr r3, 800a8a8 <Starting_Splashscreen+0x1c8>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f9 f8bf 	bl	8003998 <__aeabi_dcmplt>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d013      	beq.n	800a848 <Starting_Splashscreen+0x168>

				starting_splashscreen_scaling = starting_splashscreen_scaling + 0.01;
 800a820:	4b29      	ldr	r3, [pc, #164]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f7f8 ffff 	bl	8003828 <__aeabi_f2d>
 800a82a:	a321      	add	r3, pc, #132	; (adr r3, 800a8b0 <Starting_Splashscreen+0x1d0>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f7f8 fe9c 	bl	800356c <__adddf3>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4610      	mov	r0, r2
 800a83a:	4619      	mov	r1, r3
 800a83c:	f7f9 f8d4 	bl	80039e8 <__aeabi_d2f>
 800a840:	4603      	mov	r3, r0
 800a842:	4a21      	ldr	r2, [pc, #132]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	e027      	b.n	800a898 <Starting_Splashscreen+0x1b8>

			} else {

				upscale = 0;
 800a848:	4b23      	ldr	r3, [pc, #140]	; (800a8d8 <Starting_Splashscreen+0x1f8>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e023      	b.n	800a898 <Starting_Splashscreen+0x1b8>
			}

		} else {

			if (starting_splashscreen_scaling > 0){
 800a850:	4b1d      	ldr	r3, [pc, #116]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f04f 0100 	mov.w	r1, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f9 fbdf 	bl	800401c <__aeabi_fcmpgt>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d013      	beq.n	800a88c <Starting_Splashscreen+0x1ac>

				starting_splashscreen_scaling = starting_splashscreen_scaling - 0.01;
 800a864:	4b18      	ldr	r3, [pc, #96]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f8 ffdd 	bl	8003828 <__aeabi_f2d>
 800a86e:	a310      	add	r3, pc, #64	; (adr r3, 800a8b0 <Starting_Splashscreen+0x1d0>)
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	f7f8 fe78 	bl	8003568 <__aeabi_dsub>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4610      	mov	r0, r2
 800a87e:	4619      	mov	r1, r3
 800a880:	f7f9 f8b2 	bl	80039e8 <__aeabi_d2f>
 800a884:	4603      	mov	r3, r0
 800a886:	4a10      	ldr	r2, [pc, #64]	; (800a8c8 <Starting_Splashscreen+0x1e8>)
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	e005      	b.n	800a898 <Starting_Splashscreen+0x1b8>

			} else {

				upscale = 1;
 800a88c:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <Starting_Splashscreen+0x1f8>)
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]
				continue_scaling = 0;
 800a892:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <Starting_Splashscreen+0x1e4>)
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
			}

		}
	}

	UI_lastState = 1;
 800a898:	4b10      	ldr	r3, [pc, #64]	; (800a8dc <Starting_Splashscreen+0x1fc>)
 800a89a:	2201      	movs	r2, #1
 800a89c:	601a      	str	r2, [r3, #0]
}
 800a89e:	bf00      	nop
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bdb0      	pop	{r4, r5, r7, pc}
 800a8a4:	f3af 8000 	nop.w
 800a8a8:	9999999a 	.word	0x9999999a
 800a8ac:	3fb99999 	.word	0x3fb99999
 800a8b0:	47ae147b 	.word	0x47ae147b
 800a8b4:	3f847ae1 	.word	0x3f847ae1
 800a8b8:	20000ae0 	.word	0x20000ae0
 800a8bc:	20000014 	.word	0x20000014
 800a8c0:	20000bc8 	.word	0x20000bc8
 800a8c4:	20000018 	.word	0x20000018
 800a8c8:	20000020 	.word	0x20000020
 800a8cc:	ff800000 	.word	0xff800000
 800a8d0:	000e8800 	.word	0x000e8800
 800a8d4:	200004cc 	.word	0x200004cc
 800a8d8:	2000001c 	.word	0x2000001c
 800a8dc:	200009a0 	.word	0x200009a0

0800a8e0 <Ending_Splashscreen>:

void Ending_Splashscreen(void) {
 800a8e0:	b5b0      	push	{r4, r5, r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af04      	add	r7, sp, #16

	clearscreen();
 800a8e6:	f004 fced 	bl	800f2c4 <clearscreen>

	if (initiate_ending_splashscreen_fade){
 800a8ea:	4b5f      	ldr	r3, [pc, #380]	; (800aa68 <Ending_Splashscreen+0x188>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <Ending_Splashscreen+0x1c>

		ending_splashscreen_transparency_level -= 15;
 800a8f2:	4b5e      	ldr	r3, [pc, #376]	; (800aa6c <Ending_Splashscreen+0x18c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3b0f      	subs	r3, #15
 800a8f8:	4a5c      	ldr	r2, [pc, #368]	; (800aa6c <Ending_Splashscreen+0x18c>)
 800a8fa:	6013      	str	r3, [r2, #0]
	}

	App_WrCoCmd_Buffer(phost, COLOR_A(ending_splashscreen_transparency_level));
 800a8fc:	4b5c      	ldr	r3, [pc, #368]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	4b5a      	ldr	r3, [pc, #360]	; (800aa6c <Ending_Splashscreen+0x18c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a90a:	4619      	mov	r1, r3
 800a90c:	4610      	mov	r0, r2
 800a90e:	f003 f97d 	bl	800dc0c <App_WrCoCmd_Buffer>

	if (initiate_downscale == 1){
 800a912:	4b58      	ldr	r3, [pc, #352]	; (800aa74 <Ending_Splashscreen+0x194>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d144      	bne.n	800a9a4 <Ending_Splashscreen+0xc4>

		Gpu_CoCmd_LoadIdentity(phost);
 800a91a:	4b55      	ldr	r3, [pc, #340]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4618      	mov	r0, r3
 800a920:	f003 fb56 	bl	800dfd0 <Gpu_CoCmd_LoadIdentity>
		Gpu_CoCmd_Translate(phost, 65536 * 128, 65536 * 32);
 800a924:	4b52      	ldr	r3, [pc, #328]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a92c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800a930:	4618      	mov	r0, r3
 800a932:	f003 fb77 	bl	800e024 <Gpu_CoCmd_Translate>
		Gpu_CoCmd_Scale(phost, (1 - ending_splashscreen_scaling) * 65536, (1 - ending_splashscreen_scaling) * 65536);
 800a936:	4b4e      	ldr	r3, [pc, #312]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a938:	681c      	ldr	r4, [r3, #0]
 800a93a:	4b4f      	ldr	r3, [pc, #316]	; (800aa78 <Ending_Splashscreen+0x198>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4619      	mov	r1, r3
 800a940:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a944:	f7f9 f8a4 	bl	8003a90 <__aeabi_fsub>
 800a948:	4603      	mov	r3, r0
 800a94a:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f9 f9a8 	bl	8003ca4 <__aeabi_fmul>
 800a954:	4603      	mov	r3, r0
 800a956:	4618      	mov	r0, r3
 800a958:	f7f9 fb6a 	bl	8004030 <__aeabi_f2iz>
 800a95c:	4605      	mov	r5, r0
 800a95e:	4b46      	ldr	r3, [pc, #280]	; (800aa78 <Ending_Splashscreen+0x198>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4619      	mov	r1, r3
 800a964:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a968:	f7f9 f892 	bl	8003a90 <__aeabi_fsub>
 800a96c:	4603      	mov	r3, r0
 800a96e:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800a972:	4618      	mov	r0, r3
 800a974:	f7f9 f996 	bl	8003ca4 <__aeabi_fmul>
 800a978:	4603      	mov	r3, r0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f9 fb58 	bl	8004030 <__aeabi_f2iz>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	4629      	mov	r1, r5
 800a986:	4620      	mov	r0, r4
 800a988:	f003 fb6d 	bl	800e066 <Gpu_CoCmd_Scale>
		Gpu_CoCmd_Translate(phost, 65536 * -128, 65536 * -32);
 800a98c:	4b38      	ldr	r3, [pc, #224]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a3a      	ldr	r2, [pc, #232]	; (800aa7c <Ending_Splashscreen+0x19c>)
 800a992:	493b      	ldr	r1, [pc, #236]	; (800aa80 <Ending_Splashscreen+0x1a0>)
 800a994:	4618      	mov	r0, r3
 800a996:	f003 fb45 	bl	800e024 <Gpu_CoCmd_Translate>
		Gpu_CoCmd_SetMatrix(phost);
 800a99a:	4b35      	ldr	r3, [pc, #212]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f003 fb82 	bl	800e0a8 <Gpu_CoCmd_SetMatrix>
	}

	Load_ImageASTC(&host, 943104, COMPRESSED_RGBA_ASTC_5x5_KHR, 240, 60, 122, 110);
 800a9a4:	236e      	movs	r3, #110	; 0x6e
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	237a      	movs	r3, #122	; 0x7a
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	233c      	movs	r3, #60	; 0x3c
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	23f0      	movs	r3, #240	; 0xf0
 800a9b2:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800a9b6:	4933      	ldr	r1, [pc, #204]	; (800aa84 <Ending_Splashscreen+0x1a4>)
 800a9b8:	4833      	ldr	r0, [pc, #204]	; (800aa88 <Ending_Splashscreen+0x1a8>)
 800a9ba:	f004 fcab 	bl	800f314 <Load_ImageASTC>

	Gpu_CoCmd_LoadIdentity(phost);
 800a9be:	4b2c      	ldr	r3, [pc, #176]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f003 fb04 	bl	800dfd0 <Gpu_CoCmd_LoadIdentity>
	Gpu_CoCmd_Scale(phost,1 * 65536, 1 * 65536);
 800a9c8:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a9d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f003 fb46 	bl	800e066 <Gpu_CoCmd_Scale>
	Gpu_CoCmd_SetMatrix(phost);
 800a9da:	4b25      	ldr	r3, [pc, #148]	; (800aa70 <Ending_Splashscreen+0x190>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f003 fb62 	bl	800e0a8 <Gpu_CoCmd_SetMatrix>

	Barlow_bold_24();
 800a9e4:	f004 fabe 	bl	800ef64 <Barlow_bold_24>
	load_color_white();
 800a9e8:	f004 f8de 	bl	800eba8 <load_color_white>

	launch_dash();
 800a9ec:	f004 fc5e 	bl	800f2ac <launch_dash>
	clear_buffer();
 800a9f0:	f004 fc76 	bl	800f2e0 <clear_buffer>

	if (initiate_downscale == 1){
 800a9f4:	4b1f      	ldr	r3, [pc, #124]	; (800aa74 <Ending_Splashscreen+0x194>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d126      	bne.n	800aa4a <Ending_Splashscreen+0x16a>
		if (ending_splashscreen_scaling < 0.8){
 800a9fc:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <Ending_Splashscreen+0x198>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f8 ff11 	bl	8003828 <__aeabi_f2d>
 800aa06:	a314      	add	r3, pc, #80	; (adr r3, 800aa58 <Ending_Splashscreen+0x178>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f7f8 ffc4 	bl	8003998 <__aeabi_dcmplt>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d013      	beq.n	800aa3e <Ending_Splashscreen+0x15e>
			ending_splashscreen_scaling += 0.05;
 800aa16:	4b18      	ldr	r3, [pc, #96]	; (800aa78 <Ending_Splashscreen+0x198>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f8 ff04 	bl	8003828 <__aeabi_f2d>
 800aa20:	a30f      	add	r3, pc, #60	; (adr r3, 800aa60 <Ending_Splashscreen+0x180>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f8 fda1 	bl	800356c <__adddf3>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4610      	mov	r0, r2
 800aa30:	4619      	mov	r1, r3
 800aa32:	f7f8 ffd9 	bl	80039e8 <__aeabi_d2f>
 800aa36:	4603      	mov	r3, r0
 800aa38:	4a0f      	ldr	r2, [pc, #60]	; (800aa78 <Ending_Splashscreen+0x198>)
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	e005      	b.n	800aa4a <Ending_Splashscreen+0x16a>
		} else {
			initiate_downscale = 0;
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <Ending_Splashscreen+0x194>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
			ending_splashscreen_scaling = 0.05;
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <Ending_Splashscreen+0x198>)
 800aa46:	4a11      	ldr	r2, [pc, #68]	; (800aa8c <Ending_Splashscreen+0x1ac>)
 800aa48:	601a      	str	r2, [r3, #0]
		}
	}

	UI_lastState = 1;
 800aa4a:	4b11      	ldr	r3, [pc, #68]	; (800aa90 <Ending_Splashscreen+0x1b0>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]
}
 800aa50:	bf00      	nop
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bdb0      	pop	{r4, r5, r7, pc}
 800aa56:	bf00      	nop
 800aa58:	9999999a 	.word	0x9999999a
 800aa5c:	3fe99999 	.word	0x3fe99999
 800aa60:	9999999a 	.word	0x9999999a
 800aa64:	3fa99999 	.word	0x3fa99999
 800aa68:	20000884 	.word	0x20000884
 800aa6c:	20000028 	.word	0x20000028
 800aa70:	20000bc8 	.word	0x20000bc8
 800aa74:	20000260 	.word	0x20000260
 800aa78:	20000024 	.word	0x20000024
 800aa7c:	ffe00000 	.word	0xffe00000
 800aa80:	ff800000 	.word	0xff800000
 800aa84:	000e6400 	.word	0x000e6400
 800aa88:	20000ae0 	.word	0x20000ae0
 800aa8c:	3d4ccccd 	.word	0x3d4ccccd
 800aa90:	200009a0 	.word	0x200009a0

0800aa94 <Discharging_UI>:


void Discharging_UI(void) {
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0

	App_Common_Init(&host);
 800aa98:	481c      	ldr	r0, [pc, #112]	; (800ab0c <Discharging_UI+0x78>)
 800aa9a:	f003 f8d9 	bl	800dc50 <App_Common_Init>
	initialize_graphics_controller();
 800aa9e:	f004 fbab 	bl	800f1f8 <initialize_graphics_controller>
	set_ui_mode();
 800aaa2:	f004 f987 	bl	800edb4 <set_ui_mode>
	background_color_black();
 800aaa6:	f004 f8a5 	bl	800ebf4 <background_color_black>

	clearscreen();
 800aaaa:	f004 fc0b 	bl	800f2c4 <clearscreen>

	add_background_wallpaper();		// Rounded corners wallpaper
 800aaae:	f002 fa47 	bl	800cf40 <add_background_wallpaper>

	show_icons_home();
 800aab2:	f000 ffff 	bl	800bab4 <show_icons_home>
	show_soc_percent_value();
 800aab6:	f001 fa61 	bl	800bf7c <show_soc_percent_value>

	if (battery_warning){
 800aaba:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <Discharging_UI+0x7c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <Discharging_UI+0x32>
		dynamic_warning_sign();
 800aac2:	f000 fc33 	bl	800b32c <dynamic_warning_sign>
	}

	show_realtime();
 800aac6:	f001 ff19 	bl	800c8fc <show_realtime>

	if (call_status == INCOMING){
 800aaca:	4b12      	ldr	r3, [pc, #72]	; (800ab14 <Discharging_UI+0x80>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d101      	bne.n	800aad6 <Discharging_UI+0x42>
		show_incoming_call_notification();
 800aad2:	f002 fb95 	bl	800d200 <show_incoming_call_notification>
	}
	show_bikename();
 800aad6:	f001 fac5 	bl	800c064 <show_bikename>
	show_temperature_value();
 800aada:	f001 fadd 	bl	800c098 <show_temperature_value>
	show_Whpkm_indicator_line();
 800aade:	f000 fdcf 	bl	800b680 <show_Whpkm_indicator_line>
	show_drive_mode();
 800aae2:	f000 fe4d 	bl	800b780 <show_drive_mode>
	show_trip_distance();
 800aae6:	f000 febf 	bl	800b868 <show_trip_distance>
	show_odometer();
 800aaea:	f000 fe95 	bl	800b818 <show_odometer>
	show_Whpkm_value();
 800aaee:	f000 fe69 	bl	800b7c4 <show_Whpkm_value>
	show_bikespeed();
 800aaf2:	f000 fee3 	bl	800b8bc <show_bikespeed>
	show_sidelight();
 800aaf6:	f000 ff0f 	bl	800b918 <show_sidelight>

	launch_dash();
 800aafa:	f004 fbd7 	bl	800f2ac <launch_dash>
	clear_buffer();
 800aafe:	f004 fbef 	bl	800f2e0 <clear_buffer>

	UI_lastState = 1;
 800ab02:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <Discharging_UI+0x84>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
}
 800ab08:	bf00      	nop
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20000ae0 	.word	0x20000ae0
 800ab10:	2000025c 	.word	0x2000025c
 800ab14:	200004ec 	.word	0x200004ec
 800ab18:	200009a0 	.word	0x200009a0

0800ab1c <Stats_UI>:

void Stats_UI(void) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af02      	add	r7, sp, #8

	App_Common_Init(&host);
 800ab22:	4891      	ldr	r0, [pc, #580]	; (800ad68 <Stats_UI+0x24c>)
 800ab24:	f003 f894 	bl	800dc50 <App_Common_Init>
	initialize_graphics_controller();
 800ab28:	f004 fb66 	bl	800f1f8 <initialize_graphics_controller>

	set_ui_mode();
 800ab2c:	f004 f942 	bl	800edb4 <set_ui_mode>
	background_color_black();
 800ab30:	f004 f860 	bl	800ebf4 <background_color_black>

	clearscreen();
 800ab34:	f004 fbc6 	bl	800f2c4 <clearscreen>

	add_background_wallpaper();		// Rounded corners wallpaper
 800ab38:	f002 fa02 	bl	800cf40 <add_background_wallpaper>
	show_icons_stats();
 800ab3c:	f000 ffd4 	bl	800bae8 <show_icons_stats>
	show_soc_percent_value();
 800ab40:	f001 fa1c 	bl	800bf7c <show_soc_percent_value>

	if (battery_warning){
 800ab44:	4b89      	ldr	r3, [pc, #548]	; (800ad6c <Stats_UI+0x250>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <Stats_UI+0x34>
		dynamic_warning_sign();
 800ab4c:	f000 fbee 	bl	800b32c <dynamic_warning_sign>
	}
	show_realtime();
 800ab50:	f001 fed4 	bl	800c8fc <show_realtime>

	if (call_status == INCOMING){
 800ab54:	4b86      	ldr	r3, [pc, #536]	; (800ad70 <Stats_UI+0x254>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <Stats_UI+0x44>
		show_incoming_call_notification();
 800ab5c:	f002 fb50 	bl	800d200 <show_incoming_call_notification>
	}
	show_stats_odo();
 800ab60:	f001 ff6c 	bl	800ca3c <show_stats_odo>
	show_ride_profile_stats();
 800ab64:	f001 fef0 	bl	800c948 <show_ride_profile_stats>
	show_sidelight();
 800ab68:	f000 fed6 	bl	800b918 <show_sidelight>
	show_odo_graph();
 800ab6c:	f001 ffe0 	bl	800cb30 <show_odo_graph>
	show_bikename();
 800ab70:	f001 fa78 	bl	800c064 <show_bikename>

	Find_Day_of_week(present_day);
 800ab74:	4b7f      	ldr	r3, [pc, #508]	; (800ad74 <Stats_UI+0x258>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fa fdb3 	bl	80056e4 <Find_Day_of_week>

	if (ota_available_flag == 1) {
 800ab7e:	4b7e      	ldr	r3, [pc, #504]	; (800ad78 <Stats_UI+0x25c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d103      	bne.n	800ab8e <Stats_UI+0x72>
		add_transparent_film();
 800ab86:	f002 f8e7 	bl	800cd58 <add_transparent_film>
		popup_test();
 800ab8a:	f002 f925 	bl	800cdd8 <popup_test>
	}

	// Show the extra UI
	if (kill_switch_status == kill_sw_OFF) {
 800ab8e:	4b7b      	ldr	r3, [pc, #492]	; (800ad7c <Stats_UI+0x260>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	f040 80c3 	bne.w	800ad1e <Stats_UI+0x202>

			if (kill_switch_just_pressed){
 800ab98:	4b79      	ldr	r3, [pc, #484]	; (800ad80 <Stats_UI+0x264>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <Stats_UI+0x90>

				kill_transparency_level += 15;
 800aba0:	4b78      	ldr	r3, [pc, #480]	; (800ad84 <Stats_UI+0x268>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	330f      	adds	r3, #15
 800aba6:	4a77      	ldr	r2, [pc, #476]	; (800ad84 <Stats_UI+0x268>)
 800aba8:	6013      	str	r3, [r2, #0]
 800abaa:	e002      	b.n	800abb2 <Stats_UI+0x96>

			} else {

				kill_transparency_level = 240;
 800abac:	4b75      	ldr	r3, [pc, #468]	; (800ad84 <Stats_UI+0x268>)
 800abae:	22f0      	movs	r2, #240	; 0xf0
 800abb0:	601a      	str	r2, [r3, #0]
			}

			App_WrCoCmd_Buffer(phost, COLOR_A(kill_transparency_level));
 800abb2:	4b75      	ldr	r3, [pc, #468]	; (800ad88 <Stats_UI+0x26c>)
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	4b73      	ldr	r3, [pc, #460]	; (800ad84 <Stats_UI+0x268>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f003 f822 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, popup_color[5]);
 800abc8:	4b6f      	ldr	r3, [pc, #444]	; (800ad88 <Stats_UI+0x26c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a6f      	ldr	r2, [pc, #444]	; (800ad8c <Stats_UI+0x270>)
 800abce:	6952      	ldr	r2, [r2, #20]
 800abd0:	4611      	mov	r1, r2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f003 f81a 	bl	800dc0c <App_WrCoCmd_Buffer>
//			App_WrCoCmd_Buffer(phost, COLOR_RGB(popup_color[5][0], popup_color[5][1], popup_color[5][2]));
//			App_WrCoCmd_Buffer(phost, COLOR_RGB(64, 64, 64));

			App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800abd8:	4b6b      	ldr	r3, [pc, #428]	; (800ad88 <Stats_UI+0x26c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	496c      	ldr	r1, [pc, #432]	; (800ad90 <Stats_UI+0x274>)
 800abde:	4618      	mov	r0, r3
 800abe0:	f003 f814 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, LINE_WIDTH(200));
 800abe4:	4b68      	ldr	r3, [pc, #416]	; (800ad88 <Stats_UI+0x26c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	496a      	ldr	r1, [pc, #424]	; (800ad94 <Stats_UI+0x278>)
 800abea:	4618      	mov	r0, r3
 800abec:	f003 f80e 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(13, 13, 0, 0));
 800abf0:	4b65      	ldr	r3, [pc, #404]	; (800ad88 <Stats_UI+0x26c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4968      	ldr	r1, [pc, #416]	; (800ad98 <Stats_UI+0x27c>)
 800abf6:	4618      	mov	r0, r3
 800abf8:	f003 f808 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(467, 259, 0, 0));
 800abfc:	4b62      	ldr	r3, [pc, #392]	; (800ad88 <Stats_UI+0x26c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4966      	ldr	r1, [pc, #408]	; (800ad9c <Stats_UI+0x280>)
 800ac02:	4618      	mov	r0, r3
 800ac04:	f003 f802 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, END());
 800ac08:	4b5f      	ldr	r3, [pc, #380]	; (800ad88 <Stats_UI+0x26c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800ac10:	4618      	mov	r0, r3
 800ac12:	f002 fffb 	bl	800dc0c <App_WrCoCmd_Buffer>

			App_WrCoCmd_Buffer(phost, COLOR_A(kill_transparency_level + 10));
 800ac16:	4b5c      	ldr	r3, [pc, #368]	; (800ad88 <Stats_UI+0x26c>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b5a      	ldr	r3, [pc, #360]	; (800ad84 <Stats_UI+0x268>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	330a      	adds	r3, #10
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac26:	4619      	mov	r1, r3
 800ac28:	4610      	mov	r0, r2
 800ac2a:	f002 ffef 	bl	800dc0c <App_WrCoCmd_Buffer>

			Barlow_semibold_112();
 800ac2e:	f004 fac5 	bl	800f1bc <Barlow_semibold_112>
			r2p();
 800ac32:	f004 f85f 	bl	800ecf4 <r2p>
			Gpu_CoCmd_Text(phost, 240, 39, 1, OPT_CENTERX, ":");
 800ac36:	4b54      	ldr	r3, [pc, #336]	; (800ad88 <Stats_UI+0x26c>)
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	4b59      	ldr	r3, [pc, #356]	; (800ada0 <Stats_UI+0x284>)
 800ac3c:	9301      	str	r3, [sp, #4]
 800ac3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	2301      	movs	r3, #1
 800ac46:	2227      	movs	r2, #39	; 0x27
 800ac48:	21f0      	movs	r1, #240	; 0xf0
 800ac4a:	f003 f946 	bl	800deda <Gpu_CoCmd_Text>

			load_color_white();
 800ac4e:	f003 ffab 	bl	800eba8 <load_color_white>
			Gpu_CoCmd_Text(phost, 160, 39, 1, OPT_CENTERX, lock_screen_time_hrs);
 800ac52:	4b4d      	ldr	r3, [pc, #308]	; (800ad88 <Stats_UI+0x26c>)
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	4b53      	ldr	r3, [pc, #332]	; (800ada4 <Stats_UI+0x288>)
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	2301      	movs	r3, #1
 800ac62:	2227      	movs	r2, #39	; 0x27
 800ac64:	21a0      	movs	r1, #160	; 0xa0
 800ac66:	f003 f938 	bl	800deda <Gpu_CoCmd_Text>
			Gpu_CoCmd_Text(phost, 320, 39, 1, OPT_CENTERX, lock_screen_time_min);
 800ac6a:	4b47      	ldr	r3, [pc, #284]	; (800ad88 <Stats_UI+0x26c>)
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	4b4e      	ldr	r3, [pc, #312]	; (800ada8 <Stats_UI+0x28c>)
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	2301      	movs	r3, #1
 800ac7a:	2227      	movs	r2, #39	; 0x27
 800ac7c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac80:	f003 f92b 	bl	800deda <Gpu_CoCmd_Text>

			Barlow_bold_24();
 800ac84:	f004 f96e 	bl	800ef64 <Barlow_bold_24>
			Gpu_CoCmd_Text(phost, 160, 163, 1, OPT_CENTERX, today);
 800ac88:	4b3f      	ldr	r3, [pc, #252]	; (800ad88 <Stats_UI+0x26c>)
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	4b47      	ldr	r3, [pc, #284]	; (800adac <Stats_UI+0x290>)
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	2301      	movs	r3, #1
 800ac98:	22a3      	movs	r2, #163	; 0xa3
 800ac9a:	21a0      	movs	r1, #160	; 0xa0
 800ac9c:	f003 f91d 	bl	800deda <Gpu_CoCmd_Text>
			Gpu_CoCmd_Text(phost, 160, 191, 1, OPT_CENTERX, lock_screen_date);
 800aca0:	4b39      	ldr	r3, [pc, #228]	; (800ad88 <Stats_UI+0x26c>)
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	4b42      	ldr	r3, [pc, #264]	; (800adb0 <Stats_UI+0x294>)
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	2301      	movs	r3, #1
 800acb0:	22bf      	movs	r2, #191	; 0xbf
 800acb2:	21a0      	movs	r1, #160	; 0xa0
 800acb4:	f003 f911 	bl	800deda <Gpu_CoCmd_Text>
			Gpu_CoCmd_Text(phost, 368, 183, 1, 0, "%");
 800acb8:	4b33      	ldr	r3, [pc, #204]	; (800ad88 <Stats_UI+0x26c>)
 800acba:	6818      	ldr	r0, [r3, #0]
 800acbc:	4b3d      	ldr	r3, [pc, #244]	; (800adb4 <Stats_UI+0x298>)
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	2300      	movs	r3, #0
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	2301      	movs	r3, #1
 800acc6:	22b7      	movs	r2, #183	; 0xb7
 800acc8:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800accc:	f003 f905 	bl	800deda <Gpu_CoCmd_Text>

			Barlow_semibold_48();
 800acd0:	f004 fa56 	bl	800f180 <Barlow_semibold_48>

			(charging_SoC > 50?load_color_light_green():(charging_SoC <= 20?load_color_red():load_color_orange()));
 800acd4:	4b38      	ldr	r3, [pc, #224]	; (800adb8 <Stats_UI+0x29c>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b32      	cmp	r3, #50	; 0x32
 800acda:	d902      	bls.n	800ace2 <Stats_UI+0x1c6>
 800acdc:	f003 ffe0 	bl	800eca0 <load_color_light_green>
 800ace0:	e008      	b.n	800acf4 <Stats_UI+0x1d8>
 800ace2:	4b35      	ldr	r3, [pc, #212]	; (800adb8 <Stats_UI+0x29c>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b14      	cmp	r3, #20
 800ace8:	d802      	bhi.n	800acf0 <Stats_UI+0x1d4>
 800acea:	f003 ff31 	bl	800eb50 <load_color_red>
 800acee:	e001      	b.n	800acf4 <Stats_UI+0x1d8>
 800acf0:	f003 ff12 	bl	800eb18 <load_color_orange>

			Gpu_CoCmd_Text(phost, 364, 168, 1, OPT_RIGHTX, dash_dischargingSoC);
 800acf4:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <Stats_UI+0x26c>)
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	4b30      	ldr	r3, [pc, #192]	; (800adbc <Stats_UI+0x2a0>)
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	2301      	movs	r3, #1
 800ad04:	22a8      	movs	r2, #168	; 0xa8
 800ad06:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800ad0a:	f003 f8e6 	bl	800deda <Gpu_CoCmd_Text>

			if (kill_transparency_level >= 240){
 800ad0e:	4b1d      	ldr	r3, [pc, #116]	; (800ad84 <Stats_UI+0x268>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2bef      	cmp	r3, #239	; 0xef
 800ad14:	dd1b      	ble.n	800ad4e <Stats_UI+0x232>
				kill_switch_just_pressed = 0;
 800ad16:	4b1a      	ldr	r3, [pc, #104]	; (800ad80 <Stats_UI+0x264>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	e017      	b.n	800ad4e <Stats_UI+0x232>
			}

		} else if (kill_switch_status == kill_sw_ON) {
 800ad1e:	4b17      	ldr	r3, [pc, #92]	; (800ad7c <Stats_UI+0x260>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d113      	bne.n	800ad4e <Stats_UI+0x232>

			if (kill_switch_just_pressed){
 800ad26:	4b16      	ldr	r3, [pc, #88]	; (800ad80 <Stats_UI+0x264>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00c      	beq.n	800ad48 <Stats_UI+0x22c>

				kill_transparency_level -= 80;
 800ad2e:	4b15      	ldr	r3, [pc, #84]	; (800ad84 <Stats_UI+0x268>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3b50      	subs	r3, #80	; 0x50
 800ad34:	4a13      	ldr	r2, [pc, #76]	; (800ad84 <Stats_UI+0x268>)
 800ad36:	6013      	str	r3, [r2, #0]

				if (kill_transparency_level <= 0){
 800ad38:	4b12      	ldr	r3, [pc, #72]	; (800ad84 <Stats_UI+0x268>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dc06      	bgt.n	800ad4e <Stats_UI+0x232>
					kill_switch_just_pressed = 0;
 800ad40:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <Stats_UI+0x264>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	e002      	b.n	800ad4e <Stats_UI+0x232>
				}

			} else {

				kill_transparency_level = 180;
 800ad48:	4b0e      	ldr	r3, [pc, #56]	; (800ad84 <Stats_UI+0x268>)
 800ad4a:	22b4      	movs	r2, #180	; 0xb4
 800ad4c:	601a      	str	r2, [r3, #0]
			}
		}

	launch_dash();
 800ad4e:	f004 faad 	bl	800f2ac <launch_dash>
	clear_buffer();
 800ad52:	f004 fac5 	bl	800f2e0 <clear_buffer>

	UI_lastState = 1;
 800ad56:	4b1a      	ldr	r3, [pc, #104]	; (800adc0 <Stats_UI+0x2a4>)
 800ad58:	2201      	movs	r2, #1
 800ad5a:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	f7fb fc81 	bl	8006664 <HAL_Delay>
}
 800ad62:	bf00      	nop
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20000ae0 	.word	0x20000ae0
 800ad6c:	2000025c 	.word	0x2000025c
 800ad70:	200004ec 	.word	0x200004ec
 800ad74:	200003ac 	.word	0x200003ac
 800ad78:	200004a0 	.word	0x200004a0
 800ad7c:	2000099c 	.word	0x2000099c
 800ad80:	20000768 	.word	0x20000768
 800ad84:	2000002c 	.word	0x2000002c
 800ad88:	20000bc8 	.word	0x20000bc8
 800ad8c:	20000c6c 	.word	0x20000c6c
 800ad90:	1f000009 	.word	0x1f000009
 800ad94:	0e0000c8 	.word	0x0e0000c8
 800ad98:	81a0d000 	.word	0x81a0d000
 800ad9c:	ba703000 	.word	0xba703000
 800ada0:	0800faf0 	.word	0x0800faf0
 800ada4:	200007a0 	.word	0x200007a0
 800ada8:	20000584 	.word	0x20000584
 800adac:	200007fc 	.word	0x200007fc
 800adb0:	20000388 	.word	0x20000388
 800adb4:	0800faf4 	.word	0x0800faf4
 800adb8:	20000744 	.word	0x20000744
 800adbc:	2000077c 	.word	0x2000077c
 800adc0:	200009a0 	.word	0x200009a0

0800adc4 <Wish_Happy_Birthday>:

// Load Local libraries
#include "wish_message_pages.h"
#include "design_elements.h"

void Wish_Happy_Birthday(void) {
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af02      	add	r7, sp, #8

	App_Common_Init(&host);
 800adca:	483b      	ldr	r0, [pc, #236]	; (800aeb8 <Wish_Happy_Birthday+0xf4>)
 800adcc:	f002 ff40 	bl	800dc50 <App_Common_Init>
	initialize_graphics_controller();
 800add0:	f004 fa12 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800add4:	f003 ff0e 	bl	800ebf4 <background_color_black>
	clearscreen();
 800add8:	f004 fa74 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800addc:	f001 ffa2 	bl	800cd24 <show_small_yatri_logo>

	Barlow_extrabold_40();
 800ade0:	f004 f91a 	bl	800f018 <Barlow_extrabold_40>
	load_color_white();
 800ade4:	f003 fee0 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 70, 1, OPT_CENTERX | OPT_CENTERY, "HAPPY  BIRTHDAY !");
 800ade8:	4b34      	ldr	r3, [pc, #208]	; (800aebc <Wish_Happy_Birthday+0xf8>)
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	4b34      	ldr	r3, [pc, #208]	; (800aec0 <Wish_Happy_Birthday+0xfc>)
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	2301      	movs	r3, #1
 800adf8:	2246      	movs	r2, #70	; 0x46
 800adfa:	21f0      	movs	r1, #240	; 0xf0
 800adfc:	f003 f86d 	bl	800deda <Gpu_CoCmd_Text>

	Barlow_semibold_48();
 800ae00:	f004 f9be 	bl	800f180 <Barlow_semibold_48>
	load_color_turquoise();
 800ae04:	f003 fe5e 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 100, 1, OPT_CENTERX, dash_username);
 800ae08:	4b2c      	ldr	r3, [pc, #176]	; (800aebc <Wish_Happy_Birthday+0xf8>)
 800ae0a:	6818      	ldr	r0, [r3, #0]
 800ae0c:	4b2d      	ldr	r3, [pc, #180]	; (800aec4 <Wish_Happy_Birthday+0x100>)
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	2301      	movs	r3, #1
 800ae18:	2264      	movs	r2, #100	; 0x64
 800ae1a:	21f0      	movs	r1, #240	; 0xf0
 800ae1c:	f003 f85d 	bl	800deda <Gpu_CoCmd_Text>
//	Gpu_CoCmd_Text(phost, 240, 100, 1, OPT_CENTERX, "Thakur");

	Barlow_bold_24();
 800ae20:	f004 f8a0 	bl	800ef64 <Barlow_bold_24>
	load_color_lightMode_grey_137();
 800ae24:	f003 ff12 	bl	800ec4c <load_color_lightMode_grey_137>
	Gpu_CoCmd_Text(phost, 121, 175, 1, 0, "You are");
 800ae28:	4b24      	ldr	r3, [pc, #144]	; (800aebc <Wish_Happy_Birthday+0xf8>)
 800ae2a:	6818      	ldr	r0, [r3, #0]
 800ae2c:	4b26      	ldr	r3, [pc, #152]	; (800aec8 <Wish_Happy_Birthday+0x104>)
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	2300      	movs	r3, #0
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	2301      	movs	r3, #1
 800ae36:	22af      	movs	r2, #175	; 0xaf
 800ae38:	2179      	movs	r1, #121	; 0x79
 800ae3a:	f003 f84e 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800ae3e:	f003 fe41 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 208, 175, 1, 0, "#");
 800ae42:	4b1e      	ldr	r3, [pc, #120]	; (800aebc <Wish_Happy_Birthday+0xf8>)
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	4b21      	ldr	r3, [pc, #132]	; (800aecc <Wish_Happy_Birthday+0x108>)
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2301      	movs	r3, #1
 800ae50:	22af      	movs	r2, #175	; 0xaf
 800ae52:	21d0      	movs	r1, #208	; 0xd0
 800ae54:	f003 f841 	bl	800deda <Gpu_CoCmd_Text>

	load_color_white();
 800ae58:	f003 fea6 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 225, 175, 1, 0, "Silently");
 800ae5c:	4b17      	ldr	r3, [pc, #92]	; (800aebc <Wish_Happy_Birthday+0xf8>)
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	4b1b      	ldr	r3, [pc, #108]	; (800aed0 <Wish_Happy_Birthday+0x10c>)
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	2300      	movs	r3, #0
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	22af      	movs	r2, #175	; 0xaf
 800ae6c:	21e1      	movs	r1, #225	; 0xe1
 800ae6e:	f003 f834 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800ae72:	f003 fe27 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 306, 175, 1, 0, "Bold");
 800ae76:	4b11      	ldr	r3, [pc, #68]	; (800aebc <Wish_Happy_Birthday+0xf8>)
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <Wish_Happy_Birthday+0x110>)
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	2301      	movs	r3, #1
 800ae84:	22af      	movs	r2, #175	; 0xaf
 800ae86:	f44f 7199 	mov.w	r1, #306	; 0x132
 800ae8a:	f003 f826 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_137();
 800ae8e:	f003 fedd 	bl	800ec4c <load_color_lightMode_grey_137>
	Gpu_CoCmd_Text(phost, 354, 175, 1, 0, ".");
 800ae92:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <Wish_Happy_Birthday+0xf8>)
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	4b10      	ldr	r3, [pc, #64]	; (800aed8 <Wish_Happy_Birthday+0x114>)
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	22af      	movs	r2, #175	; 0xaf
 800aea2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aea6:	f003 f818 	bl	800deda <Gpu_CoCmd_Text>

	launch_dash();
 800aeaa:	f004 f9ff 	bl	800f2ac <launch_dash>
	clear_buffer();
 800aeae:	f004 fa17 	bl	800f2e0 <clear_buffer>
}
 800aeb2:	bf00      	nop
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	20000ae0 	.word	0x20000ae0
 800aebc:	20000bc8 	.word	0x20000bc8
 800aec0:	0800faf8 	.word	0x0800faf8
 800aec4:	200005d4 	.word	0x200005d4
 800aec8:	0800fb0c 	.word	0x0800fb0c
 800aecc:	0800fb14 	.word	0x0800fb14
 800aed0:	0800fb18 	.word	0x0800fb18
 800aed4:	0800fb24 	.word	0x0800fb24
 800aed8:	0800fb2c 	.word	0x0800fb2c

0800aedc <Wish_Happy_New_Year>:

void Wish_Happy_New_Year(void) {
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af02      	add	r7, sp, #8

	App_Common_Init(&host);
 800aee2:	481f      	ldr	r0, [pc, #124]	; (800af60 <Wish_Happy_New_Year+0x84>)
 800aee4:	f002 feb4 	bl	800dc50 <App_Common_Init>
	initialize_graphics_controller();
 800aee8:	f004 f986 	bl	800f1f8 <initialize_graphics_controller>
	background_color_black();
 800aeec:	f003 fe82 	bl	800ebf4 <background_color_black>
	clearscreen();
 800aef0:	f004 f9e8 	bl	800f2c4 <clearscreen>

	show_small_yatri_logo();
 800aef4:	f001 ff16 	bl	800cd24 <show_small_yatri_logo>

	Barlow_bold_32();
 800aef8:	f004 f816 	bl	800ef28 <Barlow_bold_32>
	load_color_white();
 800aefc:	f003 fe54 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 240, 80, 1, OPT_CENTERX | OPT_CENTERY, "HAPPY NEW YEAR");
 800af00:	4b18      	ldr	r3, [pc, #96]	; (800af64 <Wish_Happy_New_Year+0x88>)
 800af02:	6818      	ldr	r0, [r3, #0]
 800af04:	4b18      	ldr	r3, [pc, #96]	; (800af68 <Wish_Happy_New_Year+0x8c>)
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	2301      	movs	r3, #1
 800af10:	2250      	movs	r2, #80	; 0x50
 800af12:	21f0      	movs	r1, #240	; 0xf0
 800af14:	f002 ffe1 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 240, 125, 1, OPT_CENTERX | OPT_CENTERY, dash_year_BS);
 800af18:	4b12      	ldr	r3, [pc, #72]	; (800af64 <Wish_Happy_New_Year+0x88>)
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	4b13      	ldr	r3, [pc, #76]	; (800af6c <Wish_Happy_New_Year+0x90>)
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	2301      	movs	r3, #1
 800af28:	227d      	movs	r2, #125	; 0x7d
 800af2a:	21f0      	movs	r1, #240	; 0xf0
 800af2c:	f002 ffd5 	bl	800deda <Gpu_CoCmd_Text>

	Barlow_semibold_32();
 800af30:	f004 f908 	bl	800f144 <Barlow_semibold_32>
	load_color_turquoise();
 800af34:	f003 fdc6 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 240, 170, 1, OPT_CENTERX | OPT_CENTERY, "Enjoy your ride.");
 800af38:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <Wish_Happy_New_Year+0x88>)
 800af3a:	6818      	ldr	r0, [r3, #0]
 800af3c:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <Wish_Happy_New_Year+0x94>)
 800af3e:	9301      	str	r3, [sp, #4]
 800af40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	2301      	movs	r3, #1
 800af48:	22aa      	movs	r2, #170	; 0xaa
 800af4a:	21f0      	movs	r1, #240	; 0xf0
 800af4c:	f002 ffc5 	bl	800deda <Gpu_CoCmd_Text>

	launch_dash();
 800af50:	f004 f9ac 	bl	800f2ac <launch_dash>
	clear_buffer();
 800af54:	f004 f9c4 	bl	800f2e0 <clear_buffer>
}
 800af58:	bf00      	nop
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20000ae0 	.word	0x20000ae0
 800af64:	20000bc8 	.word	0x20000bc8
 800af68:	0800fb30 	.word	0x0800fb30
 800af6c:	200005f4 	.word	0x200005f4
 800af70:	0800fb40 	.word	0x0800fb40

0800af74 <calculate_range_for_barGraph>:
int ui_color[5];
extern char *seven_days_of_a_week[7];

//uint16_t weekly_data[7] = {50, 60, 70, 260, 20, 30, 40};

void calculate_range_for_barGraph(void) {
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af02      	add	r7, sp, #8

	present_maximum_odo = calculate_odo_max();
 800af7a:	f000 f8ef 	bl	800b15c <calculate_odo_max>
 800af7e:	4603      	mov	r3, r0
 800af80:	461a      	mov	r2, r3
 800af82:	4b53      	ldr	r3, [pc, #332]	; (800b0d0 <calculate_range_for_barGraph+0x15c>)
 800af84:	801a      	strh	r2, [r3, #0]

	if (present_maximum_odo != last_maximum_odo) {
 800af86:	4b52      	ldr	r3, [pc, #328]	; (800b0d0 <calculate_range_for_barGraph+0x15c>)
 800af88:	881a      	ldrh	r2, [r3, #0]
 800af8a:	4b52      	ldr	r3, [pc, #328]	; (800b0d4 <calculate_range_for_barGraph+0x160>)
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d03f      	beq.n	800b012 <calculate_range_for_barGraph+0x9e>

		temp_odo_increment = present_maximum_odo;
 800af92:	4b4f      	ldr	r3, [pc, #316]	; (800b0d0 <calculate_range_for_barGraph+0x15c>)
 800af94:	881a      	ldrh	r2, [r3, #0]
 800af96:	4b50      	ldr	r3, [pc, #320]	; (800b0d8 <calculate_range_for_barGraph+0x164>)
 800af98:	801a      	strh	r2, [r3, #0]

		while (temp_odo_increment % 3 != 0 || temp_odo_increment % 10 != 0) {
 800af9a:	e005      	b.n	800afa8 <calculate_range_for_barGraph+0x34>
			temp_odo_increment += 1;
 800af9c:	4b4e      	ldr	r3, [pc, #312]	; (800b0d8 <calculate_range_for_barGraph+0x164>)
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	3301      	adds	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	4b4c      	ldr	r3, [pc, #304]	; (800b0d8 <calculate_range_for_barGraph+0x164>)
 800afa6:	801a      	strh	r2, [r3, #0]
		while (temp_odo_increment % 3 != 0 || temp_odo_increment % 10 != 0) {
 800afa8:	4b4b      	ldr	r3, [pc, #300]	; (800b0d8 <calculate_range_for_barGraph+0x164>)
 800afaa:	881a      	ldrh	r2, [r3, #0]
 800afac:	4b4b      	ldr	r3, [pc, #300]	; (800b0dc <calculate_range_for_barGraph+0x168>)
 800afae:	fba3 1302 	umull	r1, r3, r3, r2
 800afb2:	0859      	lsrs	r1, r3, #1
 800afb4:	460b      	mov	r3, r1
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	440b      	add	r3, r1
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1ec      	bne.n	800af9c <calculate_range_for_barGraph+0x28>
 800afc2:	4b45      	ldr	r3, [pc, #276]	; (800b0d8 <calculate_range_for_barGraph+0x164>)
 800afc4:	881a      	ldrh	r2, [r3, #0]
 800afc6:	4b46      	ldr	r3, [pc, #280]	; (800b0e0 <calculate_range_for_barGraph+0x16c>)
 800afc8:	fba3 1302 	umull	r1, r3, r3, r2
 800afcc:	08d9      	lsrs	r1, r3, #3
 800afce:	460b      	mov	r3, r1
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	b29b      	uxth	r3, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1de      	bne.n	800af9c <calculate_range_for_barGraph+0x28>
		}

		for (int i = 0; i < 3; i++) {
 800afde:	2300      	movs	r3, #0
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	e013      	b.n	800b00c <calculate_range_for_barGraph+0x98>
			odo_graph_label[i] = (temp_odo_increment * (i + 1)) / 3;
 800afe4:	4b3c      	ldr	r3, [pc, #240]	; (800b0d8 <calculate_range_for_barGraph+0x164>)
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3301      	adds	r3, #1
 800afee:	fb03 f302 	mul.w	r3, r3, r2
 800aff2:	4a3c      	ldr	r2, [pc, #240]	; (800b0e4 <calculate_range_for_barGraph+0x170>)
 800aff4:	fb82 1203 	smull	r1, r2, r2, r3
 800aff8:	17db      	asrs	r3, r3, #31
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	b299      	uxth	r1, r3
 800affe:	4a3a      	ldr	r2, [pc, #232]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 3; i++) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3301      	adds	r3, #1
 800b00a:	607b      	str	r3, [r7, #4]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	dde8      	ble.n	800afe4 <calculate_range_for_barGraph+0x70>
		}
	}

	last_maximum_odo = present_maximum_odo;
 800b012:	4b2f      	ldr	r3, [pc, #188]	; (800b0d0 <calculate_range_for_barGraph+0x15c>)
 800b014:	881a      	ldrh	r2, [r3, #0]
 800b016:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <calculate_range_for_barGraph+0x160>)
 800b018:	801a      	strh	r2, [r3, #0]

	if (odo_graph_label[2] == 0) {
 800b01a:	4b33      	ldr	r3, [pc, #204]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b01c:	889b      	ldrh	r3, [r3, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d108      	bne.n	800b034 <calculate_range_for_barGraph+0xc0>

		odo_graph_label[0] = 10;
 800b022:	4b31      	ldr	r3, [pc, #196]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b024:	220a      	movs	r2, #10
 800b026:	801a      	strh	r2, [r3, #0]
		odo_graph_label[1] = 20;
 800b028:	4b2f      	ldr	r3, [pc, #188]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b02a:	2214      	movs	r2, #20
 800b02c:	805a      	strh	r2, [r3, #2]
		odo_graph_label[2] = 30;
 800b02e:	4b2e      	ldr	r3, [pc, #184]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b030:	221e      	movs	r2, #30
 800b032:	809a      	strh	r2, [r3, #4]
	}

	sprint(odo_graph_label_char1, "%d", odo_graph_label[0]);
 800b034:	4b2c      	ldr	r3, [pc, #176]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	461a      	mov	r2, r3
 800b03a:	492c      	ldr	r1, [pc, #176]	; (800b0ec <calculate_range_for_barGraph+0x178>)
 800b03c:	482c      	ldr	r0, [pc, #176]	; (800b0f0 <calculate_range_for_barGraph+0x17c>)
 800b03e:	f002 fccf 	bl	800d9e0 <sprint>
	sprint(odo_graph_label_char2, "%d", odo_graph_label[1]);
 800b042:	4b29      	ldr	r3, [pc, #164]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b044:	885b      	ldrh	r3, [r3, #2]
 800b046:	461a      	mov	r2, r3
 800b048:	4928      	ldr	r1, [pc, #160]	; (800b0ec <calculate_range_for_barGraph+0x178>)
 800b04a:	482a      	ldr	r0, [pc, #168]	; (800b0f4 <calculate_range_for_barGraph+0x180>)
 800b04c:	f002 fcc8 	bl	800d9e0 <sprint>
	sprint(odo_graph_label_char3, "%d", odo_graph_label[2]);
 800b050:	4b25      	ldr	r3, [pc, #148]	; (800b0e8 <calculate_range_for_barGraph+0x174>)
 800b052:	889b      	ldrh	r3, [r3, #4]
 800b054:	461a      	mov	r2, r3
 800b056:	4925      	ldr	r1, [pc, #148]	; (800b0ec <calculate_range_for_barGraph+0x178>)
 800b058:	4827      	ldr	r0, [pc, #156]	; (800b0f8 <calculate_range_for_barGraph+0x184>)
 800b05a:	f002 fcc1 	bl	800d9e0 <sprint>

	load_text_color();
 800b05e:	f003 fd85 	bl	800eb6c <load_text_color>
	Barlow_medium_12();
 800b062:	f004 f815 	bl	800f090 <Barlow_medium_12>
	Gpu_CoCmd_Text(phost, 236, 65, 1, OPT_RIGHTX | OPT_CENTERY, odo_graph_label_char3);
 800b066:	4b25      	ldr	r3, [pc, #148]	; (800b0fc <calculate_range_for_barGraph+0x188>)
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	4b23      	ldr	r3, [pc, #140]	; (800b0f8 <calculate_range_for_barGraph+0x184>)
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2301      	movs	r3, #1
 800b076:	2241      	movs	r2, #65	; 0x41
 800b078:	21ec      	movs	r1, #236	; 0xec
 800b07a:	f002 ff2e 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 236, 97, 1, OPT_RIGHTX | OPT_CENTERY, odo_graph_label_char2);
 800b07e:	4b1f      	ldr	r3, [pc, #124]	; (800b0fc <calculate_range_for_barGraph+0x188>)
 800b080:	6818      	ldr	r0, [r3, #0]
 800b082:	4b1c      	ldr	r3, [pc, #112]	; (800b0f4 <calculate_range_for_barGraph+0x180>)
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2301      	movs	r3, #1
 800b08e:	2261      	movs	r2, #97	; 0x61
 800b090:	21ec      	movs	r1, #236	; 0xec
 800b092:	f002 ff22 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 236, 129, 1, OPT_RIGHTX | OPT_CENTERY, odo_graph_label_char1);
 800b096:	4b19      	ldr	r3, [pc, #100]	; (800b0fc <calculate_range_for_barGraph+0x188>)
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	4b15      	ldr	r3, [pc, #84]	; (800b0f0 <calculate_range_for_barGraph+0x17c>)
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	2281      	movs	r2, #129	; 0x81
 800b0a8:	21ec      	movs	r1, #236	; 0xec
 800b0aa:	f002 ff16 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 236, 164, 1, OPT_RIGHTX | OPT_CENTERY, "km");
 800b0ae:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <calculate_range_for_barGraph+0x188>)
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	4b13      	ldr	r3, [pc, #76]	; (800b100 <calculate_range_for_barGraph+0x18c>)
 800b0b4:	9301      	str	r3, [sp, #4]
 800b0b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	2301      	movs	r3, #1
 800b0be:	22a4      	movs	r2, #164	; 0xa4
 800b0c0:	21ec      	movs	r1, #236	; 0xec
 800b0c2:	f002 ff0a 	bl	800deda <Gpu_CoCmd_Text>
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200004c0 	.word	0x200004c0
 800b0d4:	20000582 	.word	0x20000582
 800b0d8:	20000632 	.word	0x20000632
 800b0dc:	aaaaaaab 	.word	0xaaaaaaab
 800b0e0:	cccccccd 	.word	0xcccccccd
 800b0e4:	55555556 	.word	0x55555556
 800b0e8:	20000808 	.word	0x20000808
 800b0ec:	0800fb54 	.word	0x0800fb54
 800b0f0:	20000898 	.word	0x20000898
 800b0f4:	200003cc 	.word	0x200003cc
 800b0f8:	200009ec 	.word	0x200009ec
 800b0fc:	20000bc8 	.word	0x20000bc8
 800b100:	0800fb58 	.word	0x0800fb58

0800b104 <calculate_coordinateY_for_weekly_data>:

void calculate_coordinateY_for_weekly_data(void) {
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0

	for (int i = 0; i < 7; i++) {
 800b10a:	2300      	movs	r3, #0
 800b10c:	607b      	str	r3, [r7, #4]
 800b10e:	e016      	b.n	800b13e <calculate_coordinateY_for_weekly_data+0x3a>
		coordinateY[i] = ((157 - (weekly_data[i] * 92 / odo_graph_label[2])));
 800b110:	4a0f      	ldr	r2, [pc, #60]	; (800b150 <calculate_coordinateY_for_weekly_data+0x4c>)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b118:	461a      	mov	r2, r3
 800b11a:	235c      	movs	r3, #92	; 0x5c
 800b11c:	fb03 f302 	mul.w	r3, r3, r2
 800b120:	4a0c      	ldr	r2, [pc, #48]	; (800b154 <calculate_coordinateY_for_weekly_data+0x50>)
 800b122:	8892      	ldrh	r2, [r2, #4]
 800b124:	fb93 f3f2 	sdiv	r3, r3, r2
 800b128:	b29b      	uxth	r3, r3
 800b12a:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 800b12e:	b299      	uxth	r1, r3
 800b130:	4a09      	ldr	r2, [pc, #36]	; (800b158 <calculate_coordinateY_for_weekly_data+0x54>)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 7; i++) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3301      	adds	r3, #1
 800b13c:	607b      	str	r3, [r7, #4]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b06      	cmp	r3, #6
 800b142:	dde5      	ble.n	800b110 <calculate_coordinateY_for_weekly_data+0xc>
	}
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bc80      	pop	{r7}
 800b14e:	4770      	bx	lr
 800b150:	20000940 	.word	0x20000940
 800b154:	20000808 	.word	0x20000808
 800b158:	200004f4 	.word	0x200004f4

0800b15c <calculate_odo_max>:

uint16_t calculate_odo_max(void) {
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0

	uint16_t max_odo = weekly_data[0];
 800b162:	4b0f      	ldr	r3, [pc, #60]	; (800b1a0 <calculate_odo_max+0x44>)
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i < sizeof(weekly_data) / sizeof(weekly_data[0]); i++) {
 800b168:	2300      	movs	r3, #0
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	e00e      	b.n	800b18c <calculate_odo_max+0x30>
		if (weekly_data[i] >= max_odo) {
 800b16e:	4a0c      	ldr	r2, [pc, #48]	; (800b1a0 <calculate_odo_max+0x44>)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b176:	88fa      	ldrh	r2, [r7, #6]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d804      	bhi.n	800b186 <calculate_odo_max+0x2a>
			max_odo = weekly_data[i];
 800b17c:	4a08      	ldr	r2, [pc, #32]	; (800b1a0 <calculate_odo_max+0x44>)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b184:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < sizeof(weekly_data) / sizeof(weekly_data[0]); i++) {
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	3301      	adds	r3, #1
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b07      	cmp	r3, #7
 800b190:	d9ed      	bls.n	800b16e <calculate_odo_max+0x12>
		}
	}
	return max_odo;
 800b192:	88fb      	ldrh	r3, [r7, #6]
}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	bc80      	pop	{r7}
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20000940 	.word	0x20000940

0800b1a4 <dynamic_dot>:

void dynamic_dot(int16_t x, int16_t y) {
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af02      	add	r7, sp, #8
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	460a      	mov	r2, r1
 800b1ae:	80fb      	strh	r3, [r7, #6]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	80bb      	strh	r3, [r7, #4]

	if (dot_count <= 10) {
 800b1b4:	4b32      	ldr	r3, [pc, #200]	; (800b280 <dynamic_dot+0xdc>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b0a      	cmp	r3, #10
 800b1ba:	d80d      	bhi.n	800b1d8 <dynamic_dot+0x34>

		Gpu_CoCmd_Text(phost, x, y, 1, 0, ".");
 800b1bc:	4b31      	ldr	r3, [pc, #196]	; (800b284 <dynamic_dot+0xe0>)
 800b1be:	6818      	ldr	r0, [r3, #0]
 800b1c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800b1c4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b1c8:	4b2f      	ldr	r3, [pc, #188]	; (800b288 <dynamic_dot+0xe4>)
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	f002 fe82 	bl	800deda <Gpu_CoCmd_Text>
 800b1d6:	e048      	b.n	800b26a <dynamic_dot+0xc6>

	} else if (dot_count > 10 && dot_count < 20) {
 800b1d8:	4b29      	ldr	r3, [pc, #164]	; (800b280 <dynamic_dot+0xdc>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b0a      	cmp	r3, #10
 800b1de:	d911      	bls.n	800b204 <dynamic_dot+0x60>
 800b1e0:	4b27      	ldr	r3, [pc, #156]	; (800b280 <dynamic_dot+0xdc>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	2b13      	cmp	r3, #19
 800b1e6:	d80d      	bhi.n	800b204 <dynamic_dot+0x60>

		Gpu_CoCmd_Text(phost, x, y, 1, 0, "..");
 800b1e8:	4b26      	ldr	r3, [pc, #152]	; (800b284 <dynamic_dot+0xe0>)
 800b1ea:	6818      	ldr	r0, [r3, #0]
 800b1ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800b1f0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b1f4:	4b25      	ldr	r3, [pc, #148]	; (800b28c <dynamic_dot+0xe8>)
 800b1f6:	9301      	str	r3, [sp, #4]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f002 fe6c 	bl	800deda <Gpu_CoCmd_Text>
 800b202:	e032      	b.n	800b26a <dynamic_dot+0xc6>

	} else if (dot_count > 20 && dot_count < 30) {
 800b204:	4b1e      	ldr	r3, [pc, #120]	; (800b280 <dynamic_dot+0xdc>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b14      	cmp	r3, #20
 800b20a:	d911      	bls.n	800b230 <dynamic_dot+0x8c>
 800b20c:	4b1c      	ldr	r3, [pc, #112]	; (800b280 <dynamic_dot+0xdc>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b1d      	cmp	r3, #29
 800b212:	d80d      	bhi.n	800b230 <dynamic_dot+0x8c>

		Gpu_CoCmd_Text(phost, x, y, 1, 0, "...");
 800b214:	4b1b      	ldr	r3, [pc, #108]	; (800b284 <dynamic_dot+0xe0>)
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800b21c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b220:	4b1b      	ldr	r3, [pc, #108]	; (800b290 <dynamic_dot+0xec>)
 800b222:	9301      	str	r3, [sp, #4]
 800b224:	2300      	movs	r3, #0
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	2301      	movs	r3, #1
 800b22a:	f002 fe56 	bl	800deda <Gpu_CoCmd_Text>
 800b22e:	e01c      	b.n	800b26a <dynamic_dot+0xc6>

	} else if (dot_count > 30 && dot_count < 50) {
 800b230:	4b13      	ldr	r3, [pc, #76]	; (800b280 <dynamic_dot+0xdc>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b1e      	cmp	r3, #30
 800b236:	d911      	bls.n	800b25c <dynamic_dot+0xb8>
 800b238:	4b11      	ldr	r3, [pc, #68]	; (800b280 <dynamic_dot+0xdc>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b31      	cmp	r3, #49	; 0x31
 800b23e:	d80d      	bhi.n	800b25c <dynamic_dot+0xb8>

		Gpu_CoCmd_Text(phost, x, y, 1, 0, "");
 800b240:	4b10      	ldr	r3, [pc, #64]	; (800b284 <dynamic_dot+0xe0>)
 800b242:	6818      	ldr	r0, [r3, #0]
 800b244:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800b248:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b24c:	4b11      	ldr	r3, [pc, #68]	; (800b294 <dynamic_dot+0xf0>)
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	2300      	movs	r3, #0
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	2301      	movs	r3, #1
 800b256:	f002 fe40 	bl	800deda <Gpu_CoCmd_Text>
 800b25a:	e006      	b.n	800b26a <dynamic_dot+0xc6>

	} else if (dot_count >= 50) {
 800b25c:	4b08      	ldr	r3, [pc, #32]	; (800b280 <dynamic_dot+0xdc>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b31      	cmp	r3, #49	; 0x31
 800b262:	d902      	bls.n	800b26a <dynamic_dot+0xc6>

		dot_count = 0;
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <dynamic_dot+0xdc>)
 800b266:	2200      	movs	r2, #0
 800b268:	701a      	strb	r2, [r3, #0]
	}
	dot_count++;
 800b26a:	4b05      	ldr	r3, [pc, #20]	; (800b280 <dynamic_dot+0xdc>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	3301      	adds	r3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	4b03      	ldr	r3, [pc, #12]	; (800b280 <dynamic_dot+0xdc>)
 800b274:	701a      	strb	r2, [r3, #0]
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	200005aa 	.word	0x200005aa
 800b284:	20000bc8 	.word	0x20000bc8
 800b288:	0800fb5c 	.word	0x0800fb5c
 800b28c:	0800fb60 	.word	0x0800fb60
 800b290:	0800fb64 	.word	0x0800fb64
 800b294:	0800fb68 	.word	0x0800fb68

0800b298 <dynamic_exclamation>:

void dynamic_exclamation(int16_t x, int16_t y) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	4603      	mov	r3, r0
 800b2a0:	460a      	mov	r2, r1
 800b2a2:	80fb      	strh	r3, [r7, #6]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	80bb      	strh	r3, [r7, #4]

	if (dot_count <= 40) {
 800b2a8:	4b1c      	ldr	r3, [pc, #112]	; (800b31c <dynamic_exclamation+0x84>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2b28      	cmp	r3, #40	; 0x28
 800b2ae:	d80d      	bhi.n	800b2cc <dynamic_exclamation+0x34>

		Gpu_CoCmd_Text(phost, x, y, 1, 0, "!");
 800b2b0:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <dynamic_exclamation+0x88>)
 800b2b2:	6818      	ldr	r0, [r3, #0]
 800b2b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800b2b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b2bc:	4b19      	ldr	r3, [pc, #100]	; (800b324 <dynamic_exclamation+0x8c>)
 800b2be:	9301      	str	r3, [sp, #4]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	f002 fe08 	bl	800deda <Gpu_CoCmd_Text>
 800b2ca:	e01c      	b.n	800b306 <dynamic_exclamation+0x6e>

	} else if (dot_count > 40 && dot_count < 60) {
 800b2cc:	4b13      	ldr	r3, [pc, #76]	; (800b31c <dynamic_exclamation+0x84>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b28      	cmp	r3, #40	; 0x28
 800b2d2:	d911      	bls.n	800b2f8 <dynamic_exclamation+0x60>
 800b2d4:	4b11      	ldr	r3, [pc, #68]	; (800b31c <dynamic_exclamation+0x84>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b3b      	cmp	r3, #59	; 0x3b
 800b2da:	d80d      	bhi.n	800b2f8 <dynamic_exclamation+0x60>

		Gpu_CoCmd_Text(phost, x, y, 1, 0, "");
 800b2dc:	4b10      	ldr	r3, [pc, #64]	; (800b320 <dynamic_exclamation+0x88>)
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800b2e4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b2e8:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <dynamic_exclamation+0x90>)
 800b2ea:	9301      	str	r3, [sp, #4]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f002 fdf2 	bl	800deda <Gpu_CoCmd_Text>
 800b2f6:	e006      	b.n	800b306 <dynamic_exclamation+0x6e>

	} else if (dot_count >= 60) {
 800b2f8:	4b08      	ldr	r3, [pc, #32]	; (800b31c <dynamic_exclamation+0x84>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b3b      	cmp	r3, #59	; 0x3b
 800b2fe:	d902      	bls.n	800b306 <dynamic_exclamation+0x6e>

		dot_count = 0;
 800b300:	4b06      	ldr	r3, [pc, #24]	; (800b31c <dynamic_exclamation+0x84>)
 800b302:	2200      	movs	r2, #0
 800b304:	701a      	strb	r2, [r3, #0]
	}
	dot_count++;
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <dynamic_exclamation+0x84>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	3301      	adds	r3, #1
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	4b03      	ldr	r3, [pc, #12]	; (800b31c <dynamic_exclamation+0x84>)
 800b310:	701a      	strb	r2, [r3, #0]
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	200005aa 	.word	0x200005aa
 800b320:	20000bc8 	.word	0x20000bc8
 800b324:	0800fb6c 	.word	0x0800fb6c
 800b328:	0800fb68 	.word	0x0800fb68

0800b32c <dynamic_warning_sign>:


void dynamic_warning_sign(void) {
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af02      	add	r7, sp, #8

	if (dot_count <= 10) {
 800b332:	4b17      	ldr	r3, [pc, #92]	; (800b390 <dynamic_warning_sign+0x64>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b0a      	cmp	r3, #10
 800b338:	d819      	bhi.n	800b36e <dynamic_warning_sign+0x42>

		Draw_Triangle(428, 30, 19, 1, yellow);
 800b33a:	4b16      	ldr	r3, [pc, #88]	; (800b394 <dynamic_warning_sign+0x68>)
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	2301      	movs	r3, #1
 800b340:	2213      	movs	r2, #19
 800b342:	211e      	movs	r1, #30
 800b344:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 800b348:	f004 f826 	bl	800f398 <Draw_Triangle>
		Barlow_bold_24();
 800b34c:	f003 fe0a 	bl	800ef64 <Barlow_bold_24>
		load_color_black();
 800b350:	f003 fbd4 	bl	800eafc <load_color_black>
		Gpu_CoCmd_Text(phost, 422, 11, 1, 0, "!");
 800b354:	4b10      	ldr	r3, [pc, #64]	; (800b398 <dynamic_warning_sign+0x6c>)
 800b356:	6818      	ldr	r0, [r3, #0]
 800b358:	4b10      	ldr	r3, [pc, #64]	; (800b39c <dynamic_warning_sign+0x70>)
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	2300      	movs	r3, #0
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2301      	movs	r3, #1
 800b362:	220b      	movs	r2, #11
 800b364:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800b368:	f002 fdb7 	bl	800deda <Gpu_CoCmd_Text>
 800b36c:	e006      	b.n	800b37c <dynamic_warning_sign+0x50>

//	} else if (dot_count > 10 && dot_count < 18) {


	} else if (dot_count >= 18) {
 800b36e:	4b08      	ldr	r3, [pc, #32]	; (800b390 <dynamic_warning_sign+0x64>)
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	2b11      	cmp	r3, #17
 800b374:	d902      	bls.n	800b37c <dynamic_warning_sign+0x50>

		dot_count = 0;
 800b376:	4b06      	ldr	r3, [pc, #24]	; (800b390 <dynamic_warning_sign+0x64>)
 800b378:	2200      	movs	r2, #0
 800b37a:	701a      	strb	r2, [r3, #0]
	}
	dot_count++;
 800b37c:	4b04      	ldr	r3, [pc, #16]	; (800b390 <dynamic_warning_sign+0x64>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	b2da      	uxtb	r2, r3
 800b384:	4b02      	ldr	r3, [pc, #8]	; (800b390 <dynamic_warning_sign+0x64>)
 800b386:	701a      	strb	r2, [r3, #0]
}
 800b388:	bf00      	nop
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	200005aa 	.word	0x200005aa
 800b394:	20000030 	.word	0x20000030
 800b398:	20000bc8 	.word	0x20000bc8
 800b39c:	0800fb6c 	.word	0x0800fb6c

0800b3a0 <mode_reverse>:
//extern int ui_color[5][3];
extern int ui_color[5];
extern int popup_color[5];


void mode_reverse(void) {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af02      	add	r7, sp, #8

	load_color_turquoise();
 800b3a6:	f003 fb8d 	bl	800eac4 <load_color_turquoise>
	Barlow_extrabold_28();
 800b3aa:	f003 fe17 	bl	800efdc <Barlow_extrabold_28>
	Gpu_CoCmd_Text(phost, 120, 95, 1, OPT_CENTER, "REVERSE");
 800b3ae:	4b1b      	ldr	r3, [pc, #108]	; (800b41c <mode_reverse+0x7c>)
 800b3b0:	6818      	ldr	r0, [r3, #0]
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	; (800b420 <mode_reverse+0x80>)
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	2301      	movs	r3, #1
 800b3be:	225f      	movs	r2, #95	; 0x5f
 800b3c0:	2178      	movs	r1, #120	; 0x78
 800b3c2:	f002 fd8a 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_155();
 800b3c6:	f003 fc5d 	bl	800ec84 <load_color_lightMode_grey_155>
	Barlow_semibold_20();
 800b3ca:	f003 fe9d 	bl	800f108 <Barlow_semibold_20>
	Gpu_CoCmd_Text(phost, 120, 125, 1, OPT_CENTER, "SUSTE");
 800b3ce:	4b13      	ldr	r3, [pc, #76]	; (800b41c <mode_reverse+0x7c>)
 800b3d0:	6818      	ldr	r0, [r3, #0]
 800b3d2:	4b14      	ldr	r3, [pc, #80]	; (800b424 <mode_reverse+0x84>)
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	2301      	movs	r3, #1
 800b3de:	227d      	movs	r2, #125	; 0x7d
 800b3e0:	2178      	movs	r1, #120	; 0x78
 800b3e2:	f002 fd7a 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 155, 1, OPT_CENTER, "THIKKA");
 800b3e6:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <mode_reverse+0x7c>)
 800b3e8:	6818      	ldr	r0, [r3, #0]
 800b3ea:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <mode_reverse+0x88>)
 800b3ec:	9301      	str	r3, [sp, #4]
 800b3ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	229b      	movs	r2, #155	; 0x9b
 800b3f8:	2178      	movs	r1, #120	; 0x78
 800b3fa:	f002 fd6e 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 185, 1, OPT_CENTER, "BABBAL");
 800b3fe:	4b07      	ldr	r3, [pc, #28]	; (800b41c <mode_reverse+0x7c>)
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <mode_reverse+0x8c>)
 800b404:	9301      	str	r3, [sp, #4]
 800b406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	2301      	movs	r3, #1
 800b40e:	22b9      	movs	r2, #185	; 0xb9
 800b410:	2178      	movs	r1, #120	; 0x78
 800b412:	f002 fd62 	bl	800deda <Gpu_CoCmd_Text>
}
 800b416:	bf00      	nop
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	20000bc8 	.word	0x20000bc8
 800b420:	0800fb70 	.word	0x0800fb70
 800b424:	0800fb78 	.word	0x0800fb78
 800b428:	0800fb80 	.word	0x0800fb80
 800b42c:	0800fb88 	.word	0x0800fb88

0800b430 <mode_suste>:
	Gpu_CoCmd_Text(phost, 120, 125, 1, OPT_CENTER, "SUSTE");
	Gpu_CoCmd_Text(phost, 120, 155, 1, OPT_CENTER, "THIKKA");
	Gpu_CoCmd_Text(phost, 120, 185, 1, OPT_CENTER, "BABBAL");
}

void mode_suste(void) {
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af02      	add	r7, sp, #8

	load_color_turquoise();
 800b436:	f003 fb45 	bl	800eac4 <load_color_turquoise>
	Barlow_extrabold_28();
 800b43a:	f003 fdcf 	bl	800efdc <Barlow_extrabold_28>
	Gpu_CoCmd_Text(phost, 120, 125, 1, OPT_CENTER, "SUSTE");
 800b43e:	4b1b      	ldr	r3, [pc, #108]	; (800b4ac <mode_suste+0x7c>)
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	4b1b      	ldr	r3, [pc, #108]	; (800b4b0 <mode_suste+0x80>)
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	2301      	movs	r3, #1
 800b44e:	227d      	movs	r2, #125	; 0x7d
 800b450:	2178      	movs	r1, #120	; 0x78
 800b452:	f002 fd42 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_155();
 800b456:	f003 fc15 	bl	800ec84 <load_color_lightMode_grey_155>
	Barlow_semibold_20();
 800b45a:	f003 fe55 	bl	800f108 <Barlow_semibold_20>
	Gpu_CoCmd_Text(phost, 120, 95, 1, OPT_CENTER, "REVERSE");
 800b45e:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <mode_suste+0x7c>)
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	4b14      	ldr	r3, [pc, #80]	; (800b4b4 <mode_suste+0x84>)
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	2301      	movs	r3, #1
 800b46e:	225f      	movs	r2, #95	; 0x5f
 800b470:	2178      	movs	r1, #120	; 0x78
 800b472:	f002 fd32 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 155, 1, OPT_CENTER, "THIKKA");
 800b476:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <mode_suste+0x7c>)
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <mode_suste+0x88>)
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	2301      	movs	r3, #1
 800b486:	229b      	movs	r2, #155	; 0x9b
 800b488:	2178      	movs	r1, #120	; 0x78
 800b48a:	f002 fd26 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 185, 1, OPT_CENTER, "BABBAL");
 800b48e:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <mode_suste+0x7c>)
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <mode_suste+0x8c>)
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	2301      	movs	r3, #1
 800b49e:	22b9      	movs	r2, #185	; 0xb9
 800b4a0:	2178      	movs	r1, #120	; 0x78
 800b4a2:	f002 fd1a 	bl	800deda <Gpu_CoCmd_Text>
}
 800b4a6:	bf00      	nop
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20000bc8 	.word	0x20000bc8
 800b4b0:	0800fb78 	.word	0x0800fb78
 800b4b4:	0800fb70 	.word	0x0800fb70
 800b4b8:	0800fb80 	.word	0x0800fb80
 800b4bc:	0800fb88 	.word	0x0800fb88

0800b4c0 <mode_thikka>:

void mode_thikka(void) {
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af02      	add	r7, sp, #8

	load_color_turquoise();
 800b4c6:	f003 fafd 	bl	800eac4 <load_color_turquoise>
	Barlow_extrabold_28();
 800b4ca:	f003 fd87 	bl	800efdc <Barlow_extrabold_28>
	Gpu_CoCmd_Text(phost, 120, 155, 1, OPT_CENTER, "THIKKA");
 800b4ce:	4b1b      	ldr	r3, [pc, #108]	; (800b53c <mode_thikka+0x7c>)
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	4b1b      	ldr	r3, [pc, #108]	; (800b540 <mode_thikka+0x80>)
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	2301      	movs	r3, #1
 800b4de:	229b      	movs	r2, #155	; 0x9b
 800b4e0:	2178      	movs	r1, #120	; 0x78
 800b4e2:	f002 fcfa 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_155();
 800b4e6:	f003 fbcd 	bl	800ec84 <load_color_lightMode_grey_155>
	Barlow_semibold_20();
 800b4ea:	f003 fe0d 	bl	800f108 <Barlow_semibold_20>
	Gpu_CoCmd_Text(phost, 120, 95, 1, OPT_CENTER, "REVERSE");
 800b4ee:	4b13      	ldr	r3, [pc, #76]	; (800b53c <mode_thikka+0x7c>)
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	4b14      	ldr	r3, [pc, #80]	; (800b544 <mode_thikka+0x84>)
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	225f      	movs	r2, #95	; 0x5f
 800b500:	2178      	movs	r1, #120	; 0x78
 800b502:	f002 fcea 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 125, 1, OPT_CENTER, "SUSTE");
 800b506:	4b0d      	ldr	r3, [pc, #52]	; (800b53c <mode_thikka+0x7c>)
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <mode_thikka+0x88>)
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	2301      	movs	r3, #1
 800b516:	227d      	movs	r2, #125	; 0x7d
 800b518:	2178      	movs	r1, #120	; 0x78
 800b51a:	f002 fcde 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 185, 1, OPT_CENTER, "BABBAL");
 800b51e:	4b07      	ldr	r3, [pc, #28]	; (800b53c <mode_thikka+0x7c>)
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <mode_thikka+0x8c>)
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	2301      	movs	r3, #1
 800b52e:	22b9      	movs	r2, #185	; 0xb9
 800b530:	2178      	movs	r1, #120	; 0x78
 800b532:	f002 fcd2 	bl	800deda <Gpu_CoCmd_Text>
}
 800b536:	bf00      	nop
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20000bc8 	.word	0x20000bc8
 800b540:	0800fb80 	.word	0x0800fb80
 800b544:	0800fb70 	.word	0x0800fb70
 800b548:	0800fb78 	.word	0x0800fb78
 800b54c:	0800fb88 	.word	0x0800fb88

0800b550 <mode_babbal>:

void mode_babbal(void) {
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af02      	add	r7, sp, #8

	load_color_turquoise();
 800b556:	f003 fab5 	bl	800eac4 <load_color_turquoise>
	Barlow_extrabold_28();
 800b55a:	f003 fd3f 	bl	800efdc <Barlow_extrabold_28>
	Gpu_CoCmd_Text(phost, 120, 185, 1, OPT_CENTER, "BABBAL");
 800b55e:	4b1b      	ldr	r3, [pc, #108]	; (800b5cc <mode_babbal+0x7c>)
 800b560:	6818      	ldr	r0, [r3, #0]
 800b562:	4b1b      	ldr	r3, [pc, #108]	; (800b5d0 <mode_babbal+0x80>)
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	2301      	movs	r3, #1
 800b56e:	22b9      	movs	r2, #185	; 0xb9
 800b570:	2178      	movs	r1, #120	; 0x78
 800b572:	f002 fcb2 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_155();
 800b576:	f003 fb85 	bl	800ec84 <load_color_lightMode_grey_155>
	Barlow_semibold_20();
 800b57a:	f003 fdc5 	bl	800f108 <Barlow_semibold_20>
	Gpu_CoCmd_Text(phost, 120, 95, 1, OPT_CENTER, "REVERSE");
 800b57e:	4b13      	ldr	r3, [pc, #76]	; (800b5cc <mode_babbal+0x7c>)
 800b580:	6818      	ldr	r0, [r3, #0]
 800b582:	4b14      	ldr	r3, [pc, #80]	; (800b5d4 <mode_babbal+0x84>)
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2301      	movs	r3, #1
 800b58e:	225f      	movs	r2, #95	; 0x5f
 800b590:	2178      	movs	r1, #120	; 0x78
 800b592:	f002 fca2 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 125, 1, OPT_CENTER, "SUSTE");
 800b596:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <mode_babbal+0x7c>)
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <mode_babbal+0x88>)
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	227d      	movs	r2, #125	; 0x7d
 800b5a8:	2178      	movs	r1, #120	; 0x78
 800b5aa:	f002 fc96 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 120, 155, 1, OPT_CENTER, "THIKKA");
 800b5ae:	4b07      	ldr	r3, [pc, #28]	; (800b5cc <mode_babbal+0x7c>)
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	4b0a      	ldr	r3, [pc, #40]	; (800b5dc <mode_babbal+0x8c>)
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	2301      	movs	r3, #1
 800b5be:	229b      	movs	r2, #155	; 0x9b
 800b5c0:	2178      	movs	r1, #120	; 0x78
 800b5c2:	f002 fc8a 	bl	800deda <Gpu_CoCmd_Text>
}
 800b5c6:	bf00      	nop
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	20000bc8 	.word	0x20000bc8
 800b5d0:	0800fb88 	.word	0x0800fb88
 800b5d4:	0800fb70 	.word	0x0800fb70
 800b5d8:	0800fb78 	.word	0x0800fb78
 800b5dc:	0800fb80 	.word	0x0800fb80

0800b5e0 <load_sidelight_right>:

void load_sidelight_right(void) {
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0

	load_color_turquoise();
 800b5e4:	f003 fa6e 	bl	800eac4 <load_color_turquoise>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <load_sidelight_right+0x40>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	490d      	ldr	r1, [pc, #52]	; (800b624 <load_sidelight_right+0x44>)
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f002 fb0c 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(480, 1, 0, 0));
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <load_sidelight_right+0x40>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	490b      	ldr	r1, [pc, #44]	; (800b628 <load_sidelight_right+0x48>)
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f002 fb06 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(460, 272, 0, 0));
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <load_sidelight_right+0x40>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4909      	ldr	r1, [pc, #36]	; (800b62c <load_sidelight_right+0x4c>)
 800b606:	4618      	mov	r0, r3
 800b608:	f002 fb00 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800b60c:	4b04      	ldr	r3, [pc, #16]	; (800b620 <load_sidelight_right+0x40>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800b614:	4618      	mov	r0, r3
 800b616:	f002 faf9 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(150));
//	App_WrCoCmd_Buffer(phost, VERTEX2II(467, 13, 0, 0));
//	App_WrCoCmd_Buffer(phost, VERTEX2II(467, 259, 0, 0));
//	App_WrCoCmd_Buffer(phost, END());
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));
}
 800b61a:	bf00      	nop
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000bc8 	.word	0x20000bc8
 800b624:	1f000009 	.word	0x1f000009
 800b628:	bc001000 	.word	0xbc001000
 800b62c:	b9910000 	.word	0xb9910000

0800b630 <load_sidelight_left>:

void load_sidelight_left(void) {
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0

	load_color_turquoise();
 800b634:	f003 fa46 	bl	800eac4 <load_color_turquoise>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800b638:	4b0d      	ldr	r3, [pc, #52]	; (800b670 <load_sidelight_left+0x40>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	490d      	ldr	r1, [pc, #52]	; (800b674 <load_sidelight_left+0x44>)
 800b63e:	4618      	mov	r0, r3
 800b640:	f002 fae4 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(20, 1, 0, 0));
 800b644:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <load_sidelight_left+0x40>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	490b      	ldr	r1, [pc, #44]	; (800b678 <load_sidelight_left+0x48>)
 800b64a:	4618      	mov	r0, r3
 800b64c:	f002 fade 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(0, 272, 0, 0));
 800b650:	4b07      	ldr	r3, [pc, #28]	; (800b670 <load_sidelight_left+0x40>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4909      	ldr	r1, [pc, #36]	; (800b67c <load_sidelight_left+0x4c>)
 800b656:	4618      	mov	r0, r3
 800b658:	f002 fad8 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800b65c:	4b04      	ldr	r3, [pc, #16]	; (800b670 <load_sidelight_left+0x40>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800b664:	4618      	mov	r0, r3
 800b666:	f002 fad1 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(150));
//	App_WrCoCmd_Buffer(phost, VERTEX2II(13, 13, 0, 0));
//	App_WrCoCmd_Buffer(phost, VERTEX2II(13, 259, 0, 0));
//	App_WrCoCmd_Buffer(phost, END());
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));
}
 800b66a:	bf00      	nop
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20000bc8 	.word	0x20000bc8
 800b674:	1f000009 	.word	0x1f000009
 800b678:	82801000 	.word	0x82801000
 800b67c:	80110000 	.word	0x80110000

0800b680 <show_Whpkm_indicator_line>:
	App_WrCoCmd_Buffer(phost, VERTEX2II(35, 0, 0, 0));
	App_WrCoCmd_Buffer(phost, VERTEX2II(445, 15, 0, 0));
	App_WrCoCmd_Buffer(phost, END());
}

void show_Whpkm_indicator_line(void) {
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0

	load_color_lightMode_gray();
 800b684:	f003 fa82 	bl	800eb8c <load_color_lightMode_gray>
	App_WrCoCmd_Buffer(phost, BEGIN(LINES));
 800b688:	4b34      	ldr	r3, [pc, #208]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4934      	ldr	r1, [pc, #208]	; (800b760 <show_Whpkm_indicator_line+0xe0>)
 800b68e:	4618      	mov	r0, r3
 800b690:	f002 fabc 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(240, 67, 0, 0));
 800b694:	4b31      	ldr	r3, [pc, #196]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4932      	ldr	r1, [pc, #200]	; (800b764 <show_Whpkm_indicator_line+0xe4>)
 800b69a:	4618      	mov	r0, r3
 800b69c:	f002 fab6 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(240, 199, 0, 0));
 800b6a0:	4b2e      	ldr	r3, [pc, #184]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4930      	ldr	r1, [pc, #192]	; (800b768 <show_Whpkm_indicator_line+0xe8>)
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f002 fab0 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800b6ac:	4b2b      	ldr	r3, [pc, #172]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f002 faa9 	bl	800dc0c <App_WrCoCmd_Buffer>

	if (Is_WhperKM_positive == 0) {
 800b6ba:	4b2c      	ldr	r3, [pc, #176]	; (800b76c <show_Whpkm_indicator_line+0xec>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <show_Whpkm_indicator_line+0x48>
		load_color_turquoise();
 800b6c2:	f003 f9ff 	bl	800eac4 <load_color_turquoise>
 800b6c6:	e005      	b.n	800b6d4 <show_Whpkm_indicator_line+0x54>
	} else if (Is_WhperKM_positive == 1) {
 800b6c8:	4b28      	ldr	r3, [pc, #160]	; (800b76c <show_Whpkm_indicator_line+0xec>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d101      	bne.n	800b6d4 <show_Whpkm_indicator_line+0x54>
		load_color_red();
 800b6d0:	f003 fa3e 	bl	800eb50 <load_color_red>
	}

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800b6d4:	4b21      	ldr	r3, [pc, #132]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4925      	ldr	r1, [pc, #148]	; (800b770 <show_Whpkm_indicator_line+0xf0>)
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f002 fa96 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(237, 133 - (WhperKM_value * 66) / 255, 0, 0));
 800b6e0:	4b1e      	ldr	r3, [pc, #120]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	4b23      	ldr	r3, [pc, #140]	; (800b774 <show_Whpkm_indicator_line+0xf4>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	015b      	lsls	r3, r3, #5
 800b6ec:	4413      	add	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	4a21      	ldr	r2, [pc, #132]	; (800b778 <show_Whpkm_indicator_line+0xf8>)
 800b6f2:	fb82 1203 	smull	r1, r2, r2, r3
 800b6f6:	441a      	add	r2, r3
 800b6f8:	11d2      	asrs	r2, r2, #7
 800b6fa:	17db      	asrs	r3, r3, #31
 800b6fc:	1a9b      	subs	r3, r3, r2
 800b6fe:	3385      	adds	r3, #133	; 0x85
 800b700:	031a      	lsls	r2, r3, #12
 800b702:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <show_Whpkm_indicator_line+0xfc>)
 800b704:	4013      	ands	r3, r2
 800b706:	f043 431d 	orr.w	r3, r3, #2634022912	; 0x9d000000
 800b70a:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 800b70e:	4619      	mov	r1, r3
 800b710:	f002 fa7c 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(243, 133 + (WhperKM_value * 66) / 255, 0, 0));
 800b714:	4b11      	ldr	r3, [pc, #68]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	4b16      	ldr	r3, [pc, #88]	; (800b774 <show_Whpkm_indicator_line+0xf4>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	4613      	mov	r3, r2
 800b71e:	015b      	lsls	r3, r3, #5
 800b720:	4413      	add	r3, r2
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	4a14      	ldr	r2, [pc, #80]	; (800b778 <show_Whpkm_indicator_line+0xf8>)
 800b726:	fb82 1203 	smull	r1, r2, r2, r3
 800b72a:	441a      	add	r2, r3
 800b72c:	11d2      	asrs	r2, r2, #7
 800b72e:	17db      	asrs	r3, r3, #31
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	3385      	adds	r3, #133	; 0x85
 800b734:	031a      	lsls	r2, r3, #12
 800b736:	4b11      	ldr	r3, [pc, #68]	; (800b77c <show_Whpkm_indicator_line+0xfc>)
 800b738:	4013      	ands	r3, r2
 800b73a:	f043 431e 	orr.w	r3, r3, #2650800128	; 0x9e000000
 800b73e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 800b742:	4619      	mov	r1, r3
 800b744:	f002 fa62 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <show_Whpkm_indicator_line+0xdc>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800b750:	4618      	mov	r0, r3
 800b752:	f002 fa5b 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800b756:	bf00      	nop
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20000bc8 	.word	0x20000bc8
 800b760:	1f000003 	.word	0x1f000003
 800b764:	9e043000 	.word	0x9e043000
 800b768:	9e0c7000 	.word	0x9e0c7000
 800b76c:	20000574 	.word	0x20000574
 800b770:	1f000009 	.word	0x1f000009
 800b774:	2000079c 	.word	0x2000079c
 800b778:	80808081 	.word	0x80808081
 800b77c:	001ff000 	.word	0x001ff000

0800b780 <show_drive_mode>:
	App_WrCoCmd_Buffer(phost, VERTEX2II(174, 210, 0, 0));

	App_WrCoCmd_Buffer(phost, END());
}

void show_drive_mode(void) {
 800b780:	b580      	push	{r7, lr}
 800b782:	af00      	add	r7, sp, #0

	switch (drive_mode) {
 800b784:	4b0e      	ldr	r3, [pc, #56]	; (800b7c0 <show_drive_mode+0x40>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	3b01      	subs	r3, #1
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d816      	bhi.n	800b7bc <show_drive_mode+0x3c>
 800b78e:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <show_drive_mode+0x14>)
 800b790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b794:	0800b7ab 	.word	0x0800b7ab
 800b798:	0800b7b1 	.word	0x0800b7b1
 800b79c:	0800b7b7 	.word	0x0800b7b7
 800b7a0:	0800b7a5 	.word	0x0800b7a5

		case REVERSE:
			mode_reverse();
 800b7a4:	f7ff fdfc 	bl	800b3a0 <mode_reverse>
			break;
 800b7a8:	e008      	b.n	800b7bc <show_drive_mode+0x3c>

		case SUSTE:
			mode_suste();
 800b7aa:	f7ff fe41 	bl	800b430 <mode_suste>
			break;
 800b7ae:	e005      	b.n	800b7bc <show_drive_mode+0x3c>

		case THIKKA:
			mode_thikka();
 800b7b0:	f7ff fe86 	bl	800b4c0 <mode_thikka>
			break;
 800b7b4:	e002      	b.n	800b7bc <show_drive_mode+0x3c>

		case BABBAL:
			mode_babbal();
 800b7b6:	f7ff fecb 	bl	800b550 <mode_babbal>
			break;
 800b7ba:	bf00      	nop
	}
}
 800b7bc:	bf00      	nop
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000745 	.word	0x20000745

0800b7c4 <show_Whpkm_value>:

void show_Whpkm_value(void) {
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af02      	add	r7, sp, #8

	Barlow_bold_18();
 800b7ca:	f003 fb71 	bl	800eeb0 <Barlow_bold_18>
	load_text_color();
 800b7ce:	f003 f9cd 	bl	800eb6c <load_text_color>
	Gpu_CoCmd_Text(phost, 224, 232, 1, OPT_RIGHTX, dash_WhperKM);
 800b7d2:	4b0e      	ldr	r3, [pc, #56]	; (800b80c <show_Whpkm_value+0x48>)
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <show_Whpkm_value+0x4c>)
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	22e8      	movs	r2, #232	; 0xe8
 800b7e4:	21e0      	movs	r1, #224	; 0xe0
 800b7e6:	f002 fb78 	bl	800deda <Gpu_CoCmd_Text>
	load_color_lightMode_gray();
 800b7ea:	f003 f9cf 	bl	800eb8c <load_color_lightMode_gray>
	Gpu_CoCmd_Text(phost, 230, 232, 1, 0, "Wh/km");
 800b7ee:	4b07      	ldr	r3, [pc, #28]	; (800b80c <show_Whpkm_value+0x48>)
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	4b08      	ldr	r3, [pc, #32]	; (800b814 <show_Whpkm_value+0x50>)
 800b7f4:	9301      	str	r3, [sp, #4]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	22e8      	movs	r2, #232	; 0xe8
 800b7fe:	21e6      	movs	r1, #230	; 0xe6
 800b800:	f002 fb6b 	bl	800deda <Gpu_CoCmd_Text>
}
 800b804:	bf00      	nop
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20000bc8 	.word	0x20000bc8
 800b810:	2000046c 	.word	0x2000046c
 800b814:	0800fb90 	.word	0x0800fb90

0800b818 <show_odometer>:

void show_odometer(void) {
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af02      	add	r7, sp, #8

	Barlow_bold_18();
 800b81e:	f003 fb47 	bl	800eeb0 <Barlow_bold_18>
	load_color_lightMode_gray();
 800b822:	f003 f9b3 	bl	800eb8c <load_color_lightMode_gray>
	Gpu_CoCmd_Text(phost, 31, 232, 1, 0, "ODO");
 800b826:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <show_odometer+0x44>)
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	4b0d      	ldr	r3, [pc, #52]	; (800b860 <show_odometer+0x48>)
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	2300      	movs	r3, #0
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	2301      	movs	r3, #1
 800b834:	22e8      	movs	r2, #232	; 0xe8
 800b836:	211f      	movs	r1, #31
 800b838:	f002 fb4f 	bl	800deda <Gpu_CoCmd_Text>
	load_text_color();
 800b83c:	f003 f996 	bl	800eb6c <load_text_color>
	Gpu_CoCmd_Text(phost, 69, 232, 1, 0, dash_odometry);
 800b840:	4b06      	ldr	r3, [pc, #24]	; (800b85c <show_odometer+0x44>)
 800b842:	6818      	ldr	r0, [r3, #0]
 800b844:	4b07      	ldr	r3, [pc, #28]	; (800b864 <show_odometer+0x4c>)
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	2300      	movs	r3, #0
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	2301      	movs	r3, #1
 800b84e:	22e8      	movs	r2, #232	; 0xe8
 800b850:	2145      	movs	r1, #69	; 0x45
 800b852:	f002 fb42 	bl	800deda <Gpu_CoCmd_Text>
}
 800b856:	bf00      	nop
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20000bc8 	.word	0x20000bc8
 800b860:	0800fb98 	.word	0x0800fb98
 800b864:	20000904 	.word	0x20000904

0800b868 <show_trip_distance>:

void show_trip_distance(void) {
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af02      	add	r7, sp, #8

	Barlow_bold_18();
 800b86e:	f003 fb1f 	bl	800eeb0 <Barlow_bold_18>
	load_color_lightMode_gray();
 800b872:	f003 f98b 	bl	800eb8c <load_color_lightMode_gray>
	Gpu_CoCmd_Text(phost, 325, 232, 1, 0, "TRIP");
 800b876:	4b0e      	ldr	r3, [pc, #56]	; (800b8b0 <show_trip_distance+0x48>)
 800b878:	6818      	ldr	r0, [r3, #0]
 800b87a:	4b0e      	ldr	r3, [pc, #56]	; (800b8b4 <show_trip_distance+0x4c>)
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	2300      	movs	r3, #0
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	2301      	movs	r3, #1
 800b884:	22e8      	movs	r2, #232	; 0xe8
 800b886:	f240 1145 	movw	r1, #325	; 0x145
 800b88a:	f002 fb26 	bl	800deda <Gpu_CoCmd_Text>
	load_text_color();
 800b88e:	f003 f96d 	bl	800eb6c <load_text_color>
	Gpu_CoCmd_Text(phost, 368, 232, 1, 0, dash_trip);
 800b892:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <show_trip_distance+0x48>)
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	4b08      	ldr	r3, [pc, #32]	; (800b8b8 <show_trip_distance+0x50>)
 800b898:	9301      	str	r3, [sp, #4]
 800b89a:	2300      	movs	r3, #0
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	2301      	movs	r3, #1
 800b8a0:	22e8      	movs	r2, #232	; 0xe8
 800b8a2:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800b8a6:	f002 fb18 	bl	800deda <Gpu_CoCmd_Text>
}
 800b8aa:	bf00      	nop
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000bc8 	.word	0x20000bc8
 800b8b4:	0800fb9c 	.word	0x0800fb9c
 800b8b8:	20000a64 	.word	0x20000a64

0800b8bc <show_bikespeed>:

void show_bikespeed(void) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af02      	add	r7, sp, #8

	load_text_color();
 800b8c2:	f003 f953 	bl	800eb6c <load_text_color>
	Barlow_semibold_112();
 800b8c6:	f003 fc79 	bl	800f1bc <Barlow_semibold_112>

	/* dash_speed1 is the speed data from CMD CAN
	 * dash_speed is the speed data from DATA CAN structure
	 */
	Gpu_CoCmd_Text(phost, 422, 137, 1, OPT_CENTERY | OPT_RIGHTX, dash_speed1);
 800b8ca:	4b10      	ldr	r3, [pc, #64]	; (800b90c <show_bikespeed+0x50>)
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	4b10      	ldr	r3, [pc, #64]	; (800b910 <show_bikespeed+0x54>)
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	2301      	movs	r3, #1
 800b8da:	2289      	movs	r2, #137	; 0x89
 800b8dc:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800b8e0:	f002 fafb 	bl	800deda <Gpu_CoCmd_Text>

	load_color_turquoise();
 800b8e4:	f003 f8ee 	bl	800eac4 <load_color_turquoise>
	Barlow_bold_20();
 800b8e8:	f003 fb00 	bl	800eeec <Barlow_bold_20>
	Gpu_CoCmd_Text(phost, 422, 194, 1, OPT_CENTERY | OPT_RIGHTX, "km/h");
 800b8ec:	4b07      	ldr	r3, [pc, #28]	; (800b90c <show_bikespeed+0x50>)
 800b8ee:	6818      	ldr	r0, [r3, #0]
 800b8f0:	4b08      	ldr	r3, [pc, #32]	; (800b914 <show_bikespeed+0x58>)
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	22c2      	movs	r2, #194	; 0xc2
 800b8fe:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800b902:	f002 faea 	bl	800deda <Gpu_CoCmd_Text>
}
 800b906:	bf00      	nop
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20000bc8 	.word	0x20000bc8
 800b910:	20000748 	.word	0x20000748
 800b914:	0800fba4 	.word	0x0800fba4

0800b918 <show_sidelight>:

void show_sidelight(void) {
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0

	if (right_sidelight_status) {
 800b91c:	4b08      	ldr	r3, [pc, #32]	; (800b940 <show_sidelight+0x28>)
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <show_sidelight+0x10>
		load_sidelight_right();
 800b924:	f7ff fe5c 	bl	800b5e0 <load_sidelight_right>
	}
	if (left_sidelight_status) {
 800b928:	4b06      	ldr	r3, [pc, #24]	; (800b944 <show_sidelight+0x2c>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <show_sidelight+0x1c>
		load_sidelight_left();
 800b930:	f7ff fe7e 	bl	800b630 <load_sidelight_left>
	}
	if (!right_sidelight_status && !left_sidelight_status) {
 800b934:	4b02      	ldr	r3, [pc, #8]	; (800b940 <show_sidelight+0x28>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
	}
}
 800b93a:	bf00      	nop
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20000996 	.word	0x20000996
 800b944:	2000080e 	.word	0x2000080e

0800b948 <show_stand_icon>:
		}
		kill_switch_position = 0;
	}
}

void show_stand_icon(void) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0

	load_color_white();
 800b94c:	f003 f92c 	bl	800eba8 <load_color_white>

	if (stand_status == 1) {
 800b950:	4b07      	ldr	r3, [pc, #28]	; (800b970 <show_stand_icon+0x28>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d108      	bne.n	800b96a <show_stand_icon+0x22>

		if (mode_button_when_Switches_ON == 1) {
 800b958:	4b06      	ldr	r3, [pc, #24]	; (800b974 <show_stand_icon+0x2c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d102      	bne.n	800b966 <show_stand_icon+0x1e>

			Stand_Switch_Position_Change();
 800b960:	f000 f83e 	bl	800b9e0 <Stand_Switch_Position_Change>
		} else {
			Stand_Switch_Static();
		}
	}
}
 800b964:	e001      	b.n	800b96a <show_stand_icon+0x22>
			Stand_Switch_Static();
 800b966:	f000 f807 	bl	800b978 <Stand_Switch_Static>
}
 800b96a:	bf00      	nop
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000460 	.word	0x20000460
 800b974:	20000810 	.word	0x20000810

0800b978 <Stand_Switch_Static>:

void Stand_Switch_Static(void) {
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af04      	add	r7, sp, #16

	switch (ui_mode) {
 800b97e:	4b14      	ldr	r3, [pc, #80]	; (800b9d0 <Stand_Switch_Static+0x58>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <Stand_Switch_Static+0x14>
 800b986:	2b01      	cmp	r3, #1
 800b988:	d00f      	beq.n	800b9aa <Stand_Switch_Static+0x32>

		case DARK_MODE:
			Load_ImageASTC(&host, 1014656, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 9);
			break;
	}
}
 800b98a:	e01d      	b.n	800b9c8 <Stand_Switch_Static+0x50>
			Load_ImageASTC(&host, 744000, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 9);
 800b98c:	2309      	movs	r3, #9
 800b98e:	9302      	str	r3, [sp, #8]
 800b990:	f240 134d 	movw	r3, #333	; 0x14d
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	2319      	movs	r3, #25
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	2319      	movs	r3, #25
 800b99c:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800b9a0:	490c      	ldr	r1, [pc, #48]	; (800b9d4 <Stand_Switch_Static+0x5c>)
 800b9a2:	480d      	ldr	r0, [pc, #52]	; (800b9d8 <Stand_Switch_Static+0x60>)
 800b9a4:	f003 fcb6 	bl	800f314 <Load_ImageASTC>
			break;
 800b9a8:	e00e      	b.n	800b9c8 <Stand_Switch_Static+0x50>
			Load_ImageASTC(&host, 1014656, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 9);
 800b9aa:	2309      	movs	r3, #9
 800b9ac:	9302      	str	r3, [sp, #8]
 800b9ae:	f240 134d 	movw	r3, #333	; 0x14d
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	2319      	movs	r3, #25
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	2319      	movs	r3, #25
 800b9ba:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800b9be:	4907      	ldr	r1, [pc, #28]	; (800b9dc <Stand_Switch_Static+0x64>)
 800b9c0:	4805      	ldr	r0, [pc, #20]	; (800b9d8 <Stand_Switch_Static+0x60>)
 800b9c2:	f003 fca7 	bl	800f314 <Load_ImageASTC>
			break;
 800b9c6:	bf00      	nop
}
 800b9c8:	bf00      	nop
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	200009a4 	.word	0x200009a4
 800b9d4:	000b5a40 	.word	0x000b5a40
 800b9d8:	20000ae0 	.word	0x20000ae0
 800b9dc:	000f7b80 	.word	0x000f7b80

0800b9e0 <Stand_Switch_Position_Change>:

void Stand_Switch_Position_Change(void) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af04      	add	r7, sp, #16

	static uint8_t stand_switch_position = 0;

	if (stand_switch_position == 0) {
 800b9e6:	4b2e      	ldr	r3, [pc, #184]	; (800baa0 <Stand_Switch_Position_Change+0xc0>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d128      	bne.n	800ba40 <Stand_Switch_Position_Change+0x60>

		switch (ui_mode) {
 800b9ee:	4b2d      	ldr	r3, [pc, #180]	; (800baa4 <Stand_Switch_Position_Change+0xc4>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d002      	beq.n	800b9fc <Stand_Switch_Position_Change+0x1c>
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d00f      	beq.n	800ba1a <Stand_Switch_Position_Change+0x3a>
 800b9fa:	e01d      	b.n	800ba38 <Stand_Switch_Position_Change+0x58>

			case LIGHT_MODE:
				Load_ImageASTC(&host, 744000, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 9);
 800b9fc:	2309      	movs	r3, #9
 800b9fe:	9302      	str	r3, [sp, #8]
 800ba00:	f240 134d 	movw	r3, #333	; 0x14d
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	2319      	movs	r3, #25
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	2319      	movs	r3, #25
 800ba0c:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800ba10:	4925      	ldr	r1, [pc, #148]	; (800baa8 <Stand_Switch_Position_Change+0xc8>)
 800ba12:	4826      	ldr	r0, [pc, #152]	; (800baac <Stand_Switch_Position_Change+0xcc>)
 800ba14:	f003 fc7e 	bl	800f314 <Load_ImageASTC>
				break;
 800ba18:	e00e      	b.n	800ba38 <Stand_Switch_Position_Change+0x58>

			case DARK_MODE:
				Load_ImageASTC(&host, 1014656, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 9);
 800ba1a:	2309      	movs	r3, #9
 800ba1c:	9302      	str	r3, [sp, #8]
 800ba1e:	f240 134d 	movw	r3, #333	; 0x14d
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	2319      	movs	r3, #25
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	2319      	movs	r3, #25
 800ba2a:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800ba2e:	4920      	ldr	r1, [pc, #128]	; (800bab0 <Stand_Switch_Position_Change+0xd0>)
 800ba30:	481e      	ldr	r0, [pc, #120]	; (800baac <Stand_Switch_Position_Change+0xcc>)
 800ba32:	f003 fc6f 	bl	800f314 <Load_ImageASTC>
				break;
 800ba36:	bf00      	nop
		}
		stand_switch_position = 1;
 800ba38:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <Stand_Switch_Position_Change+0xc0>)
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	701a      	strb	r2, [r3, #0]
				Load_ImageASTC(&host, 1014656, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 15);
				break;
		}
		stand_switch_position = 0;
	}
}
 800ba3e:	e02b      	b.n	800ba98 <Stand_Switch_Position_Change+0xb8>
	} else if (stand_switch_position == 1) {
 800ba40:	4b17      	ldr	r3, [pc, #92]	; (800baa0 <Stand_Switch_Position_Change+0xc0>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d127      	bne.n	800ba98 <Stand_Switch_Position_Change+0xb8>
		switch (ui_mode) {
 800ba48:	4b16      	ldr	r3, [pc, #88]	; (800baa4 <Stand_Switch_Position_Change+0xc4>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <Stand_Switch_Position_Change+0x76>
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d00f      	beq.n	800ba74 <Stand_Switch_Position_Change+0x94>
 800ba54:	e01d      	b.n	800ba92 <Stand_Switch_Position_Change+0xb2>
				Load_ImageASTC(&host, 744000, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 15);
 800ba56:	230f      	movs	r3, #15
 800ba58:	9302      	str	r3, [sp, #8]
 800ba5a:	f240 134d 	movw	r3, #333	; 0x14d
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	2319      	movs	r3, #25
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	2319      	movs	r3, #25
 800ba66:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800ba6a:	490f      	ldr	r1, [pc, #60]	; (800baa8 <Stand_Switch_Position_Change+0xc8>)
 800ba6c:	480f      	ldr	r0, [pc, #60]	; (800baac <Stand_Switch_Position_Change+0xcc>)
 800ba6e:	f003 fc51 	bl	800f314 <Load_ImageASTC>
				break;
 800ba72:	e00e      	b.n	800ba92 <Stand_Switch_Position_Change+0xb2>
				Load_ImageASTC(&host, 1014656, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 333, 15);
 800ba74:	230f      	movs	r3, #15
 800ba76:	9302      	str	r3, [sp, #8]
 800ba78:	f240 134d 	movw	r3, #333	; 0x14d
 800ba7c:	9301      	str	r3, [sp, #4]
 800ba7e:	2319      	movs	r3, #25
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	2319      	movs	r3, #25
 800ba84:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800ba88:	4909      	ldr	r1, [pc, #36]	; (800bab0 <Stand_Switch_Position_Change+0xd0>)
 800ba8a:	4808      	ldr	r0, [pc, #32]	; (800baac <Stand_Switch_Position_Change+0xcc>)
 800ba8c:	f003 fc42 	bl	800f314 <Load_ImageASTC>
				break;
 800ba90:	bf00      	nop
		stand_switch_position = 0;
 800ba92:	4b03      	ldr	r3, [pc, #12]	; (800baa0 <Stand_Switch_Position_Change+0xc0>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	701a      	strb	r2, [r3, #0]
}
 800ba98:	bf00      	nop
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20000268 	.word	0x20000268
 800baa4:	200009a4 	.word	0x200009a4
 800baa8:	000b5a40 	.word	0x000b5a40
 800baac:	20000ae0 	.word	0x20000ae0
 800bab0:	000f7b80 	.word	0x000f7b80

0800bab4 <show_icons_home>:

void show_icons_home(void) {
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0

	show_battery_icon();
 800bab8:	f000 fbce 	bl	800c258 <show_battery_icon>
//	show_temperature_icon();
	show_bluetooth_icon();
 800babc:	f000 fca2 	bl	800c404 <show_bluetooth_icon>
	show_location_icon();
 800bac0:	f000 fd0a 	bl	800c4d8 <show_location_icon>
	show_headlight_status_icon();
 800bac4:	f000 fd7a 	bl	800c5bc <show_headlight_status_icon>
	show_network_strength();
 800bac8:	f001 fa6a 	bl	800cfa0 <show_network_strength>

	if (series == 1) {
 800bacc:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <show_icons_home+0x30>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d102      	bne.n	800bada <show_icons_home+0x26>
		show_series1_icon();
 800bad4:	f000 fb08 	bl	800c0e8 <show_series1_icon>
	} else {
		dont_show_series1_icon();
	}
}
 800bad8:	e001      	b.n	800bade <show_icons_home+0x2a>
		dont_show_series1_icon();
 800bada:	f000 fb39 	bl	800c150 <dont_show_series1_icon>
}
 800bade:	bf00      	nop
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	200003b4 	.word	0x200003b4

0800bae8 <show_icons_stats>:

void show_icons_stats(void) {
 800bae8:	b580      	push	{r7, lr}
 800baea:	af00      	add	r7, sp, #0

//	show_kill_switch_icon();
	show_stand_icon();
 800baec:	f7ff ff2c 	bl	800b948 <show_stand_icon>
	show_bluetooth_icon();
 800baf0:	f000 fc88 	bl	800c404 <show_bluetooth_icon>
	show_battery_icon();
 800baf4:	f000 fbb0 	bl	800c258 <show_battery_icon>
	show_bike_render();
 800baf8:	f000 fb7a 	bl	800c1f0 <show_bike_render>
	show_headlight_status_icon();
 800bafc:	f000 fd5e 	bl	800c5bc <show_headlight_status_icon>
	show_network_strength();
 800bb00:	f001 fa4e 	bl	800cfa0 <show_network_strength>

	if (series == 1) {
 800bb04:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <show_icons_stats+0x34>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d102      	bne.n	800bb12 <show_icons_stats+0x2a>
		show_series1_icon();
 800bb0c:	f000 faec 	bl	800c0e8 <show_series1_icon>
	} else {
		dont_show_series1_icon();
	}
}
 800bb10:	e001      	b.n	800bb16 <show_icons_stats+0x2e>
		dont_show_series1_icon();
 800bb12:	f000 fb1d 	bl	800c150 <dont_show_series1_icon>
}
 800bb16:	bf00      	nop
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	200003b4 	.word	0x200003b4

0800bb20 <show_icons_chargingUI>:

void show_icons_chargingUI(void) {
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0

	show_background_extrude();
 800bb24:	f000 fd92 	bl	800c64c <show_background_extrude>
	show_circle();
 800bb28:	f000 fdc6 	bl	800c6b8 <show_circle>
}
 800bb2c:	bf00      	nop
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <show_SoC_circular_bar>:

void show_SoC_circular_bar(void) {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0

	if (animation_interrupt == 1) {
 800bb36:	4b3d      	ldr	r3, [pc, #244]	; (800bc2c <show_SoC_circular_bar+0xfc>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d109      	bne.n	800bb52 <show_SoC_circular_bar+0x22>
		App_WrCoCmd_Buffer(phost, RESTORE_CONTEXT());
 800bb3e:	4b3c      	ldr	r3, [pc, #240]	; (800bc30 <show_SoC_circular_bar+0x100>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f04f 510c 	mov.w	r1, #587202560	; 0x23000000
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 f860 	bl	800dc0c <App_WrCoCmd_Buffer>
		animation_interrupt = 0;
 800bb4c:	4b37      	ldr	r3, [pc, #220]	; (800bc2c <show_SoC_circular_bar+0xfc>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
	}

	load_color_turquoise();
 800bb52:	f002 ffb7 	bl	800eac4 <load_color_turquoise>
	temp_animation_flag = allow_animation;
 800bb56:	4b37      	ldr	r3, [pc, #220]	; (800bc34 <show_SoC_circular_bar+0x104>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a37      	ldr	r2, [pc, #220]	; (800bc38 <show_SoC_circular_bar+0x108>)
 800bb5c:	6013      	str	r3, [r2, #0]

	if (Charging_just_started) {
 800bb5e:	4b37      	ldr	r3, [pc, #220]	; (800bc3c <show_SoC_circular_bar+0x10c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d051      	beq.n	800bc0a <show_SoC_circular_bar+0xda>

		for (int i = 0; i <= charging_SoC; i++) {
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
 800bb6a:	e03d      	b.n	800bbe8 <show_SoC_circular_bar+0xb8>

			if (temp_animation_flag != allow_animation) {
 800bb6c:	4b32      	ldr	r3, [pc, #200]	; (800bc38 <show_SoC_circular_bar+0x108>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	4b30      	ldr	r3, [pc, #192]	; (800bc34 <show_SoC_circular_bar+0x104>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d00a      	beq.n	800bb8e <show_SoC_circular_bar+0x5e>
				App_WrCoCmd_Buffer(phost, SAVE_CONTEXT());
 800bb78:	4b2d      	ldr	r3, [pc, #180]	; (800bc30 <show_SoC_circular_bar+0x100>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f04f 5108 	mov.w	r1, #570425344	; 0x22000000
 800bb80:	4618      	mov	r0, r3
 800bb82:	f002 f843 	bl	800dc0c <App_WrCoCmd_Buffer>
				animation_interrupt = 1;
 800bb86:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <show_SoC_circular_bar+0xfc>)
 800bb88:	2201      	movs	r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]
				break;
 800bb8c:	e034      	b.n	800bbf8 <show_SoC_circular_bar+0xc8>
			}

			if (ending_splashscreen_flag == 1) {
 800bb8e:	4b2c      	ldr	r3, [pc, #176]	; (800bc40 <show_SoC_circular_bar+0x110>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d02f      	beq.n	800bbf6 <show_SoC_circular_bar+0xc6>
				break;
			}

			ui_mode = DARK_MODE;
 800bb96:	4b2b      	ldr	r3, [pc, #172]	; (800bc44 <show_SoC_circular_bar+0x114>)
 800bb98:	2201      	movs	r2, #1
 800bb9a:	701a      	strb	r2, [r3, #0]
			set_ui_mode();
 800bb9c:	f003 f90a 	bl	800edb4 <set_ui_mode>
			initialize_graphics_controller();
 800bba0:	f003 fb2a 	bl	800f1f8 <initialize_graphics_controller>
			background_color_grey_118();
 800bba4:	f003 f83c 	bl	800ec20 <background_color_grey_118>
			clearscreen();
 800bba8:	f003 fb8c 	bl	800f2c4 <clearscreen>

			sprint(dash_chargingSoC, "%d%%", i);
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	4926      	ldr	r1, [pc, #152]	; (800bc48 <show_SoC_circular_bar+0x118>)
 800bbb0:	4826      	ldr	r0, [pc, #152]	; (800bc4c <show_SoC_circular_bar+0x11c>)
 800bbb2:	f001 ff15 	bl	800d9e0 <sprint>

			load_color_turquoise();
 800bbb6:	f002 ff85 	bl	800eac4 <load_color_turquoise>
			show_SoC_level(i);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f84c 	bl	800bc58 <show_SoC_level>

			load_color_white();
 800bbc0:	f002 fff2 	bl	800eba8 <load_color_white>
			show_icons_chargingUI();
 800bbc4:	f7ff ffac 	bl	800bb20 <show_icons_chargingUI>

			show_charging_SoC();
 800bbc8:	f000 fddc 	bl	800c784 <show_charging_SoC>
			show_eta();
 800bbcc:	f000 fdf4 	bl	800c7b8 <show_eta>
			show_travelBoldly();
 800bbd0:	f000 fbe2 	bl	800c398 <show_travelBoldly>

			UI_lastState = 1;
 800bbd4:	4b1e      	ldr	r3, [pc, #120]	; (800bc50 <show_SoC_circular_bar+0x120>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]

			launch_dash();
 800bbda:	f003 fb67 	bl	800f2ac <launch_dash>
			clear_buffer();
 800bbde:	f003 fb7f 	bl	800f2e0 <clear_buffer>
		for (int i = 0; i <= charging_SoC; i++) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	607b      	str	r3, [r7, #4]
 800bbe8:	4b1a      	ldr	r3, [pc, #104]	; (800bc54 <show_SoC_circular_bar+0x124>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	461a      	mov	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	ddbb      	ble.n	800bb6c <show_SoC_circular_bar+0x3c>
 800bbf4:	e000      	b.n	800bbf8 <show_SoC_circular_bar+0xc8>
				break;
 800bbf6:	bf00      	nop
		}
		if (temp_animation_flag == allow_animation) {
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <show_SoC_circular_bar+0x108>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	4b0d      	ldr	r3, [pc, #52]	; (800bc34 <show_SoC_circular_bar+0x104>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d102      	bne.n	800bc0a <show_SoC_circular_bar+0xda>
			Charging_just_started = 0;
 800bc04:	4b0d      	ldr	r3, [pc, #52]	; (800bc3c <show_SoC_circular_bar+0x10c>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
		}
	}
	if (temp_animation_flag == allow_animation) {
 800bc0a:	4b0b      	ldr	r3, [pc, #44]	; (800bc38 <show_SoC_circular_bar+0x108>)
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <show_SoC_circular_bar+0x104>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d106      	bne.n	800bc24 <show_SoC_circular_bar+0xf4>
		clearscreen();
 800bc16:	f003 fb55 	bl	800f2c4 <clearscreen>
		show_SoC_level(charging_SoC);
 800bc1a:	4b0e      	ldr	r3, [pc, #56]	; (800bc54 <show_SoC_circular_bar+0x124>)
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 f81a 	bl	800bc58 <show_SoC_level>
	}
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	2000084c 	.word	0x2000084c
 800bc30:	20000bc8 	.word	0x20000bc8
 800bc34:	200003c8 	.word	0x200003c8
 800bc38:	2000073c 	.word	0x2000073c
 800bc3c:	2000057c 	.word	0x2000057c
 800bc40:	20000534 	.word	0x20000534
 800bc44:	200009a4 	.word	0x200009a4
 800bc48:	0800fbac 	.word	0x0800fbac
 800bc4c:	200009cc 	.word	0x200009cc
 800bc50:	200009a0 	.word	0x200009a0
 800bc54:	20000744 	.word	0x20000744

0800bc58 <show_SoC_level>:

void show_SoC_level(int charging_SoC) {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

	if (charging_SoC >= 0 && charging_SoC <= 25) {
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	db2e      	blt.n	800bcc4 <show_SoC_level+0x6c>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2b19      	cmp	r3, #25
 800bc6a:	dc2b      	bgt.n	800bcc4 <show_SoC_level+0x6c>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_A));
 800bc6c:	4bb8      	ldr	r3, [pc, #736]	; (800bf50 <show_SoC_level+0x2f8>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	49b8      	ldr	r1, [pc, #736]	; (800bf54 <show_SoC_level+0x2fc>)
 800bc72:	4618      	mov	r0, r3
 800bc74:	f001 ffca 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800bc78:	4bb5      	ldr	r3, [pc, #724]	; (800bf50 <show_SoC_level+0x2f8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	49b6      	ldr	r1, [pc, #728]	; (800bf58 <show_SoC_level+0x300>)
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f001 ffc4 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140 + (charging_SoC * 125) / 25, 2 + (charging_SoC * 125) / 25, 0, 0));
 800bc84:	4bb2      	ldr	r3, [pc, #712]	; (800bf50 <show_SoC_level+0x2f8>)
 800bc86:	6818      	ldr	r0, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	338c      	adds	r3, #140	; 0x8c
 800bc92:	055b      	lsls	r3, r3, #21
 800bc94:	4ab1      	ldr	r2, [pc, #708]	; (800bf5c <show_SoC_level+0x304>)
 800bc96:	401a      	ands	r2, r3
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	3302      	adds	r3, #2
 800bca2:	0319      	lsls	r1, r3, #12
 800bca4:	4bae      	ldr	r3, [pc, #696]	; (800bf60 <show_SoC_level+0x308>)
 800bca6:	400b      	ands	r3, r1
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcae:	4619      	mov	r1, r3
 800bcb0:	f001 ffac 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bcb4:	4ba6      	ldr	r3, [pc, #664]	; (800bf50 <show_SoC_level+0x2f8>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 ffa5 	bl	800dc0c <App_WrCoCmd_Buffer>
 800bcc2:	e140      	b.n	800bf46 <show_SoC_level+0x2ee>

	} else if (charging_SoC > 25 && charging_SoC <= 50) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b19      	cmp	r3, #25
 800bcc8:	dd4e      	ble.n	800bd68 <show_SoC_level+0x110>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b32      	cmp	r3, #50	; 0x32
 800bcce:	dc4b      	bgt.n	800bd68 <show_SoC_level+0x110>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_A));
 800bcd0:	4b9f      	ldr	r3, [pc, #636]	; (800bf50 <show_SoC_level+0x2f8>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	499f      	ldr	r1, [pc, #636]	; (800bf54 <show_SoC_level+0x2fc>)
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 ff98 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800bcdc:	4b9c      	ldr	r3, [pc, #624]	; (800bf50 <show_SoC_level+0x2f8>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	499d      	ldr	r1, [pc, #628]	; (800bf58 <show_SoC_level+0x300>)
 800bce2:	4618      	mov	r0, r3
 800bce4:	f001 ff92 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(265, 127, 0, 0));
 800bce8:	4b99      	ldr	r3, [pc, #612]	; (800bf50 <show_SoC_level+0x2f8>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	499d      	ldr	r1, [pc, #628]	; (800bf64 <show_SoC_level+0x30c>)
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 ff8c 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bcf4:	4b96      	ldr	r3, [pc, #600]	; (800bf50 <show_SoC_level+0x2f8>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 ff85 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_R));
 800bd02:	4b93      	ldr	r3, [pc, #588]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4998      	ldr	r1, [pc, #608]	; (800bf68 <show_SoC_level+0x310>)
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f001 ff7f 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800bd0e:	4b90      	ldr	r3, [pc, #576]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4991      	ldr	r1, [pc, #580]	; (800bf58 <show_SoC_level+0x300>)
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 ff79 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(265 - ((charging_SoC - 25) * 125) / 25, 127 + ((charging_SoC - 25) * 125) / 25, 0, 0));
 800bd1a:	4b8d      	ldr	r3, [pc, #564]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f1a3 0219 	sub.w	r2, r3, #25
 800bd24:	4613      	mov	r3, r2
 800bd26:	079b      	lsls	r3, r3, #30
 800bd28:	1a9b      	subs	r3, r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	f203 1309 	addw	r3, r3, #265	; 0x109
 800bd32:	055b      	lsls	r3, r3, #21
 800bd34:	4a89      	ldr	r2, [pc, #548]	; (800bf5c <show_SoC_level+0x304>)
 800bd36:	401a      	ands	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f1a3 0119 	sub.w	r1, r3, #25
 800bd3e:	460b      	mov	r3, r1
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	440b      	add	r3, r1
 800bd44:	337f      	adds	r3, #127	; 0x7f
 800bd46:	0319      	lsls	r1, r3, #12
 800bd48:	4b85      	ldr	r3, [pc, #532]	; (800bf60 <show_SoC_level+0x308>)
 800bd4a:	400b      	ands	r3, r1
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd52:	4619      	mov	r1, r3
 800bd54:	f001 ff5a 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bd58:	4b7d      	ldr	r3, [pc, #500]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 ff53 	bl	800dc0c <App_WrCoCmd_Buffer>
 800bd66:	e0ee      	b.n	800bf46 <show_SoC_level+0x2ee>

	} else if (charging_SoC > 50 && charging_SoC <= 75) {
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b32      	cmp	r3, #50	; 0x32
 800bd6c:	dd68      	ble.n	800be40 <show_SoC_level+0x1e8>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b4b      	cmp	r3, #75	; 0x4b
 800bd72:	dc65      	bgt.n	800be40 <show_SoC_level+0x1e8>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_A));
 800bd74:	4b76      	ldr	r3, [pc, #472]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4976      	ldr	r1, [pc, #472]	; (800bf54 <show_SoC_level+0x2fc>)
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 ff46 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800bd80:	4b73      	ldr	r3, [pc, #460]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4974      	ldr	r1, [pc, #464]	; (800bf58 <show_SoC_level+0x300>)
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 ff40 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(265, 127, 0, 0));
 800bd8c:	4b70      	ldr	r3, [pc, #448]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4974      	ldr	r1, [pc, #464]	; (800bf64 <show_SoC_level+0x30c>)
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 ff3a 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bd98:	4b6d      	ldr	r3, [pc, #436]	; (800bf50 <show_SoC_level+0x2f8>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800bda0:	4618      	mov	r0, r3
 800bda2:	f001 ff33 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_R));
 800bda6:	4b6a      	ldr	r3, [pc, #424]	; (800bf50 <show_SoC_level+0x2f8>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	496f      	ldr	r1, [pc, #444]	; (800bf68 <show_SoC_level+0x310>)
 800bdac:	4618      	mov	r0, r3
 800bdae:	f001 ff2d 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800bdb2:	4b67      	ldr	r3, [pc, #412]	; (800bf50 <show_SoC_level+0x2f8>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4968      	ldr	r1, [pc, #416]	; (800bf58 <show_SoC_level+0x300>)
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f001 ff27 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 252, 0, 0));
 800bdbe:	4b64      	ldr	r3, [pc, #400]	; (800bf50 <show_SoC_level+0x2f8>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	496a      	ldr	r1, [pc, #424]	; (800bf6c <show_SoC_level+0x314>)
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f001 ff21 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bdca:	4b61      	ldr	r3, [pc, #388]	; (800bf50 <show_SoC_level+0x2f8>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f001 ff1a 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_B));
 800bdd8:	4b5d      	ldr	r3, [pc, #372]	; (800bf50 <show_SoC_level+0x2f8>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4964      	ldr	r1, [pc, #400]	; (800bf70 <show_SoC_level+0x318>)
 800bdde:	4618      	mov	r0, r3
 800bde0:	f001 ff14 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800bde4:	4b5a      	ldr	r3, [pc, #360]	; (800bf50 <show_SoC_level+0x2f8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	495b      	ldr	r1, [pc, #364]	; (800bf58 <show_SoC_level+0x300>)
 800bdea:	4618      	mov	r0, r3
 800bdec:	f001 ff0e 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140 - ((charging_SoC - 50) * 125) / 25, 252 - ((charging_SoC - 50) * 125) / 25, 0, 0));
 800bdf0:	4b57      	ldr	r3, [pc, #348]	; (800bf50 <show_SoC_level+0x2f8>)
 800bdf2:	6818      	ldr	r0, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	079b      	lsls	r3, r3, #30
 800bdfe:	1a9b      	subs	r3, r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	1a9b      	subs	r3, r3, r2
 800be04:	338c      	adds	r3, #140	; 0x8c
 800be06:	055b      	lsls	r3, r3, #21
 800be08:	4a54      	ldr	r2, [pc, #336]	; (800bf5c <show_SoC_level+0x304>)
 800be0a:	401a      	ands	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f1a3 0132 	sub.w	r1, r3, #50	; 0x32
 800be12:	460b      	mov	r3, r1
 800be14:	079b      	lsls	r3, r3, #30
 800be16:	1a5b      	subs	r3, r3, r1
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	1a5b      	subs	r3, r3, r1
 800be1c:	33fc      	adds	r3, #252	; 0xfc
 800be1e:	0319      	lsls	r1, r3, #12
 800be20:	4b4f      	ldr	r3, [pc, #316]	; (800bf60 <show_SoC_level+0x308>)
 800be22:	400b      	ands	r3, r1
 800be24:	4313      	orrs	r3, r2
 800be26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be2a:	4619      	mov	r1, r3
 800be2c:	f001 feee 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800be30:	4b47      	ldr	r3, [pc, #284]	; (800bf50 <show_SoC_level+0x2f8>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800be38:	4618      	mov	r0, r3
 800be3a:	f001 fee7 	bl	800dc0c <App_WrCoCmd_Buffer>
 800be3e:	e082      	b.n	800bf46 <show_SoC_level+0x2ee>

	} else if (charging_SoC > 75 && charging_SoC <= 100) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b4b      	cmp	r3, #75	; 0x4b
 800be44:	dd7f      	ble.n	800bf46 <show_SoC_level+0x2ee>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b64      	cmp	r3, #100	; 0x64
 800be4a:	dc7c      	bgt.n	800bf46 <show_SoC_level+0x2ee>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_A));
 800be4c:	4b40      	ldr	r3, [pc, #256]	; (800bf50 <show_SoC_level+0x2f8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4940      	ldr	r1, [pc, #256]	; (800bf54 <show_SoC_level+0x2fc>)
 800be52:	4618      	mov	r0, r3
 800be54:	f001 feda 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800be58:	4b3d      	ldr	r3, [pc, #244]	; (800bf50 <show_SoC_level+0x2f8>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	493e      	ldr	r1, [pc, #248]	; (800bf58 <show_SoC_level+0x300>)
 800be5e:	4618      	mov	r0, r3
 800be60:	f001 fed4 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(265, 127, 0, 0));
 800be64:	4b3a      	ldr	r3, [pc, #232]	; (800bf50 <show_SoC_level+0x2f8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	493e      	ldr	r1, [pc, #248]	; (800bf64 <show_SoC_level+0x30c>)
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 fece 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800be70:	4b37      	ldr	r3, [pc, #220]	; (800bf50 <show_SoC_level+0x2f8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800be78:	4618      	mov	r0, r3
 800be7a:	f001 fec7 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_R));
 800be7e:	4b34      	ldr	r3, [pc, #208]	; (800bf50 <show_SoC_level+0x2f8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4939      	ldr	r1, [pc, #228]	; (800bf68 <show_SoC_level+0x310>)
 800be84:	4618      	mov	r0, r3
 800be86:	f001 fec1 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800be8a:	4b31      	ldr	r3, [pc, #196]	; (800bf50 <show_SoC_level+0x2f8>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4932      	ldr	r1, [pc, #200]	; (800bf58 <show_SoC_level+0x300>)
 800be90:	4618      	mov	r0, r3
 800be92:	f001 febb 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 252, 0, 0));
 800be96:	4b2e      	ldr	r3, [pc, #184]	; (800bf50 <show_SoC_level+0x2f8>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4934      	ldr	r1, [pc, #208]	; (800bf6c <show_SoC_level+0x314>)
 800be9c:	4618      	mov	r0, r3
 800be9e:	f001 feb5 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bea2:	4b2b      	ldr	r3, [pc, #172]	; (800bf50 <show_SoC_level+0x2f8>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800beaa:	4618      	mov	r0, r3
 800beac:	f001 feae 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_B));
 800beb0:	4b27      	ldr	r3, [pc, #156]	; (800bf50 <show_SoC_level+0x2f8>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	492e      	ldr	r1, [pc, #184]	; (800bf70 <show_SoC_level+0x318>)
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 fea8 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800bebc:	4b24      	ldr	r3, [pc, #144]	; (800bf50 <show_SoC_level+0x2f8>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4925      	ldr	r1, [pc, #148]	; (800bf58 <show_SoC_level+0x300>)
 800bec2:	4618      	mov	r0, r3
 800bec4:	f001 fea2 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(15, 127, 0, 0));
 800bec8:	4b21      	ldr	r3, [pc, #132]	; (800bf50 <show_SoC_level+0x2f8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4929      	ldr	r1, [pc, #164]	; (800bf74 <show_SoC_level+0x31c>)
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 fe9c 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bed4:	4b1e      	ldr	r3, [pc, #120]	; (800bf50 <show_SoC_level+0x2f8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800bedc:	4618      	mov	r0, r3
 800bede:	f001 fe95 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(EDGE_STRIP_L));
 800bee2:	4b1b      	ldr	r3, [pc, #108]	; (800bf50 <show_SoC_level+0x2f8>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4924      	ldr	r1, [pc, #144]	; (800bf78 <show_SoC_level+0x320>)
 800bee8:	4618      	mov	r0, r3
 800beea:	f001 fe8f 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(140, 127, 0, 0));
 800beee:	4b18      	ldr	r3, [pc, #96]	; (800bf50 <show_SoC_level+0x2f8>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4919      	ldr	r1, [pc, #100]	; (800bf58 <show_SoC_level+0x300>)
 800bef4:	4618      	mov	r0, r3
 800bef6:	f001 fe89 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(16 + ((charging_SoC - 75) * 125) / 25, 127 - ((charging_SoC - 75) * 125) / 25, 0, 0));
 800befa:	4b15      	ldr	r3, [pc, #84]	; (800bf50 <show_SoC_level+0x2f8>)
 800befc:	6818      	ldr	r0, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f1a3 024b 	sub.w	r2, r3, #75	; 0x4b
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	3310      	adds	r3, #16
 800bf0c:	055b      	lsls	r3, r3, #21
 800bf0e:	4a13      	ldr	r2, [pc, #76]	; (800bf5c <show_SoC_level+0x304>)
 800bf10:	401a      	ands	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f1a3 014b 	sub.w	r1, r3, #75	; 0x4b
 800bf18:	460b      	mov	r3, r1
 800bf1a:	079b      	lsls	r3, r3, #30
 800bf1c:	1a5b      	subs	r3, r3, r1
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	1a5b      	subs	r3, r3, r1
 800bf22:	337f      	adds	r3, #127	; 0x7f
 800bf24:	0319      	lsls	r1, r3, #12
 800bf26:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <show_SoC_level+0x308>)
 800bf28:	400b      	ands	r3, r1
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf30:	4619      	mov	r1, r3
 800bf32:	f001 fe6b 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800bf36:	4b06      	ldr	r3, [pc, #24]	; (800bf50 <show_SoC_level+0x2f8>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f001 fe64 	bl	800dc0c <App_WrCoCmd_Buffer>
	}
}
 800bf44:	e7ff      	b.n	800bf46 <show_SoC_level+0x2ee>
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20000bc8 	.word	0x20000bc8
 800bf54:	1f000007 	.word	0x1f000007
 800bf58:	9187f000 	.word	0x9187f000
 800bf5c:	3fe00000 	.word	0x3fe00000
 800bf60:	001ff000 	.word	0x001ff000
 800bf64:	a127f000 	.word	0xa127f000
 800bf68:	1f000005 	.word	0x1f000005
 800bf6c:	918fc000 	.word	0x918fc000
 800bf70:	1f000008 	.word	0x1f000008
 800bf74:	81e7f000 	.word	0x81e7f000
 800bf78:	1f000006 	.word	0x1f000006

0800bf7c <show_soc_percent_value>:

void show_soc_percent_value(void) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af02      	add	r7, sp, #8

	if (charging_SoC <= 20) {
 800bf82:	4b2e      	ldr	r3, [pc, #184]	; (800c03c <show_soc_percent_value+0xc0>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b14      	cmp	r3, #20
 800bf88:	d802      	bhi.n	800bf90 <show_soc_percent_value+0x14>

		load_color_red();
 800bf8a:	f002 fde1 	bl	800eb50 <load_color_red>
 800bf8e:	e00c      	b.n	800bfaa <show_soc_percent_value+0x2e>

	} else {

		if (ui_mode == LIGHT_MODE) {
 800bf90:	4b2b      	ldr	r3, [pc, #172]	; (800c040 <show_soc_percent_value+0xc4>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <show_soc_percent_value+0x22>
			load_color_light_green();
 800bf98:	f002 fe82 	bl	800eca0 <load_color_light_green>
 800bf9c:	e005      	b.n	800bfaa <show_soc_percent_value+0x2e>
		} else if (ui_mode == DARK_MODE) {
 800bf9e:	4b28      	ldr	r3, [pc, #160]	; (800c040 <show_soc_percent_value+0xc4>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d101      	bne.n	800bfaa <show_soc_percent_value+0x2e>
			load_color_dark_green();
 800bfa6:	f002 fe89 	bl	800ecbc <load_color_dark_green>
		}
	}

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800bfaa:	4b26      	ldr	r3, [pc, #152]	; (800c044 <show_soc_percent_value+0xc8>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4926      	ldr	r1, [pc, #152]	; (800c048 <show_soc_percent_value+0xcc>)
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f001 fe2b 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(75));
 800bfb6:	4b23      	ldr	r3, [pc, #140]	; (800c044 <show_soc_percent_value+0xc8>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4924      	ldr	r1, [pc, #144]	; (800c04c <show_soc_percent_value+0xd0>)
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f001 fe25 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(414, 14, 0, 0));
 800bfc2:	4b20      	ldr	r3, [pc, #128]	; (800c044 <show_soc_percent_value+0xc8>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4922      	ldr	r1, [pc, #136]	; (800c050 <show_soc_percent_value+0xd4>)
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 fe1f 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(414 + (charging_SoC * 27 / 100), 24, 0, 0));
 800bfce:	4b1d      	ldr	r3, [pc, #116]	; (800c044 <show_soc_percent_value+0xc8>)
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	4b1a      	ldr	r3, [pc, #104]	; (800c03c <show_soc_percent_value+0xc0>)
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	4613      	mov	r3, r2
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	4413      	add	r3, r2
 800bfde:	00da      	lsls	r2, r3, #3
 800bfe0:	4413      	add	r3, r2
 800bfe2:	4a1c      	ldr	r2, [pc, #112]	; (800c054 <show_soc_percent_value+0xd8>)
 800bfe4:	fb82 1203 	smull	r1, r2, r2, r3
 800bfe8:	1152      	asrs	r2, r2, #5
 800bfea:	17db      	asrs	r3, r3, #31
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 800bff2:	055a      	lsls	r2, r3, #21
 800bff4:	4b18      	ldr	r3, [pc, #96]	; (800c058 <show_soc_percent_value+0xdc>)
 800bff6:	4013      	ands	r3, r2
 800bff8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c000:	4619      	mov	r1, r3
 800c002:	f001 fe03 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));
 800c006:	4b0f      	ldr	r3, [pc, #60]	; (800c044 <show_soc_percent_value+0xc8>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4914      	ldr	r1, [pc, #80]	; (800c05c <show_soc_percent_value+0xe0>)
 800c00c:	4618      	mov	r0, r3
 800c00e:	f001 fdfd 	bl	800dc0c <App_WrCoCmd_Buffer>
//		case DARK_MODE:
//			load_color_white();
//			break;
//	}

	Barlow_bold_18();
 800c012:	f002 ff4d 	bl	800eeb0 <Barlow_bold_18>
	load_color_black();
 800c016:	f002 fd71 	bl	800eafc <load_color_black>

	Gpu_CoCmd_Text(phost, 424, 12, 1, OPT_CENTERX, dash_dischargingSoC);
 800c01a:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <show_soc_percent_value+0xc8>)
 800c01c:	6818      	ldr	r0, [r3, #0]
 800c01e:	4b10      	ldr	r3, [pc, #64]	; (800c060 <show_soc_percent_value+0xe4>)
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	2301      	movs	r3, #1
 800c02a:	220c      	movs	r2, #12
 800c02c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800c030:	f001 ff53 	bl	800deda <Gpu_CoCmd_Text>
}
 800c034:	bf00      	nop
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	20000744 	.word	0x20000744
 800c040:	200009a4 	.word	0x200009a4
 800c044:	20000bc8 	.word	0x20000bc8
 800c048:	1f000009 	.word	0x1f000009
 800c04c:	0e00004b 	.word	0x0e00004b
 800c050:	b3c0e000 	.word	0xb3c0e000
 800c054:	51eb851f 	.word	0x51eb851f
 800c058:	3fe00000 	.word	0x3fe00000
 800c05c:	0e00000f 	.word	0x0e00000f
 800c060:	2000077c 	.word	0x2000077c

0800c064 <show_bikename>:

void show_bikename(void) {
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af02      	add	r7, sp, #8

	load_text_color();
 800c06a:	f002 fd7f 	bl	800eb6c <load_text_color>
	Barlow_bold_20();
 800c06e:	f002 ff3d 	bl	800eeec <Barlow_bold_20>
	Gpu_CoCmd_Text(phost, 54, 12, 1, 0, dash_bikename);
 800c072:	4b07      	ldr	r3, [pc, #28]	; (800c090 <show_bikename+0x2c>)
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	4b07      	ldr	r3, [pc, #28]	; (800c094 <show_bikename+0x30>)
 800c078:	9301      	str	r3, [sp, #4]
 800c07a:	2300      	movs	r3, #0
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	2301      	movs	r3, #1
 800c080:	220c      	movs	r2, #12
 800c082:	2136      	movs	r1, #54	; 0x36
 800c084:	f001 ff29 	bl	800deda <Gpu_CoCmd_Text>
}
 800c088:	bf00      	nop
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000bc8 	.word	0x20000bc8
 800c094:	20000614 	.word	0x20000614

0800c098 <show_temperature_value>:

void show_temperature_value(void){
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af02      	add	r7, sp, #8

	switch (ui_mode) {
 800c09e:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <show_temperature_value+0x44>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <show_temperature_value+0x14>
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d003      	beq.n	800c0b2 <show_temperature_value+0x1a>
 800c0aa:	e005      	b.n	800c0b8 <show_temperature_value+0x20>
		case LIGHT_MODE:
			load_color_black();
 800c0ac:	f002 fd26 	bl	800eafc <load_color_black>
			break;
 800c0b0:	e002      	b.n	800c0b8 <show_temperature_value+0x20>

		case DARK_MODE:
			load_color_white();
 800c0b2:	f002 fd79 	bl	800eba8 <load_color_white>
			break;
 800c0b6:	bf00      	nop
	}

	Barlow_bold_20();
 800c0b8:	f002 ff18 	bl	800eeec <Barlow_bold_20>
	Gpu_CoCmd_Text(phost, 340, 12, 1, OPT_CENTERX, dash_temperature_value);
 800c0bc:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <show_temperature_value+0x48>)
 800c0be:	6818      	ldr	r0, [r3, #0]
 800c0c0:	4b08      	ldr	r3, [pc, #32]	; (800c0e4 <show_temperature_value+0x4c>)
 800c0c2:	9301      	str	r3, [sp, #4]
 800c0c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	220c      	movs	r2, #12
 800c0ce:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800c0d2:	f001 ff02 	bl	800deda <Gpu_CoCmd_Text>
}
 800c0d6:	bf00      	nop
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	200009a4 	.word	0x200009a4
 800c0e0:	20000bc8 	.word	0x20000bc8
 800c0e4:	2000037c 	.word	0x2000037c

0800c0e8 <show_series1_icon>:

void show_series1_icon(void) {
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af04      	add	r7, sp, #16

	load_color_white();
 800c0ee:	f002 fd5b 	bl	800eba8 <load_color_white>

	switch (ui_mode) {
 800c0f2:	4b13      	ldr	r3, [pc, #76]	; (800c140 <show_series1_icon+0x58>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d002      	beq.n	800c100 <show_series1_icon+0x18>
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d00e      	beq.n	800c11c <show_series1_icon+0x34>

		case DARK_MODE:
			Load_ImageASTC(&host, 1013760, COMPRESSED_RGBA_ASTC_5x5_KHR, 23, 25, 30, 8);
			break;
	}
}
 800c0fe:	e01b      	b.n	800c138 <show_series1_icon+0x50>
			Load_ImageASTC(&host, 1014208, COMPRESSED_RGBA_ASTC_5x5_KHR, 23, 25, 30, 8);
 800c100:	2308      	movs	r3, #8
 800c102:	9302      	str	r3, [sp, #8]
 800c104:	231e      	movs	r3, #30
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	2319      	movs	r3, #25
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	2317      	movs	r3, #23
 800c10e:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c112:	490c      	ldr	r1, [pc, #48]	; (800c144 <show_series1_icon+0x5c>)
 800c114:	480c      	ldr	r0, [pc, #48]	; (800c148 <show_series1_icon+0x60>)
 800c116:	f003 f8fd 	bl	800f314 <Load_ImageASTC>
			break;
 800c11a:	e00d      	b.n	800c138 <show_series1_icon+0x50>
			Load_ImageASTC(&host, 1013760, COMPRESSED_RGBA_ASTC_5x5_KHR, 23, 25, 30, 8);
 800c11c:	2308      	movs	r3, #8
 800c11e:	9302      	str	r3, [sp, #8]
 800c120:	231e      	movs	r3, #30
 800c122:	9301      	str	r3, [sp, #4]
 800c124:	2319      	movs	r3, #25
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	2317      	movs	r3, #23
 800c12a:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c12e:	4907      	ldr	r1, [pc, #28]	; (800c14c <show_series1_icon+0x64>)
 800c130:	4805      	ldr	r0, [pc, #20]	; (800c148 <show_series1_icon+0x60>)
 800c132:	f003 f8ef 	bl	800f314 <Load_ImageASTC>
			break;
 800c136:	bf00      	nop
}
 800c138:	bf00      	nop
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	200009a4 	.word	0x200009a4
 800c144:	000f79c0 	.word	0x000f79c0
 800c148:	20000ae0 	.word	0x20000ae0
 800c14c:	000f7800 	.word	0x000f7800

0800c150 <dont_show_series1_icon>:

void dont_show_series1_icon(void) {
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af02      	add	r7, sp, #8

	r2p();
 800c156:	f002 fdcd 	bl	800ecf4 <r2p>

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800c15a:	4b1e      	ldr	r3, [pc, #120]	; (800c1d4 <dont_show_series1_icon+0x84>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	491e      	ldr	r1, [pc, #120]	; (800c1d8 <dont_show_series1_icon+0x88>)
 800c160:	4618      	mov	r0, r3
 800c162:	f001 fd53 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(70));
 800c166:	4b1b      	ldr	r3, [pc, #108]	; (800c1d4 <dont_show_series1_icon+0x84>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	491c      	ldr	r1, [pc, #112]	; (800c1dc <dont_show_series1_icon+0x8c>)
 800c16c:	4618      	mov	r0, r3
 800c16e:	f001 fd4d 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(32, 12, 0, 0));
 800c172:	4b18      	ldr	r3, [pc, #96]	; (800c1d4 <dont_show_series1_icon+0x84>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	491a      	ldr	r1, [pc, #104]	; (800c1e0 <dont_show_series1_icon+0x90>)
 800c178:	4618      	mov	r0, r3
 800c17a:	f001 fd47 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(49, 27, 0, 0));
 800c17e:	4b15      	ldr	r3, [pc, #84]	; (800c1d4 <dont_show_series1_icon+0x84>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4918      	ldr	r1, [pc, #96]	; (800c1e4 <dont_show_series1_icon+0x94>)
 800c184:	4618      	mov	r0, r3
 800c186:	f001 fd41 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800c18a:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <dont_show_series1_icon+0x84>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800c192:	4618      	mov	r0, r3
 800c194:	f001 fd3a 	bl	800dc0c <App_WrCoCmd_Buffer>

	Barlow_bold_18();
 800c198:	f002 fe8a 	bl	800eeb0 <Barlow_bold_18>

	switch (ui_mode) {
 800c19c:	4b12      	ldr	r3, [pc, #72]	; (800c1e8 <dont_show_series1_icon+0x98>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <dont_show_series1_icon+0x5a>
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d003      	beq.n	800c1b0 <dont_show_series1_icon+0x60>
 800c1a8:	e005      	b.n	800c1b6 <dont_show_series1_icon+0x66>

		case LIGHT_MODE:

			load_color_white();
 800c1aa:	f002 fcfd 	bl	800eba8 <load_color_white>
			break;
 800c1ae:	e002      	b.n	800c1b6 <dont_show_series1_icon+0x66>

		case DARK_MODE:

			load_color_black();
 800c1b0:	f002 fca4 	bl	800eafc <load_color_black>
			break;
 800c1b4:	bf00      	nop
	}
	Gpu_CoCmd_Text(phost, 30, 13, 1, 0, "P1");
 800c1b6:	4b07      	ldr	r3, [pc, #28]	; (800c1d4 <dont_show_series1_icon+0x84>)
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	4b0c      	ldr	r3, [pc, #48]	; (800c1ec <dont_show_series1_icon+0x9c>)
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	220d      	movs	r2, #13
 800c1c6:	211e      	movs	r1, #30
 800c1c8:	f001 fe87 	bl	800deda <Gpu_CoCmd_Text>
}
 800c1cc:	bf00      	nop
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20000bc8 	.word	0x20000bc8
 800c1d8:	1f000009 	.word	0x1f000009
 800c1dc:	0e000046 	.word	0x0e000046
 800c1e0:	8400c000 	.word	0x8400c000
 800c1e4:	8621b000 	.word	0x8621b000
 800c1e8:	200009a4 	.word	0x200009a4
 800c1ec:	0800fbb4 	.word	0x0800fbb4

0800c1f0 <show_bike_render>:

void show_bike_render(void) {
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af04      	add	r7, sp, #16

	load_color_white();
 800c1f6:	f002 fcd7 	bl	800eba8 <load_color_white>

	switch (ui_mode) {
 800c1fa:	4b13      	ldr	r3, [pc, #76]	; (800c248 <show_bike_render+0x58>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <show_bike_render+0x18>
 800c202:	2b01      	cmp	r3, #1
 800c204:	d00e      	beq.n	800c224 <show_bike_render+0x34>

		case DARK_MODE:
			Load_ImageASTC(&host, 1003008, COMPRESSED_RGBA_ASTC_5x5_KHR, 160, 104, 25, 61);
			break;
	}
}
 800c206:	e01b      	b.n	800c240 <show_bike_render+0x50>
			Load_ImageASTC(&host, 992256, COMPRESSED_RGBA_ASTC_5x5_KHR, 160, 104, 25, 61);
 800c208:	233d      	movs	r3, #61	; 0x3d
 800c20a:	9302      	str	r3, [sp, #8]
 800c20c:	2319      	movs	r3, #25
 800c20e:	9301      	str	r3, [sp, #4]
 800c210:	2368      	movs	r3, #104	; 0x68
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	23a0      	movs	r3, #160	; 0xa0
 800c216:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c21a:	490c      	ldr	r1, [pc, #48]	; (800c24c <show_bike_render+0x5c>)
 800c21c:	480c      	ldr	r0, [pc, #48]	; (800c250 <show_bike_render+0x60>)
 800c21e:	f003 f879 	bl	800f314 <Load_ImageASTC>
			break;
 800c222:	e00d      	b.n	800c240 <show_bike_render+0x50>
			Load_ImageASTC(&host, 1003008, COMPRESSED_RGBA_ASTC_5x5_KHR, 160, 104, 25, 61);
 800c224:	233d      	movs	r3, #61	; 0x3d
 800c226:	9302      	str	r3, [sp, #8]
 800c228:	2319      	movs	r3, #25
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	2368      	movs	r3, #104	; 0x68
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	23a0      	movs	r3, #160	; 0xa0
 800c232:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c236:	4907      	ldr	r1, [pc, #28]	; (800c254 <show_bike_render+0x64>)
 800c238:	4805      	ldr	r0, [pc, #20]	; (800c250 <show_bike_render+0x60>)
 800c23a:	f003 f86b 	bl	800f314 <Load_ImageASTC>
			break;
 800c23e:	bf00      	nop
}
 800c240:	bf00      	nop
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	200009a4 	.word	0x200009a4
 800c24c:	000f2400 	.word	0x000f2400
 800c250:	20000ae0 	.word	0x20000ae0
 800c254:	000f4e00 	.word	0x000f4e00

0800c258 <show_battery_icon>:

void show_battery_icon(void) {
 800c258:	b580      	push	{r7, lr}
 800c25a:	af00      	add	r7, sp, #0

	switch (ui_mode) {
 800c25c:	4b42      	ldr	r3, [pc, #264]	; (800c368 <show_battery_icon+0x110>)
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <show_battery_icon+0x12>
 800c264:	2b01      	cmp	r3, #1
 800c266:	d003      	beq.n	800c270 <show_battery_icon+0x18>
 800c268:	e005      	b.n	800c276 <show_battery_icon+0x1e>

		case LIGHT_MODE:
			load_color_grey_30();
 800c26a:	f002 fd35 	bl	800ecd8 <load_color_grey_30>
			break;
 800c26e:	e002      	b.n	800c276 <show_battery_icon+0x1e>

		case DARK_MODE:
			load_color_white();
 800c270:	f002 fc9a 	bl	800eba8 <load_color_white>
			break;
 800c274:	bf00      	nop
	}

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800c276:	4b3d      	ldr	r3, [pc, #244]	; (800c36c <show_battery_icon+0x114>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	493d      	ldr	r1, [pc, #244]	; (800c370 <show_battery_icon+0x118>)
 800c27c:	4618      	mov	r0, r3
 800c27e:	f001 fcc5 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(90));
 800c282:	4b3a      	ldr	r3, [pc, #232]	; (800c36c <show_battery_icon+0x114>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	493b      	ldr	r1, [pc, #236]	; (800c374 <show_battery_icon+0x11c>)
 800c288:	4618      	mov	r0, r3
 800c28a:	f001 fcbf 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(414, 14, 0, 0));
 800c28e:	4b37      	ldr	r3, [pc, #220]	; (800c36c <show_battery_icon+0x114>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4939      	ldr	r1, [pc, #228]	; (800c378 <show_battery_icon+0x120>)
 800c294:	4618      	mov	r0, r3
 800c296:	f001 fcb9 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(441, 24, 0, 0));
 800c29a:	4b34      	ldr	r3, [pc, #208]	; (800c36c <show_battery_icon+0x114>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4937      	ldr	r1, [pc, #220]	; (800c37c <show_battery_icon+0x124>)
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f001 fcb3 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800c2a6:	4b31      	ldr	r3, [pc, #196]	; (800c36c <show_battery_icon+0x114>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f001 fcac 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800c2b4:	4b2d      	ldr	r3, [pc, #180]	; (800c36c <show_battery_icon+0x114>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	492d      	ldr	r1, [pc, #180]	; (800c370 <show_battery_icon+0x118>)
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 fca6 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(20));
 800c2c0:	4b2a      	ldr	r3, [pc, #168]	; (800c36c <show_battery_icon+0x114>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	492e      	ldr	r1, [pc, #184]	; (800c380 <show_battery_icon+0x128>)
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f001 fca0 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(448, 16, 0, 0));
 800c2cc:	4b27      	ldr	r3, [pc, #156]	; (800c36c <show_battery_icon+0x114>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	492c      	ldr	r1, [pc, #176]	; (800c384 <show_battery_icon+0x12c>)
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 fc9a 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(448, 21, 0, 0));
 800c2d8:	4b24      	ldr	r3, [pc, #144]	; (800c36c <show_battery_icon+0x114>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	492a      	ldr	r1, [pc, #168]	; (800c388 <show_battery_icon+0x130>)
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 fc94 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800c2e4:	4b21      	ldr	r3, [pc, #132]	; (800c36c <show_battery_icon+0x114>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f001 fc8d 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));

	switch (ui_mode) {
 800c2f2:	4b1d      	ldr	r3, [pc, #116]	; (800c368 <show_battery_icon+0x110>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <show_battery_icon+0xa8>
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d003      	beq.n	800c306 <show_battery_icon+0xae>
 800c2fe:	e005      	b.n	800c30c <show_battery_icon+0xb4>

		case LIGHT_MODE:
			load_color_white();
 800c300:	f002 fc52 	bl	800eba8 <load_color_white>
			break;
 800c304:	e002      	b.n	800c30c <show_battery_icon+0xb4>

		case DARK_MODE:
			load_color_black();
 800c306:	f002 fbf9 	bl	800eafc <load_color_black>
			break;
 800c30a:	bf00      	nop
	}

	App_WrCoCmd_Buffer(phost, COLOR_RGB(174, 174, 174));
 800c30c:	4b17      	ldr	r3, [pc, #92]	; (800c36c <show_battery_icon+0x114>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	491e      	ldr	r1, [pc, #120]	; (800c38c <show_battery_icon+0x134>)
 800c312:	4618      	mov	r0, r3
 800c314:	f001 fc7a 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800c318:	4b14      	ldr	r3, [pc, #80]	; (800c36c <show_battery_icon+0x114>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4914      	ldr	r1, [pc, #80]	; (800c370 <show_battery_icon+0x118>)
 800c31e:	4618      	mov	r0, r3
 800c320:	f001 fc74 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(75));
 800c324:	4b11      	ldr	r3, [pc, #68]	; (800c36c <show_battery_icon+0x114>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4919      	ldr	r1, [pc, #100]	; (800c390 <show_battery_icon+0x138>)
 800c32a:	4618      	mov	r0, r3
 800c32c:	f001 fc6e 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(414, 14, 0, 0));
 800c330:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <show_battery_icon+0x114>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4910      	ldr	r1, [pc, #64]	; (800c378 <show_battery_icon+0x120>)
 800c336:	4618      	mov	r0, r3
 800c338:	f001 fc68 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(441, 24, 0, 0));
 800c33c:	4b0b      	ldr	r3, [pc, #44]	; (800c36c <show_battery_icon+0x114>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	490e      	ldr	r1, [pc, #56]	; (800c37c <show_battery_icon+0x124>)
 800c342:	4618      	mov	r0, r3
 800c344:	f001 fc62 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800c348:	4b08      	ldr	r3, [pc, #32]	; (800c36c <show_battery_icon+0x114>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800c350:	4618      	mov	r0, r3
 800c352:	f001 fc5b 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <show_battery_icon+0x114>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	490e      	ldr	r1, [pc, #56]	; (800c394 <show_battery_icon+0x13c>)
 800c35c:	4618      	mov	r0, r3
 800c35e:	f001 fc55 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800c362:	bf00      	nop
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	200009a4 	.word	0x200009a4
 800c36c:	20000bc8 	.word	0x20000bc8
 800c370:	1f000009 	.word	0x1f000009
 800c374:	0e00005a 	.word	0x0e00005a
 800c378:	b3c0e000 	.word	0xb3c0e000
 800c37c:	b7218000 	.word	0xb7218000
 800c380:	0e000014 	.word	0x0e000014
 800c384:	b8010000 	.word	0xb8010000
 800c388:	b8015000 	.word	0xb8015000
 800c38c:	04aeaeae 	.word	0x04aeaeae
 800c390:	0e00004b 	.word	0x0e00004b
 800c394:	0e00000f 	.word	0x0e00000f

0800c398 <show_travelBoldly>:
			}
			break;
	}
}

void show_travelBoldly(void) {
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af02      	add	r7, sp, #8

	Barlow_bold_24();
 800c39e:	f002 fde1 	bl	800ef64 <Barlow_bold_24>
	load_color_turquoise();
 800c3a2:	f002 fb8f 	bl	800eac4 <load_color_turquoise>
	Gpu_CoCmd_Text(phost, 165, 225, 1, 0, "#");
 800c3a6:	4b13      	ldr	r3, [pc, #76]	; (800c3f4 <show_travelBoldly+0x5c>)
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	4b13      	ldr	r3, [pc, #76]	; (800c3f8 <show_travelBoldly+0x60>)
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	22e1      	movs	r2, #225	; 0xe1
 800c3b6:	21a5      	movs	r1, #165	; 0xa5
 800c3b8:	f001 fd8f 	bl	800deda <Gpu_CoCmd_Text>
	Gpu_CoCmd_Text(phost, 253, 225, 1, 0, "Boldly");
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <show_travelBoldly+0x5c>)
 800c3be:	6818      	ldr	r0, [r3, #0]
 800c3c0:	4b0e      	ldr	r3, [pc, #56]	; (800c3fc <show_travelBoldly+0x64>)
 800c3c2:	9301      	str	r3, [sp, #4]
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	22e1      	movs	r2, #225	; 0xe1
 800c3cc:	21fd      	movs	r1, #253	; 0xfd
 800c3ce:	f001 fd84 	bl	800deda <Gpu_CoCmd_Text>

	load_color_white();
 800c3d2:	f002 fbe9 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 183, 225, 1, 0, "Travel");
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <show_travelBoldly+0x5c>)
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	4b09      	ldr	r3, [pc, #36]	; (800c400 <show_travelBoldly+0x68>)
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	22e1      	movs	r2, #225	; 0xe1
 800c3e6:	21b7      	movs	r1, #183	; 0xb7
 800c3e8:	f001 fd77 	bl	800deda <Gpu_CoCmd_Text>
}
 800c3ec:	bf00      	nop
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000bc8 	.word	0x20000bc8
 800c3f8:	0800fbb8 	.word	0x0800fbb8
 800c3fc:	0800fbbc 	.word	0x0800fbbc
 800c400:	0800fbc4 	.word	0x0800fbc4

0800c404 <show_bluetooth_icon>:

void show_bluetooth_icon(void) {
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af04      	add	r7, sp, #16

	load_color_white();
 800c40a:	f002 fbcd 	bl	800eba8 <load_color_white>
	switch (ui_mode) {
 800c40e:	4b2b      	ldr	r3, [pc, #172]	; (800c4bc <show_bluetooth_icon+0xb8>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d002      	beq.n	800c41c <show_bluetooth_icon+0x18>
 800c416:	2b01      	cmp	r3, #1
 800c418:	d025      	beq.n	800c466 <show_bluetooth_icon+0x62>
					Load_ImageASTC(&host, 747520, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 380, 8);
					break;
			}
			break;
	}
}
 800c41a:	e04c      	b.n	800c4b6 <show_bluetooth_icon+0xb2>
			switch (BLE_paired) {
 800c41c:	4b28      	ldr	r3, [pc, #160]	; (800c4c0 <show_bluetooth_icon+0xbc>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d010      	beq.n	800c446 <show_bluetooth_icon+0x42>
 800c424:	2b01      	cmp	r3, #1
 800c426:	d143      	bne.n	800c4b0 <show_bluetooth_icon+0xac>
					Load_ImageASTC(&host, 747072, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 380, 8);
 800c428:	2308      	movs	r3, #8
 800c42a:	9302      	str	r3, [sp, #8]
 800c42c:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	2319      	movs	r3, #25
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	2319      	movs	r3, #25
 800c438:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c43c:	4921      	ldr	r1, [pc, #132]	; (800c4c4 <show_bluetooth_icon+0xc0>)
 800c43e:	4822      	ldr	r0, [pc, #136]	; (800c4c8 <show_bluetooth_icon+0xc4>)
 800c440:	f002 ff68 	bl	800f314 <Load_ImageASTC>
					break;
 800c444:	e00e      	b.n	800c464 <show_bluetooth_icon+0x60>
					Load_ImageASTC(&host, 747968, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 380, 8);
 800c446:	2308      	movs	r3, #8
 800c448:	9302      	str	r3, [sp, #8]
 800c44a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	2319      	movs	r3, #25
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	2319      	movs	r3, #25
 800c456:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c45a:	491c      	ldr	r1, [pc, #112]	; (800c4cc <show_bluetooth_icon+0xc8>)
 800c45c:	481a      	ldr	r0, [pc, #104]	; (800c4c8 <show_bluetooth_icon+0xc4>)
 800c45e:	f002 ff59 	bl	800f314 <Load_ImageASTC>
					break;
 800c462:	bf00      	nop
			break;
 800c464:	e024      	b.n	800c4b0 <show_bluetooth_icon+0xac>
			switch (BLE_paired) {
 800c466:	4b16      	ldr	r3, [pc, #88]	; (800c4c0 <show_bluetooth_icon+0xbc>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d010      	beq.n	800c490 <show_bluetooth_icon+0x8c>
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d120      	bne.n	800c4b4 <show_bluetooth_icon+0xb0>
					Load_ImageASTC(&host, 746624, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 380, 8);
 800c472:	2308      	movs	r3, #8
 800c474:	9302      	str	r3, [sp, #8]
 800c476:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	2319      	movs	r3, #25
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	2319      	movs	r3, #25
 800c482:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c486:	4912      	ldr	r1, [pc, #72]	; (800c4d0 <show_bluetooth_icon+0xcc>)
 800c488:	480f      	ldr	r0, [pc, #60]	; (800c4c8 <show_bluetooth_icon+0xc4>)
 800c48a:	f002 ff43 	bl	800f314 <Load_ImageASTC>
					break;
 800c48e:	e00e      	b.n	800c4ae <show_bluetooth_icon+0xaa>
					Load_ImageASTC(&host, 747520, COMPRESSED_RGBA_ASTC_5x5_KHR, 25, 25, 380, 8);
 800c490:	2308      	movs	r3, #8
 800c492:	9302      	str	r3, [sp, #8]
 800c494:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	2319      	movs	r3, #25
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	2319      	movs	r3, #25
 800c4a0:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c4a4:	490b      	ldr	r1, [pc, #44]	; (800c4d4 <show_bluetooth_icon+0xd0>)
 800c4a6:	4808      	ldr	r0, [pc, #32]	; (800c4c8 <show_bluetooth_icon+0xc4>)
 800c4a8:	f002 ff34 	bl	800f314 <Load_ImageASTC>
					break;
 800c4ac:	bf00      	nop
			break;
 800c4ae:	e001      	b.n	800c4b4 <show_bluetooth_icon+0xb0>
			break;
 800c4b0:	bf00      	nop
 800c4b2:	e000      	b.n	800c4b6 <show_bluetooth_icon+0xb2>
			break;
 800c4b4:	bf00      	nop
}
 800c4b6:	bf00      	nop
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	200009a4 	.word	0x200009a4
 800c4c0:	200008fc 	.word	0x200008fc
 800c4c4:	000b6640 	.word	0x000b6640
 800c4c8:	20000ae0 	.word	0x20000ae0
 800c4cc:	000b69c0 	.word	0x000b69c0
 800c4d0:	000b6480 	.word	0x000b6480
 800c4d4:	000b6800 	.word	0x000b6800

0800c4d8 <show_location_icon>:

void show_location_icon(void) {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af04      	add	r7, sp, #16

	int x_position = 310;
 800c4de:	f44f 739b 	mov.w	r3, #310	; 0x136
 800c4e2:	607b      	str	r3, [r7, #4]
	int y_position = 9;
 800c4e4:	2309      	movs	r3, #9
 800c4e6:	603b      	str	r3, [r7, #0]

	switch (ui_mode) {
 800c4e8:	4b2d      	ldr	r3, [pc, #180]	; (800c5a0 <show_location_icon+0xc8>)
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <show_location_icon+0x1e>
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d027      	beq.n	800c544 <show_location_icon+0x6c>
					Load_ImageASTC(&host, 937472, COMPRESSED_RGBA_ASTC_5x5_KHR, 20, 25, x_position, y_position);
					break;
			}
			break;
	}
}
 800c4f4:	e050      	b.n	800c598 <show_location_icon+0xc0>
			switch (gps_tracking_status) {
 800c4f6:	4b2b      	ldr	r3, [pc, #172]	; (800c5a4 <show_location_icon+0xcc>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d011      	beq.n	800c522 <show_location_icon+0x4a>
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d147      	bne.n	800c592 <show_location_icon+0xba>
					Load_ImageASTC(&host, 938432, COMPRESSED_RGBA_ASTC_5x5_KHR, 20, 25, x_position, y_position);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	b29b      	uxth	r3, r3
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	b292      	uxth	r2, r2
 800c50a:	9202      	str	r2, [sp, #8]
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	2319      	movs	r3, #25
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	2314      	movs	r3, #20
 800c514:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c518:	4923      	ldr	r1, [pc, #140]	; (800c5a8 <show_location_icon+0xd0>)
 800c51a:	4824      	ldr	r0, [pc, #144]	; (800c5ac <show_location_icon+0xd4>)
 800c51c:	f002 fefa 	bl	800f314 <Load_ImageASTC>
					break;
 800c520:	e00f      	b.n	800c542 <show_location_icon+0x6a>
					Load_ImageASTC(&host, 937792, COMPRESSED_RGBA_ASTC_5x5_KHR, 20, 25, x_position, y_position);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	b29b      	uxth	r3, r3
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	b292      	uxth	r2, r2
 800c52a:	9202      	str	r2, [sp, #8]
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	2319      	movs	r3, #25
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	2314      	movs	r3, #20
 800c534:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c538:	491d      	ldr	r1, [pc, #116]	; (800c5b0 <show_location_icon+0xd8>)
 800c53a:	481c      	ldr	r0, [pc, #112]	; (800c5ac <show_location_icon+0xd4>)
 800c53c:	f002 feea 	bl	800f314 <Load_ImageASTC>
					break;
 800c540:	bf00      	nop
			break;
 800c542:	e026      	b.n	800c592 <show_location_icon+0xba>
			switch (gps_tracking_status) {
 800c544:	4b17      	ldr	r3, [pc, #92]	; (800c5a4 <show_location_icon+0xcc>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d011      	beq.n	800c570 <show_location_icon+0x98>
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d122      	bne.n	800c596 <show_location_icon+0xbe>
					Load_ImageASTC(&host, 938112, COMPRESSED_RGBA_ASTC_5x5_KHR, 20, 25, x_position, y_position);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	b29b      	uxth	r3, r3
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	b292      	uxth	r2, r2
 800c558:	9202      	str	r2, [sp, #8]
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	2319      	movs	r3, #25
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	2314      	movs	r3, #20
 800c562:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c566:	4913      	ldr	r1, [pc, #76]	; (800c5b4 <show_location_icon+0xdc>)
 800c568:	4810      	ldr	r0, [pc, #64]	; (800c5ac <show_location_icon+0xd4>)
 800c56a:	f002 fed3 	bl	800f314 <Load_ImageASTC>
					break;
 800c56e:	e00f      	b.n	800c590 <show_location_icon+0xb8>
					Load_ImageASTC(&host, 937472, COMPRESSED_RGBA_ASTC_5x5_KHR, 20, 25, x_position, y_position);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	b29b      	uxth	r3, r3
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	b292      	uxth	r2, r2
 800c578:	9202      	str	r2, [sp, #8]
 800c57a:	9301      	str	r3, [sp, #4]
 800c57c:	2319      	movs	r3, #25
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	2314      	movs	r3, #20
 800c582:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c586:	490c      	ldr	r1, [pc, #48]	; (800c5b8 <show_location_icon+0xe0>)
 800c588:	4808      	ldr	r0, [pc, #32]	; (800c5ac <show_location_icon+0xd4>)
 800c58a:	f002 fec3 	bl	800f314 <Load_ImageASTC>
					break;
 800c58e:	bf00      	nop
			break;
 800c590:	e001      	b.n	800c596 <show_location_icon+0xbe>
			break;
 800c592:	bf00      	nop
 800c594:	e000      	b.n	800c598 <show_location_icon+0xc0>
			break;
 800c596:	bf00      	nop
}
 800c598:	bf00      	nop
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	200009a4 	.word	0x200009a4
 800c5a4:	2000070c 	.word	0x2000070c
 800c5a8:	000e51c0 	.word	0x000e51c0
 800c5ac:	20000ae0 	.word	0x20000ae0
 800c5b0:	000e4f40 	.word	0x000e4f40
 800c5b4:	000e5080 	.word	0x000e5080
 800c5b8:	000e4e00 	.word	0x000e4e00

0800c5bc <show_headlight_status_icon>:

void show_headlight_status_icon(void) {
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	af00      	add	r7, sp, #0

	if (headlight_status != HEADLIGHT_OFF){
 800c5c0:	4b1b      	ldr	r3, [pc, #108]	; (800c630 <show_headlight_status_icon+0x74>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d031      	beq.n	800c62c <show_headlight_status_icon+0x70>

		switch (headlight_status) {
 800c5c8:	4b19      	ldr	r3, [pc, #100]	; (800c630 <show_headlight_status_icon+0x74>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d002      	beq.n	800c5d6 <show_headlight_status_icon+0x1a>
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d003      	beq.n	800c5dc <show_headlight_status_icon+0x20>
			case HIGH_BEAM:
				load_color_blue();
				break;

			default:
				break;
 800c5d4:	e005      	b.n	800c5e2 <show_headlight_status_icon+0x26>
				load_color_turquoise();
 800c5d6:	f002 fa75 	bl	800eac4 <load_color_turquoise>
				break;
 800c5da:	e002      	b.n	800c5e2 <show_headlight_status_icon+0x26>
				load_color_blue();
 800c5dc:	f002 fa80 	bl	800eae0 <load_color_blue>
				break;
 800c5e0:	bf00      	nop
		}

		App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800c5e2:	4b14      	ldr	r3, [pc, #80]	; (800c634 <show_headlight_status_icon+0x78>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4914      	ldr	r1, [pc, #80]	; (800c638 <show_headlight_status_icon+0x7c>)
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f001 fb0f 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, LINE_WIDTH(270));
 800c5ee:	4b11      	ldr	r3, [pc, #68]	; (800c634 <show_headlight_status_icon+0x78>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4912      	ldr	r1, [pc, #72]	; (800c63c <show_headlight_status_icon+0x80>)
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f001 fb09 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(200, 20, 0, 0));
 800c5fa:	4b0e      	ldr	r3, [pc, #56]	; (800c634 <show_headlight_status_icon+0x78>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4910      	ldr	r1, [pc, #64]	; (800c640 <show_headlight_status_icon+0x84>)
 800c600:	4618      	mov	r0, r3
 800c602:	f001 fb03 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(280, 20, 0, 0));
 800c606:	4b0b      	ldr	r3, [pc, #44]	; (800c634 <show_headlight_status_icon+0x78>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	490e      	ldr	r1, [pc, #56]	; (800c644 <show_headlight_status_icon+0x88>)
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 fafd 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800c612:	4b08      	ldr	r3, [pc, #32]	; (800c634 <show_headlight_status_icon+0x78>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800c61a:	4618      	mov	r0, r3
 800c61c:	f001 faf6 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));
 800c620:	4b04      	ldr	r3, [pc, #16]	; (800c634 <show_headlight_status_icon+0x78>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4908      	ldr	r1, [pc, #32]	; (800c648 <show_headlight_status_icon+0x8c>)
 800c626:	4618      	mov	r0, r3
 800c628:	f001 faf0 	bl	800dc0c <App_WrCoCmd_Buffer>
	}
}
 800c62c:	bf00      	nop
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	20000998 	.word	0x20000998
 800c634:	20000bc8 	.word	0x20000bc8
 800c638:	1f000009 	.word	0x1f000009
 800c63c:	0e00010e 	.word	0x0e00010e
 800c640:	99014000 	.word	0x99014000
 800c644:	a3014000 	.word	0xa3014000
 800c648:	0e00000f 	.word	0x0e00000f

0800c64c <show_background_extrude>:

void show_background_extrude(void) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af04      	add	r7, sp, #16

	switch (ui_mode) {
 800c652:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <show_background_extrude+0x5c>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <show_background_extrude+0x14>
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d010      	beq.n	800c680 <show_background_extrude+0x34>

		case DARK_MODE:
			Load_ImageASTC(&host, 768512, COMPRESSED_RGBA_ASTC_5x5_KHR, 480, 275, 0, 0);
			break;
	}
}
 800c65e:	e01f      	b.n	800c6a0 <show_background_extrude+0x54>
			Load_ImageASTC(&host, 852992, COMPRESSED_RGBA_ASTC_5x5_KHR, 480, 275, 0, 0);
 800c660:	2300      	movs	r3, #0
 800c662:	9302      	str	r3, [sp, #8]
 800c664:	2300      	movs	r3, #0
 800c666:	9301      	str	r3, [sp, #4]
 800c668:	f240 1313 	movw	r3, #275	; 0x113
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c672:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c676:	490d      	ldr	r1, [pc, #52]	; (800c6ac <show_background_extrude+0x60>)
 800c678:	480d      	ldr	r0, [pc, #52]	; (800c6b0 <show_background_extrude+0x64>)
 800c67a:	f002 fe4b 	bl	800f314 <Load_ImageASTC>
			break;
 800c67e:	e00f      	b.n	800c6a0 <show_background_extrude+0x54>
			Load_ImageASTC(&host, 768512, COMPRESSED_RGBA_ASTC_5x5_KHR, 480, 275, 0, 0);
 800c680:	2300      	movs	r3, #0
 800c682:	9302      	str	r3, [sp, #8]
 800c684:	2300      	movs	r3, #0
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	f240 1313 	movw	r3, #275	; 0x113
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c692:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c696:	4907      	ldr	r1, [pc, #28]	; (800c6b4 <show_background_extrude+0x68>)
 800c698:	4805      	ldr	r0, [pc, #20]	; (800c6b0 <show_background_extrude+0x64>)
 800c69a:	f002 fe3b 	bl	800f314 <Load_ImageASTC>
			break;
 800c69e:	bf00      	nop
}
 800c6a0:	bf00      	nop
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	200009a4 	.word	0x200009a4
 800c6ac:	000d0400 	.word	0x000d0400
 800c6b0:	20000ae0 	.word	0x20000ae0
 800c6b4:	000bba00 	.word	0x000bba00

0800c6b8 <show_circle>:

void show_circle(void) {
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af04      	add	r7, sp, #16

	switch (ui_mode) {
 800c6be:	4b29      	ldr	r3, [pc, #164]	; (800c764 <show_circle+0xac>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d002      	beq.n	800c6cc <show_circle+0x14>
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d01b      	beq.n	800c702 <show_circle+0x4a>

				Load_ImageASTC(&host, 1090560, COMPRESSED_RGBA_ASTC_5x5_KHR, 40, 60, 121, 96);
			}
			break;
	}
}
 800c6ca:	e047      	b.n	800c75c <show_circle+0xa4>
			Load_ImageASTC(&host, 760000, COMPRESSED_RGBA_ASTC_5x5_KHR, 115, 115, 84, 69);
 800c6cc:	2345      	movs	r3, #69	; 0x45
 800c6ce:	9302      	str	r3, [sp, #8]
 800c6d0:	2354      	movs	r3, #84	; 0x54
 800c6d2:	9301      	str	r3, [sp, #4]
 800c6d4:	2373      	movs	r3, #115	; 0x73
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	2373      	movs	r3, #115	; 0x73
 800c6da:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c6de:	4922      	ldr	r1, [pc, #136]	; (800c768 <show_circle+0xb0>)
 800c6e0:	4822      	ldr	r0, [pc, #136]	; (800c76c <show_circle+0xb4>)
 800c6e2:	f002 fe17 	bl	800f314 <Load_ImageASTC>
			Load_ImageASTC(&host, 749952, COMPRESSED_RGBA_ASTC_5x5_KHR, 40, 60, 121, 96);
 800c6e6:	2360      	movs	r3, #96	; 0x60
 800c6e8:	9302      	str	r3, [sp, #8]
 800c6ea:	2379      	movs	r3, #121	; 0x79
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	233c      	movs	r3, #60	; 0x3c
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	2328      	movs	r3, #40	; 0x28
 800c6f4:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c6f8:	491d      	ldr	r1, [pc, #116]	; (800c770 <show_circle+0xb8>)
 800c6fa:	481c      	ldr	r0, [pc, #112]	; (800c76c <show_circle+0xb4>)
 800c6fc:	f002 fe0a 	bl	800f314 <Load_ImageASTC>
			break;
 800c700:	e02c      	b.n	800c75c <show_circle+0xa4>
			Load_ImageASTC(&host, 751488, COMPRESSED_RGBA_ASTC_5x5_KHR, 115, 115, 84, 69);
 800c702:	2345      	movs	r3, #69	; 0x45
 800c704:	9302      	str	r3, [sp, #8]
 800c706:	2354      	movs	r3, #84	; 0x54
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	2373      	movs	r3, #115	; 0x73
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	2373      	movs	r3, #115	; 0x73
 800c710:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c714:	4917      	ldr	r1, [pc, #92]	; (800c774 <show_circle+0xbc>)
 800c716:	4815      	ldr	r0, [pc, #84]	; (800c76c <show_circle+0xb4>)
 800c718:	f002 fdfc 	bl	800f314 <Load_ImageASTC>
			if (charger_connected_but_not_charging == 1) {
 800c71c:	4b16      	ldr	r3, [pc, #88]	; (800c778 <show_circle+0xc0>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d10d      	bne.n	800c740 <show_circle+0x88>
				Load_ImageASTC(&host, 748416, COMPRESSED_RGBA_ASTC_5x5_KHR, 40, 60, 121, 96);
 800c724:	2360      	movs	r3, #96	; 0x60
 800c726:	9302      	str	r3, [sp, #8]
 800c728:	2379      	movs	r3, #121	; 0x79
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	233c      	movs	r3, #60	; 0x3c
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	2328      	movs	r3, #40	; 0x28
 800c732:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c736:	4911      	ldr	r1, [pc, #68]	; (800c77c <show_circle+0xc4>)
 800c738:	480c      	ldr	r0, [pc, #48]	; (800c76c <show_circle+0xb4>)
 800c73a:	f002 fdeb 	bl	800f314 <Load_ImageASTC>
			break;
 800c73e:	e00c      	b.n	800c75a <show_circle+0xa2>
				Load_ImageASTC(&host, 1090560, COMPRESSED_RGBA_ASTC_5x5_KHR, 40, 60, 121, 96);
 800c740:	2360      	movs	r3, #96	; 0x60
 800c742:	9302      	str	r3, [sp, #8]
 800c744:	2379      	movs	r3, #121	; 0x79
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	233c      	movs	r3, #60	; 0x3c
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	2328      	movs	r3, #40	; 0x28
 800c74e:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800c752:	490b      	ldr	r1, [pc, #44]	; (800c780 <show_circle+0xc8>)
 800c754:	4805      	ldr	r0, [pc, #20]	; (800c76c <show_circle+0xb4>)
 800c756:	f002 fddd 	bl	800f314 <Load_ImageASTC>
			break;
 800c75a:	bf00      	nop
}
 800c75c:	bf00      	nop
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	200009a4 	.word	0x200009a4
 800c768:	000b98c0 	.word	0x000b98c0
 800c76c:	20000ae0 	.word	0x20000ae0
 800c770:	000b7180 	.word	0x000b7180
 800c774:	000b7780 	.word	0x000b7780
 800c778:	20000844 	.word	0x20000844
 800c77c:	000b6b80 	.word	0x000b6b80
 800c780:	0010a400 	.word	0x0010a400

0800c784 <show_charging_SoC>:

void show_charging_SoC(void) {
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af02      	add	r7, sp, #8

	Barlow_semibold_48();
 800c78a:	f002 fcf9 	bl	800f180 <Barlow_semibold_48>
	load_color_white();
 800c78e:	f002 fa0b 	bl	800eba8 <load_color_white>
	Gpu_CoCmd_Text(phost, 257, 75, 1, 0, dash_chargingSoC);  // add dash_soc variable
 800c792:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <show_charging_SoC+0x2c>)
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	4b07      	ldr	r3, [pc, #28]	; (800c7b4 <show_charging_SoC+0x30>)
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	2300      	movs	r3, #0
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	2301      	movs	r3, #1
 800c7a0:	224b      	movs	r2, #75	; 0x4b
 800c7a2:	f240 1101 	movw	r1, #257	; 0x101
 800c7a6:	f001 fb98 	bl	800deda <Gpu_CoCmd_Text>
}
 800c7aa:	bf00      	nop
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	20000bc8 	.word	0x20000bc8
 800c7b4:	200009cc 	.word	0x200009cc

0800c7b8 <show_eta>:

void show_eta(void) {
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af02      	add	r7, sp, #8

	switch (tier1_cmd_can) {
 800c7be:	4b48      	ldr	r3, [pc, #288]	; (800c8e0 <show_eta+0x128>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b06      	cmp	r3, #6
 800c7c4:	d002      	beq.n	800c7cc <show_eta+0x14>
 800c7c6:	2b07      	cmp	r3, #7
 800c7c8:	d034      	beq.n	800c834 <show_eta+0x7c>

			break;

		default:

			break;
 800c7ca:	e086      	b.n	800c8da <show_eta+0x122>
			if (charging_SoC >= 100) {
 800c7cc:	4b45      	ldr	r3, [pc, #276]	; (800c8e4 <show_eta+0x12c>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	2b63      	cmp	r3, #99	; 0x63
 800c7d2:	d910      	bls.n	800c7f6 <show_eta+0x3e>
				Barlow_semibold_32();
 800c7d4:	f002 fcb6 	bl	800f144 <Barlow_semibold_32>
				load_color_turquoise();
 800c7d8:	f002 f974 	bl	800eac4 <load_color_turquoise>
				Gpu_CoCmd_Text(phost, 257, 140, 1, 0, "Fully Charged");
 800c7dc:	4b42      	ldr	r3, [pc, #264]	; (800c8e8 <show_eta+0x130>)
 800c7de:	6818      	ldr	r0, [r3, #0]
 800c7e0:	4b42      	ldr	r3, [pc, #264]	; (800c8ec <show_eta+0x134>)
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	228c      	movs	r2, #140	; 0x8c
 800c7ec:	f240 1101 	movw	r1, #257	; 0x101
 800c7f0:	f001 fb73 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800c7f4:	e071      	b.n	800c8da <show_eta+0x122>
				load_color_lightMode_grey_155();
 800c7f6:	f002 fa45 	bl	800ec84 <load_color_lightMode_grey_155>
				Barlow_semibold_32();
 800c7fa:	f002 fca3 	bl	800f144 <Barlow_semibold_32>
				Gpu_CoCmd_Text(phost, 257, 132, 1, 0, dash_chargingETA);
 800c7fe:	4b3a      	ldr	r3, [pc, #232]	; (800c8e8 <show_eta+0x130>)
 800c800:	6818      	ldr	r0, [r3, #0]
 800c802:	4b3b      	ldr	r3, [pc, #236]	; (800c8f0 <show_eta+0x138>)
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	2300      	movs	r3, #0
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	2301      	movs	r3, #1
 800c80c:	2284      	movs	r2, #132	; 0x84
 800c80e:	f240 1101 	movw	r1, #257	; 0x101
 800c812:	f001 fb62 	bl	800deda <Gpu_CoCmd_Text>
				Barlow_semibold_14();
 800c816:	f002 fc59 	bl	800f0cc <Barlow_semibold_14>
				Gpu_CoCmd_Text(phost, 317, 170, 1, 0, "to full charge");
 800c81a:	4b33      	ldr	r3, [pc, #204]	; (800c8e8 <show_eta+0x130>)
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	4b35      	ldr	r3, [pc, #212]	; (800c8f4 <show_eta+0x13c>)
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	2300      	movs	r3, #0
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	2301      	movs	r3, #1
 800c828:	22aa      	movs	r2, #170	; 0xaa
 800c82a:	f240 113d 	movw	r1, #317	; 0x13d
 800c82e:	f001 fb54 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800c832:	e052      	b.n	800c8da <show_eta+0x122>
			if (charging_SoC < 100){
 800c834:	4b2b      	ldr	r3, [pc, #172]	; (800c8e4 <show_eta+0x12c>)
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b63      	cmp	r3, #99	; 0x63
 800c83a:	d839      	bhi.n	800c8b0 <show_eta+0xf8>
				load_color_lightMode_grey_155();
 800c83c:	f002 fa22 	bl	800ec84 <load_color_lightMode_grey_155>
				Barlow_semibold_32();
 800c840:	f002 fc80 	bl	800f144 <Barlow_semibold_32>
				Gpu_CoCmd_Text(phost, 257, 132, 1, 0, dash_chargingETA);
 800c844:	4b28      	ldr	r3, [pc, #160]	; (800c8e8 <show_eta+0x130>)
 800c846:	6818      	ldr	r0, [r3, #0]
 800c848:	4b29      	ldr	r3, [pc, #164]	; (800c8f0 <show_eta+0x138>)
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	2300      	movs	r3, #0
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	2301      	movs	r3, #1
 800c852:	2284      	movs	r2, #132	; 0x84
 800c854:	f240 1101 	movw	r1, #257	; 0x101
 800c858:	f001 fb3f 	bl	800deda <Gpu_CoCmd_Text>
				if (charging_SoC >= 0 && charging_SoC < 80){
 800c85c:	4b21      	ldr	r3, [pc, #132]	; (800c8e4 <show_eta+0x12c>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b4f      	cmp	r3, #79	; 0x4f
 800c862:	d80e      	bhi.n	800c882 <show_eta+0xca>
					Barlow_semibold_20();
 800c864:	f002 fc50 	bl	800f108 <Barlow_semibold_20>
					Gpu_CoCmd_Text(phost, 257, 170, 1, 0, "to 80%");
 800c868:	4b1f      	ldr	r3, [pc, #124]	; (800c8e8 <show_eta+0x130>)
 800c86a:	6818      	ldr	r0, [r3, #0]
 800c86c:	4b22      	ldr	r3, [pc, #136]	; (800c8f8 <show_eta+0x140>)
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	2300      	movs	r3, #0
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	2301      	movs	r3, #1
 800c876:	22aa      	movs	r2, #170	; 0xaa
 800c878:	f240 1101 	movw	r1, #257	; 0x101
 800c87c:	f001 fb2d 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800c880:	e02a      	b.n	800c8d8 <show_eta+0x120>
				} else if (charging_SoC >= 80 && charging_SoC < 100){
 800c882:	4b18      	ldr	r3, [pc, #96]	; (800c8e4 <show_eta+0x12c>)
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b4f      	cmp	r3, #79	; 0x4f
 800c888:	d926      	bls.n	800c8d8 <show_eta+0x120>
 800c88a:	4b16      	ldr	r3, [pc, #88]	; (800c8e4 <show_eta+0x12c>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	2b63      	cmp	r3, #99	; 0x63
 800c890:	d822      	bhi.n	800c8d8 <show_eta+0x120>
					Barlow_semibold_14();
 800c892:	f002 fc1b 	bl	800f0cc <Barlow_semibold_14>
					Gpu_CoCmd_Text(phost, 317, 170, 1, 0, "to full charge");
 800c896:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <show_eta+0x130>)
 800c898:	6818      	ldr	r0, [r3, #0]
 800c89a:	4b16      	ldr	r3, [pc, #88]	; (800c8f4 <show_eta+0x13c>)
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	22aa      	movs	r2, #170	; 0xaa
 800c8a6:	f240 113d 	movw	r1, #317	; 0x13d
 800c8aa:	f001 fb16 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800c8ae:	e013      	b.n	800c8d8 <show_eta+0x120>
			} else if (charging_SoC >= 100) {
 800c8b0:	4b0c      	ldr	r3, [pc, #48]	; (800c8e4 <show_eta+0x12c>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b63      	cmp	r3, #99	; 0x63
 800c8b6:	d90f      	bls.n	800c8d8 <show_eta+0x120>
				Barlow_semibold_32();
 800c8b8:	f002 fc44 	bl	800f144 <Barlow_semibold_32>
				load_color_turquoise();
 800c8bc:	f002 f902 	bl	800eac4 <load_color_turquoise>
				Gpu_CoCmd_Text(phost, 257, 140, 1, 0, "Fully Charged");
 800c8c0:	4b09      	ldr	r3, [pc, #36]	; (800c8e8 <show_eta+0x130>)
 800c8c2:	6818      	ldr	r0, [r3, #0]
 800c8c4:	4b09      	ldr	r3, [pc, #36]	; (800c8ec <show_eta+0x134>)
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	228c      	movs	r2, #140	; 0x8c
 800c8d0:	f240 1101 	movw	r1, #257	; 0x101
 800c8d4:	f001 fb01 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800c8d8:	bf00      	nop
	}
}
 800c8da:	bf00      	nop
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	200009c8 	.word	0x200009c8
 800c8e4:	20000744 	.word	0x20000744
 800c8e8:	20000bc8 	.word	0x20000bc8
 800c8ec:	0800fbcc 	.word	0x0800fbcc
 800c8f0:	20000504 	.word	0x20000504
 800c8f4:	0800fbdc 	.word	0x0800fbdc
 800c8f8:	0800fbec 	.word	0x0800fbec

0800c8fc <show_realtime>:

void show_realtime(void) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af02      	add	r7, sp, #8

	load_text_color();
 800c902:	f002 f933 	bl	800eb6c <load_text_color>

	if (headlight_status == 1 || headlight_status == 2) {
 800c906:	4b0d      	ldr	r3, [pc, #52]	; (800c93c <show_realtime+0x40>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d003      	beq.n	800c916 <show_realtime+0x1a>
 800c90e:	4b0b      	ldr	r3, [pc, #44]	; (800c93c <show_realtime+0x40>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b02      	cmp	r3, #2
 800c914:	d101      	bne.n	800c91a <show_realtime+0x1e>
		load_color_white();
 800c916:	f002 f947 	bl	800eba8 <load_color_white>
	}

	Barlow_bold_20();
 800c91a:	f002 fae7 	bl	800eeec <Barlow_bold_20>
	Gpu_CoCmd_Text(phost, 240, 11, 1, OPT_CENTERX, dash_time);
 800c91e:	4b08      	ldr	r3, [pc, #32]	; (800c940 <show_realtime+0x44>)
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	4b08      	ldr	r3, [pc, #32]	; (800c944 <show_realtime+0x48>)
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	2301      	movs	r3, #1
 800c92e:	220b      	movs	r2, #11
 800c930:	21f0      	movs	r1, #240	; 0xf0
 800c932:	f001 fad2 	bl	800deda <Gpu_CoCmd_Text>
}
 800c936:	bf00      	nop
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20000998 	.word	0x20000998
 800c940:	20000bc8 	.word	0x20000bc8
 800c944:	20000964 	.word	0x20000964

0800c948 <show_ride_profile_stats>:

void show_ride_profile_stats(void) {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af02      	add	r7, sp, #8

	load_text_color();
 800c94e:	f002 f90d 	bl	800eb6c <load_text_color>
	Barlow_semibold_32();
 800c952:	f002 fbf7 	bl	800f144 <Barlow_semibold_32>
	Gpu_CoCmd_Text(phost, 256, 187, 1, OPT_CENTERX, dash_mode_specific_avgSpeed);
 800c956:	4b32      	ldr	r3, [pc, #200]	; (800ca20 <show_ride_profile_stats+0xd8>)
 800c958:	6818      	ldr	r0, [r3, #0]
 800c95a:	4b32      	ldr	r3, [pc, #200]	; (800ca24 <show_ride_profile_stats+0xdc>)
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	2301      	movs	r3, #1
 800c966:	22bb      	movs	r2, #187	; 0xbb
 800c968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c96c:	f001 fab5 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_137();
 800c970:	f002 f96c 	bl	800ec4c <load_color_lightMode_grey_137>
	Barlow_bold_12();
 800c974:	f002 fa7e 	bl	800ee74 <Barlow_bold_12>
	Gpu_CoCmd_Text(phost, 256, 225, 1, OPT_CENTERX, "AVG SPEED");
 800c978:	4b29      	ldr	r3, [pc, #164]	; (800ca20 <show_ride_profile_stats+0xd8>)
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	4b2a      	ldr	r3, [pc, #168]	; (800ca28 <show_ride_profile_stats+0xe0>)
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	2301      	movs	r3, #1
 800c988:	22e1      	movs	r2, #225	; 0xe1
 800c98a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c98e:	f001 faa4 	bl	800deda <Gpu_CoCmd_Text>

	load_text_color();
 800c992:	f002 f8eb 	bl	800eb6c <load_text_color>
	Barlow_semibold_32();
 800c996:	f002 fbd5 	bl	800f144 <Barlow_semibold_32>
	Gpu_CoCmd_Text(phost, 332, 187, 1, OPT_CENTERX, dash_mode_specific_maxSpeed);
 800c99a:	4b21      	ldr	r3, [pc, #132]	; (800ca20 <show_ride_profile_stats+0xd8>)
 800c99c:	6818      	ldr	r0, [r3, #0]
 800c99e:	4b23      	ldr	r3, [pc, #140]	; (800ca2c <show_ride_profile_stats+0xe4>)
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	22bb      	movs	r2, #187	; 0xbb
 800c9ac:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c9b0:	f001 fa93 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_137();
 800c9b4:	f002 f94a 	bl	800ec4c <load_color_lightMode_grey_137>
	Barlow_bold_12();
 800c9b8:	f002 fa5c 	bl	800ee74 <Barlow_bold_12>
	Gpu_CoCmd_Text(phost, 332, 225, 1, OPT_CENTERX, "MAX SPEED");
 800c9bc:	4b18      	ldr	r3, [pc, #96]	; (800ca20 <show_ride_profile_stats+0xd8>)
 800c9be:	6818      	ldr	r0, [r3, #0]
 800c9c0:	4b1b      	ldr	r3, [pc, #108]	; (800ca30 <show_ride_profile_stats+0xe8>)
 800c9c2:	9301      	str	r3, [sp, #4]
 800c9c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	22e1      	movs	r2, #225	; 0xe1
 800c9ce:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c9d2:	f001 fa82 	bl	800deda <Gpu_CoCmd_Text>

	load_text_color();
 800c9d6:	f002 f8c9 	bl	800eb6c <load_text_color>
	Barlow_semibold_32();
 800c9da:	f002 fbb3 	bl	800f144 <Barlow_semibold_32>
	Gpu_CoCmd_Text(phost, 415, 187, 1, OPT_CENTERX, dash_mode_specific_avgWhperKM);
 800c9de:	4b10      	ldr	r3, [pc, #64]	; (800ca20 <show_ride_profile_stats+0xd8>)
 800c9e0:	6818      	ldr	r0, [r3, #0]
 800c9e2:	4b14      	ldr	r3, [pc, #80]	; (800ca34 <show_ride_profile_stats+0xec>)
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	22bb      	movs	r2, #187	; 0xbb
 800c9f0:	f240 119f 	movw	r1, #415	; 0x19f
 800c9f4:	f001 fa71 	bl	800deda <Gpu_CoCmd_Text>

	load_color_lightMode_grey_137();
 800c9f8:	f002 f928 	bl	800ec4c <load_color_lightMode_grey_137>
	Barlow_bold_12();
 800c9fc:	f002 fa3a 	bl	800ee74 <Barlow_bold_12>
	Gpu_CoCmd_Text(phost, 415, 225, 1, OPT_CENTERX, "AVG WH/KM");
 800ca00:	4b07      	ldr	r3, [pc, #28]	; (800ca20 <show_ride_profile_stats+0xd8>)
 800ca02:	6818      	ldr	r0, [r3, #0]
 800ca04:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <show_ride_profile_stats+0xf0>)
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	2301      	movs	r3, #1
 800ca10:	22e1      	movs	r2, #225	; 0xe1
 800ca12:	f240 119f 	movw	r1, #415	; 0x19f
 800ca16:	f001 fa60 	bl	800deda <Gpu_CoCmd_Text>
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20000bc8 	.word	0x20000bc8
 800ca24:	20000978 	.word	0x20000978
 800ca28:	0800fbf4 	.word	0x0800fbf4
 800ca2c:	20000820 	.word	0x20000820
 800ca30:	0800fc00 	.word	0x0800fc00
 800ca34:	20000550 	.word	0x20000550
 800ca38:	0800fc0c 	.word	0x0800fc0c

0800ca3c <show_stats_odo>:

void show_stats_odo(void) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af02      	add	r7, sp, #8

	load_color_turquoise();
 800ca42:	f002 f83f 	bl	800eac4 <load_color_turquoise>
	Barlow_extrabold_24();
 800ca46:	f002 faab 	bl	800efa0 <Barlow_extrabold_24>

	switch (drive_mode_stat) {
 800ca4a:	4b31      	ldr	r3, [pc, #196]	; (800cb10 <show_stats_odo+0xd4>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d83e      	bhi.n	800cad0 <show_stats_odo+0x94>
 800ca52:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <show_stats_odo+0x1c>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800ca69 	.word	0x0800ca69
 800ca5c:	0800ca83 	.word	0x0800ca83
 800ca60:	0800ca9d 	.word	0x0800ca9d
 800ca64:	0800cab7 	.word	0x0800cab7

		case 0:
			Gpu_CoCmd_Text(phost, 108, 188, 1, OPT_CENTERX, "OVERALL");
 800ca68:	4b2a      	ldr	r3, [pc, #168]	; (800cb14 <show_stats_odo+0xd8>)
 800ca6a:	6818      	ldr	r0, [r3, #0]
 800ca6c:	4b2a      	ldr	r3, [pc, #168]	; (800cb18 <show_stats_odo+0xdc>)
 800ca6e:	9301      	str	r3, [sp, #4]
 800ca70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	2301      	movs	r3, #1
 800ca78:	22bc      	movs	r2, #188	; 0xbc
 800ca7a:	216c      	movs	r1, #108	; 0x6c
 800ca7c:	f001 fa2d 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800ca80:	e026      	b.n	800cad0 <show_stats_odo+0x94>

		case 1:
			Gpu_CoCmd_Text(phost, 108, 188, 1, OPT_CENTERX, "SUSTE");
 800ca82:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <show_stats_odo+0xd8>)
 800ca84:	6818      	ldr	r0, [r3, #0]
 800ca86:	4b25      	ldr	r3, [pc, #148]	; (800cb1c <show_stats_odo+0xe0>)
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	2301      	movs	r3, #1
 800ca92:	22bc      	movs	r2, #188	; 0xbc
 800ca94:	216c      	movs	r1, #108	; 0x6c
 800ca96:	f001 fa20 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800ca9a:	e019      	b.n	800cad0 <show_stats_odo+0x94>

		case 2:
			Gpu_CoCmd_Text(phost, 108, 188, 1, OPT_CENTERX, "THIKKA");
 800ca9c:	4b1d      	ldr	r3, [pc, #116]	; (800cb14 <show_stats_odo+0xd8>)
 800ca9e:	6818      	ldr	r0, [r3, #0]
 800caa0:	4b1f      	ldr	r3, [pc, #124]	; (800cb20 <show_stats_odo+0xe4>)
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	2301      	movs	r3, #1
 800caac:	22bc      	movs	r2, #188	; 0xbc
 800caae:	216c      	movs	r1, #108	; 0x6c
 800cab0:	f001 fa13 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800cab4:	e00c      	b.n	800cad0 <show_stats_odo+0x94>

		case 3:
			Gpu_CoCmd_Text(phost, 108, 188, 1, OPT_CENTERX, "BABBAL");
 800cab6:	4b17      	ldr	r3, [pc, #92]	; (800cb14 <show_stats_odo+0xd8>)
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <show_stats_odo+0xe8>)
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	2301      	movs	r3, #1
 800cac6:	22bc      	movs	r2, #188	; 0xbc
 800cac8:	216c      	movs	r1, #108	; 0x6c
 800caca:	f001 fa06 	bl	800deda <Gpu_CoCmd_Text>
			break;
 800cace:	bf00      	nop
	}

	Barlow_bold_18();
 800cad0:	f002 f9ee 	bl	800eeb0 <Barlow_bold_18>
	load_color_lightMode_grey_137();
 800cad4:	f002 f8ba 	bl	800ec4c <load_color_lightMode_grey_137>
	Gpu_CoCmd_Text(phost, 59, 221, 1, 0, "ODO");
 800cad8:	4b0e      	ldr	r3, [pc, #56]	; (800cb14 <show_stats_odo+0xd8>)
 800cada:	6818      	ldr	r0, [r3, #0]
 800cadc:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <show_stats_odo+0xec>)
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	2300      	movs	r3, #0
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	2301      	movs	r3, #1
 800cae6:	22dd      	movs	r2, #221	; 0xdd
 800cae8:	213b      	movs	r1, #59	; 0x3b
 800caea:	f001 f9f6 	bl	800deda <Gpu_CoCmd_Text>

	load_text_color();
 800caee:	f002 f83d 	bl	800eb6c <load_text_color>
	Gpu_CoCmd_Text(phost, 99, 221, 1, 0, dash_mode_specific_odo);
 800caf2:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <show_stats_odo+0xd8>)
 800caf4:	6818      	ldr	r0, [r3, #0]
 800caf6:	4b0d      	ldr	r3, [pc, #52]	; (800cb2c <show_stats_odo+0xf0>)
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	2300      	movs	r3, #0
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	2301      	movs	r3, #1
 800cb00:	22dd      	movs	r2, #221	; 0xdd
 800cb02:	2163      	movs	r1, #99	; 0x63
 800cb04:	f001 f9e9 	bl	800deda <Gpu_CoCmd_Text>
}
 800cb08:	bf00      	nop
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	2000076c 	.word	0x2000076c
 800cb14:	20000bc8 	.word	0x20000bc8
 800cb18:	0800fc18 	.word	0x0800fc18
 800cb1c:	0800fb78 	.word	0x0800fb78
 800cb20:	0800fb80 	.word	0x0800fb80
 800cb24:	0800fb88 	.word	0x0800fb88
 800cb28:	0800fb98 	.word	0x0800fb98
 800cb2c:	20000850 	.word	0x20000850

0800cb30 <show_odo_graph>:

void show_odo_graph(void) {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0

	calculate_range_for_barGraph();
 800cb36:	f7fe fa1d 	bl	800af74 <calculate_range_for_barGraph>
	calculate_coordinateY_for_weekly_data();
 800cb3a:	f7fe fae3 	bl	800b104 <calculate_coordinateY_for_weekly_data>

	switch (ui_mode) {
 800cb3e:	4b39      	ldr	r3, [pc, #228]	; (800cc24 <show_odo_graph+0xf4>)
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d002      	beq.n	800cb4c <show_odo_graph+0x1c>
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d003      	beq.n	800cb52 <show_odo_graph+0x22>
 800cb4a:	e005      	b.n	800cb58 <show_odo_graph+0x28>

		case LIGHT_MODE:
			load_color_lightMode_grey_196();
 800cb4c:	f002 f88c 	bl	800ec68 <load_color_lightMode_grey_196>
			break;
 800cb50:	e002      	b.n	800cb58 <show_odo_graph+0x28>

		case DARK_MODE:
			load_color_white();
 800cb52:	f002 f829 	bl	800eba8 <load_color_white>
			break;
 800cb56:	bf00      	nop
	}

	App_WrCoCmd_Buffer(phost, BEGIN(LINES));
 800cb58:	4b33      	ldr	r3, [pc, #204]	; (800cc28 <show_odo_graph+0xf8>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4933      	ldr	r1, [pc, #204]	; (800cc2c <show_odo_graph+0xfc>)
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f001 f854 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(243, 161, 0, 0));
 800cb64:	4b30      	ldr	r3, [pc, #192]	; (800cc28 <show_odo_graph+0xf8>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4931      	ldr	r1, [pc, #196]	; (800cc30 <show_odo_graph+0x100>)
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f001 f84e 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(448, 162, 0, 0));
 800cb70:	4b2d      	ldr	r3, [pc, #180]	; (800cc28 <show_odo_graph+0xf8>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	492f      	ldr	r1, [pc, #188]	; (800cc34 <show_odo_graph+0x104>)
 800cb76:	4618      	mov	r0, r3
 800cb78:	f001 f848 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800cb7c:	4b2a      	ldr	r3, [pc, #168]	; (800cc28 <show_odo_graph+0xf8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800cb84:	4618      	mov	r0, r3
 800cb86:	f001 f841 	bl	800dc0c <App_WrCoCmd_Buffer>

	show_days_in_graph(present_day);
 800cb8a:	4b2b      	ldr	r3, [pc, #172]	; (800cc38 <show_odo_graph+0x108>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 f85c 	bl	800cc4c <show_days_in_graph>

	load_color_turquoise();
 800cb94:	f001 ff96 	bl	800eac4 <load_color_turquoise>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800cb98:	4b23      	ldr	r3, [pc, #140]	; (800cc28 <show_odo_graph+0xf8>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4927      	ldr	r1, [pc, #156]	; (800cc3c <show_odo_graph+0x10c>)
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 f834 	bl	800dc0c <App_WrCoCmd_Buffer>

	for (int i = 0; i < 7; i++) {
 800cba4:	2300      	movs	r3, #0
 800cba6:	607b      	str	r3, [r7, #4]
 800cba8:	e02d      	b.n	800cc06 <show_odo_graph+0xd6>

		App_WrCoCmd_Buffer(phost, VERTEX2II((263 + 28 * i) + 8, 157, 0, 0));
 800cbaa:	4b1f      	ldr	r3, [pc, #124]	; (800cc28 <show_odo_graph+0xf8>)
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	1a9b      	subs	r3, r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	f203 130f 	addw	r3, r3, #271	; 0x10f
 800cbbc:	055a      	lsls	r2, r3, #21
 800cbbe:	4b20      	ldr	r3, [pc, #128]	; (800cc40 <show_odo_graph+0x110>)
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbc6:	f443 231d 	orr.w	r3, r3, #643072	; 0x9d000
 800cbca:	4619      	mov	r1, r3
 800cbcc:	f001 f81e 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II((263 + 28 * i) - 8, coordinateY[i], 0, 0));
 800cbd0:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <show_odo_graph+0xf8>)
 800cbd2:	6818      	ldr	r0, [r3, #0]
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	33ff      	adds	r3, #255	; 0xff
 800cbe0:	055b      	lsls	r3, r3, #21
 800cbe2:	4a17      	ldr	r2, [pc, #92]	; (800cc40 <show_odo_graph+0x110>)
 800cbe4:	401a      	ands	r2, r3
 800cbe6:	4917      	ldr	r1, [pc, #92]	; (800cc44 <show_odo_graph+0x114>)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cbee:	0319      	lsls	r1, r3, #12
 800cbf0:	4b15      	ldr	r3, [pc, #84]	; (800cc48 <show_odo_graph+0x118>)
 800cbf2:	400b      	ands	r3, r1
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f001 f806 	bl	800dc0c <App_WrCoCmd_Buffer>
	for (int i = 0; i < 7; i++) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3301      	adds	r3, #1
 800cc04:	607b      	str	r3, [r7, #4]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2b06      	cmp	r3, #6
 800cc0a:	ddce      	ble.n	800cbaa <show_odo_graph+0x7a>
	}

	App_WrCoCmd_Buffer(phost, END());
 800cc0c:	4b06      	ldr	r3, [pc, #24]	; (800cc28 <show_odo_graph+0xf8>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 fff9 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800cc1a:	bf00      	nop
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200009a4 	.word	0x200009a4
 800cc28:	20000bc8 	.word	0x20000bc8
 800cc2c:	1f000003 	.word	0x1f000003
 800cc30:	9e6a1000 	.word	0x9e6a1000
 800cc34:	b80a2000 	.word	0xb80a2000
 800cc38:	200003ac 	.word	0x200003ac
 800cc3c:	1f000009 	.word	0x1f000009
 800cc40:	3fe00000 	.word	0x3fe00000
 800cc44:	200004f4 	.word	0x200004f4
 800cc48:	001ff000 	.word	0x001ff000

0800cc4c <show_days_in_graph>:

void show_days_in_graph(int present_day) {
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af02      	add	r7, sp, #8
 800cc52:	6078      	str	r0, [r7, #4]

	switch (ui_mode) {
 800cc54:	4b30      	ldr	r3, [pc, #192]	; (800cd18 <show_days_in_graph+0xcc>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <show_days_in_graph+0x16>
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d003      	beq.n	800cc68 <show_days_in_graph+0x1c>
 800cc60:	e005      	b.n	800cc6e <show_days_in_graph+0x22>

		case LIGHT_MODE:

			load_color_lightMode_grey_137();
 800cc62:	f001 fff3 	bl	800ec4c <load_color_lightMode_grey_137>
			break;
 800cc66:	e002      	b.n	800cc6e <show_days_in_graph+0x22>

		case DARK_MODE:
			load_color_white();
 800cc68:	f001 ff9e 	bl	800eba8 <load_color_white>
			break;
 800cc6c:	bf00      	nop
	}

	Barlow_medium_10();
 800cc6e:	f002 f9f1 	bl	800f054 <Barlow_medium_10>

	for (int i = 0; i < 7; i++) {
 800cc72:	2300      	movs	r3, #0
 800cc74:	60fb      	str	r3, [r7, #12]
 800cc76:	e047      	b.n	800cd08 <show_days_in_graph+0xbc>

		if (present_day >= 0) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	db1e      	blt.n	800ccbc <show_days_in_graph+0x70>

			Gpu_CoCmd_Text(phost, (263 + 28 * (6 - i)), 165, 1, OPT_CENTERX, seven_days_of_a_week[present_day]);
 800cc7e:	4b27      	ldr	r3, [pc, #156]	; (800cd1c <show_days_in_graph+0xd0>)
 800cc80:	6818      	ldr	r0, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f1c3 0306 	rsb	r3, r3, #6
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	00d2      	lsls	r2, r2, #3
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	f203 1307 	addw	r3, r3, #263	; 0x107
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	b219      	sxth	r1, r3
 800cc9c:	4a20      	ldr	r2, [pc, #128]	; (800cd20 <show_days_in_graph+0xd4>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	2301      	movs	r3, #1
 800ccae:	22a5      	movs	r2, #165	; 0xa5
 800ccb0:	f001 f913 	bl	800deda <Gpu_CoCmd_Text>
			present_day -= 1;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	607b      	str	r3, [r7, #4]
 800ccba:	e022      	b.n	800cd02 <show_days_in_graph+0xb6>

		} else if (present_day < 0) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	da1f      	bge.n	800cd02 <show_days_in_graph+0xb6>

			present_day = 6;
 800ccc2:	2306      	movs	r3, #6
 800ccc4:	607b      	str	r3, [r7, #4]
			Gpu_CoCmd_Text(phost, (263 + 28 * (6 - i)), 165, 1, OPT_CENTERX, seven_days_of_a_week[present_day]);
 800ccc6:	4b15      	ldr	r3, [pc, #84]	; (800cd1c <show_days_in_graph+0xd0>)
 800ccc8:	6818      	ldr	r0, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f1c3 0306 	rsb	r3, r3, #6
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	00d2      	lsls	r2, r2, #3
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	f203 1307 	addw	r3, r3, #263	; 0x107
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	b219      	sxth	r1, r3
 800cce4:	4a0e      	ldr	r2, [pc, #56]	; (800cd20 <show_days_in_graph+0xd4>)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	22a5      	movs	r2, #165	; 0xa5
 800ccf8:	f001 f8ef 	bl	800deda <Gpu_CoCmd_Text>
			present_day -= 1;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 7; i++) {
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3301      	adds	r3, #1
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b06      	cmp	r3, #6
 800cd0c:	ddb4      	ble.n	800cc78 <show_days_in_graph+0x2c>

		}
	}
}
 800cd0e:	bf00      	nop
 800cd10:	bf00      	nop
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	200009a4 	.word	0x200009a4
 800cd1c:	20000bc8 	.word	0x20000bc8
 800cd20:	2000009c 	.word	0x2000009c

0800cd24 <show_small_yatri_logo>:

void show_small_yatri_logo(void) {
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af04      	add	r7, sp, #16

	load_color_white();
 800cd2a:	f001 ff3d 	bl	800eba8 <load_color_white>
	Load_ImageASTC(&host, 1089024, COMPRESSED_RGBA_ASTC_5x5_KHR, 80, 20, 202, 225);
 800cd2e:	23e1      	movs	r3, #225	; 0xe1
 800cd30:	9302      	str	r3, [sp, #8]
 800cd32:	23ca      	movs	r3, #202	; 0xca
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	2314      	movs	r3, #20
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	2350      	movs	r3, #80	; 0x50
 800cd3c:	f249 32b2 	movw	r2, #37810	; 0x93b2
 800cd40:	4903      	ldr	r1, [pc, #12]	; (800cd50 <show_small_yatri_logo+0x2c>)
 800cd42:	4804      	ldr	r0, [pc, #16]	; (800cd54 <show_small_yatri_logo+0x30>)
 800cd44:	f002 fae6 	bl	800f314 <Load_ImageASTC>
}
 800cd48:	bf00      	nop
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	00109e00 	.word	0x00109e00
 800cd54:	20000ae0 	.word	0x20000ae0

0800cd58 <add_transparent_film>:

void add_transparent_film(void) {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_A(210));
 800cd5c:	4b17      	ldr	r3, [pc, #92]	; (800cdbc <add_transparent_film+0x64>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4917      	ldr	r1, [pc, #92]	; (800cdc0 <add_transparent_film+0x68>)
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 ff52 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, popup_color[4]);
 800cd68:	4b14      	ldr	r3, [pc, #80]	; (800cdbc <add_transparent_film+0x64>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a15      	ldr	r2, [pc, #84]	; (800cdc4 <add_transparent_film+0x6c>)
 800cd6e:	6912      	ldr	r2, [r2, #16]
 800cd70:	4611      	mov	r1, r2
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 ff4a 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, COLOR_RGB(popup_color[4][0], popup_color[4][1], popup_color[4][2]));

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800cd78:	4b10      	ldr	r3, [pc, #64]	; (800cdbc <add_transparent_film+0x64>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4912      	ldr	r1, [pc, #72]	; (800cdc8 <add_transparent_film+0x70>)
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 ff44 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(200));
 800cd84:	4b0d      	ldr	r3, [pc, #52]	; (800cdbc <add_transparent_film+0x64>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4910      	ldr	r1, [pc, #64]	; (800cdcc <add_transparent_film+0x74>)
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 ff3e 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(13, 13, 0, 0));
 800cd90:	4b0a      	ldr	r3, [pc, #40]	; (800cdbc <add_transparent_film+0x64>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	490e      	ldr	r1, [pc, #56]	; (800cdd0 <add_transparent_film+0x78>)
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 ff38 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(467, 259, 0, 0));
 800cd9c:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <add_transparent_film+0x64>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	490c      	ldr	r1, [pc, #48]	; (800cdd4 <add_transparent_film+0x7c>)
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 ff32 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800cda8:	4b04      	ldr	r3, [pc, #16]	; (800cdbc <add_transparent_film+0x64>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 ff2b 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800cdb6:	bf00      	nop
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000bc8 	.word	0x20000bc8
 800cdc0:	100000d2 	.word	0x100000d2
 800cdc4:	20000c6c 	.word	0x20000c6c
 800cdc8:	1f000009 	.word	0x1f000009
 800cdcc:	0e0000c8 	.word	0x0e0000c8
 800cdd0:	81a0d000 	.word	0x81a0d000
 800cdd4:	ba703000 	.word	0xba703000

0800cdd8 <popup_test>:

void popup_test(void) {
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_A(255));
 800cddc:	4b15      	ldr	r3, [pc, #84]	; (800ce34 <popup_test+0x5c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4915      	ldr	r1, [pc, #84]	; (800ce38 <popup_test+0x60>)
 800cde2:	4618      	mov	r0, r3
 800cde4:	f000 ff12 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, popup_color[0]);
 800cde8:	4b12      	ldr	r3, [pc, #72]	; (800ce34 <popup_test+0x5c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a13      	ldr	r2, [pc, #76]	; (800ce3c <popup_test+0x64>)
 800cdee:	6812      	ldr	r2, [r2, #0]
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 ff0a 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, COLOR_RGB(popup_color[0][0], popup_color[0][1], popup_color[0][2]));
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800cdf8:	4b0e      	ldr	r3, [pc, #56]	; (800ce34 <popup_test+0x5c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4910      	ldr	r1, [pc, #64]	; (800ce40 <popup_test+0x68>)
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 ff04 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(112, 70, 0, 0));
 800ce04:	4b0b      	ldr	r3, [pc, #44]	; (800ce34 <popup_test+0x5c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	490e      	ldr	r1, [pc, #56]	; (800ce44 <popup_test+0x6c>)
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fefe 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(367, 200, 0, 0));
 800ce10:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <popup_test+0x5c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	490c      	ldr	r1, [pc, #48]	; (800ce48 <popup_test+0x70>)
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 fef8 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800ce1c:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <popup_test+0x5c>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fef1 	bl	800dc0c <App_WrCoCmd_Buffer>

	ota_info_here();
 800ce2a:	f000 f80f 	bl	800ce4c <ota_info_here>
}
 800ce2e:	bf00      	nop
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20000bc8 	.word	0x20000bc8
 800ce38:	100000ff 	.word	0x100000ff
 800ce3c:	20000c6c 	.word	0x20000c6c
 800ce40:	1f000009 	.word	0x1f000009
 800ce44:	8e046000 	.word	0x8e046000
 800ce48:	adec8000 	.word	0xadec8000

0800ce4c <ota_info_here>:

void ota_info_here(void) {
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af02      	add	r7, sp, #8
	App_WrCoCmd_Buffer(phost, popup_color[1]);
 800ce52:	4b32      	ldr	r3, [pc, #200]	; (800cf1c <ota_info_here+0xd0>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a32      	ldr	r2, [pc, #200]	; (800cf20 <ota_info_here+0xd4>)
 800ce58:	6852      	ldr	r2, [r2, #4]
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f000 fed5 	bl	800dc0c <App_WrCoCmd_Buffer>
	Barlow_bold_18();
 800ce62:	f002 f825 	bl	800eeb0 <Barlow_bold_18>
	Gpu_CoCmd_Text(phost, 240, 84, 1, OPT_CENTERX | OPT_CENTERY | OPT_CENTER, "New Update Available!");
 800ce66:	4b2d      	ldr	r3, [pc, #180]	; (800cf1c <ota_info_here+0xd0>)
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	4b2e      	ldr	r3, [pc, #184]	; (800cf24 <ota_info_here+0xd8>)
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	2301      	movs	r3, #1
 800ce76:	2254      	movs	r2, #84	; 0x54
 800ce78:	21f0      	movs	r1, #240	; 0xf0
 800ce7a:	f001 f82e 	bl	800deda <Gpu_CoCmd_Text>

	App_WrCoCmd_Buffer(phost, popup_color[3]);
 800ce7e:	4b27      	ldr	r3, [pc, #156]	; (800cf1c <ota_info_here+0xd0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a27      	ldr	r2, [pc, #156]	; (800cf20 <ota_info_here+0xd4>)
 800ce84:	68d2      	ldr	r2, [r2, #12]
 800ce86:	4611      	mov	r1, r2
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 febf 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, popup_color[3][0], popup_color[3][1], popup_color[3][2]));

	App_WrCoCmd_Buffer(phost, BEGIN(LINES));
 800ce8e:	4b23      	ldr	r3, [pc, #140]	; (800cf1c <ota_info_here+0xd0>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4925      	ldr	r1, [pc, #148]	; (800cf28 <ota_info_here+0xdc>)
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 feb9 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(10));
 800ce9a:	4b20      	ldr	r3, [pc, #128]	; (800cf1c <ota_info_here+0xd0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4923      	ldr	r1, [pc, #140]	; (800cf2c <ota_info_here+0xe0>)
 800cea0:	4618      	mov	r0, r3
 800cea2:	f000 feb3 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(111, 97, 0, 0));
 800cea6:	4b1d      	ldr	r3, [pc, #116]	; (800cf1c <ota_info_here+0xd0>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4921      	ldr	r1, [pc, #132]	; (800cf30 <ota_info_here+0xe4>)
 800ceac:	4618      	mov	r0, r3
 800ceae:	f000 fead 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(370, 97, 0, 0));
 800ceb2:	4b1a      	ldr	r3, [pc, #104]	; (800cf1c <ota_info_here+0xd0>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	491f      	ldr	r1, [pc, #124]	; (800cf34 <ota_info_here+0xe8>)
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 fea7 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800cebe:	4b17      	ldr	r3, [pc, #92]	; (800cf1c <ota_info_here+0xd0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 fea0 	bl	800dc0c <App_WrCoCmd_Buffer>

	load_color_white();
 800cecc:	f001 fe6c 	bl	800eba8 <load_color_white>
	App_WrCoCmd_Buffer(phost, popup_color[2]);
 800ced0:	4b12      	ldr	r3, [pc, #72]	; (800cf1c <ota_info_here+0xd0>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a12      	ldr	r2, [pc, #72]	; (800cf20 <ota_info_here+0xd4>)
 800ced6:	6892      	ldr	r2, [r2, #8]
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 fe96 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, COLOR_RGB(popup_color[2][0], popup_color[2][1], popup_color[2][2]));
	Barlow_bold_18();
 800cee0:	f001 ffe6 	bl	800eeb0 <Barlow_bold_18>
	Gpu_CoCmd_Text(phost, 125, 115, 1, 0, "Firmware v2.0.1");
 800cee4:	4b0d      	ldr	r3, [pc, #52]	; (800cf1c <ota_info_here+0xd0>)
 800cee6:	6818      	ldr	r0, [r3, #0]
 800cee8:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <ota_info_here+0xec>)
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	2300      	movs	r3, #0
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	2301      	movs	r3, #1
 800cef2:	2273      	movs	r2, #115	; 0x73
 800cef4:	217d      	movs	r1, #125	; 0x7d
 800cef6:	f000 fff0 	bl	800deda <Gpu_CoCmd_Text>

	Barlow_semibold_14();
 800cefa:	f002 f8e7 	bl	800f0cc <Barlow_semibold_14>
	Gpu_CoCmd_Text(phost, 125, 140, 1, 0, dash_release_notes);
 800cefe:	4b07      	ldr	r3, [pc, #28]	; (800cf1c <ota_info_here+0xd0>)
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	4b0e      	ldr	r3, [pc, #56]	; (800cf3c <ota_info_here+0xf0>)
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	2300      	movs	r3, #0
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	228c      	movs	r2, #140	; 0x8c
 800cf0e:	217d      	movs	r1, #125	; 0x7d
 800cf10:	f000 ffe3 	bl	800deda <Gpu_CoCmd_Text>
}
 800cf14:	bf00      	nop
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20000bc8 	.word	0x20000bc8
 800cf20:	20000c6c 	.word	0x20000c6c
 800cf24:	0800fc20 	.word	0x0800fc20
 800cf28:	1f000003 	.word	0x1f000003
 800cf2c:	0e00000a 	.word	0x0e00000a
 800cf30:	8de61000 	.word	0x8de61000
 800cf34:	ae461000 	.word	0xae461000
 800cf38:	0800fc38 	.word	0x0800fc38
 800cf3c:	20000640 	.word	0x20000640

0800cf40 <add_background_wallpaper>:

void add_background_wallpaper(void) {
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
	set_background_color_wallpaper();
 800cf44:	f001 fe3e 	bl	800ebc4 <set_background_color_wallpaper>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800cf48:	4b10      	ldr	r3, [pc, #64]	; (800cf8c <add_background_wallpaper+0x4c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4910      	ldr	r1, [pc, #64]	; (800cf90 <add_background_wallpaper+0x50>)
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 fe5c 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(200));
 800cf54:	4b0d      	ldr	r3, [pc, #52]	; (800cf8c <add_background_wallpaper+0x4c>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	490e      	ldr	r1, [pc, #56]	; (800cf94 <add_background_wallpaper+0x54>)
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 fe56 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(13, 13, 0, 0));
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <add_background_wallpaper+0x4c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	490c      	ldr	r1, [pc, #48]	; (800cf98 <add_background_wallpaper+0x58>)
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fe50 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(467, 259, 0, 0));
 800cf6c:	4b07      	ldr	r3, [pc, #28]	; (800cf8c <add_background_wallpaper+0x4c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	490a      	ldr	r1, [pc, #40]	; (800cf9c <add_background_wallpaper+0x5c>)
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 fe4a 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800cf78:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <add_background_wallpaper+0x4c>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 fe43 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800cf86:	bf00      	nop
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000bc8 	.word	0x20000bc8
 800cf90:	1f000009 	.word	0x1f000009
 800cf94:	0e0000c8 	.word	0x0e0000c8
 800cf98:	81a0d000 	.word	0x81a0d000
 800cf9c:	ba703000 	.word	0xba703000

0800cfa0 <show_network_strength>:


void show_network_strength(void) {
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0

	int x_position = 374;
 800cfa6:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800cfaa:	60fb      	str	r3, [r7, #12]
	int top_y_position = 12;
 800cfac:	230c      	movs	r3, #12
 800cfae:	60bb      	str	r3, [r7, #8]
	int base_y_position = 26;
 800cfb0:	231a      	movs	r3, #26
 800cfb2:	607b      	str	r3, [r7, #4]

	// weak signal bar
	App_WrCoCmd_Buffer(phost, COLOR_RGB(200, 200, 200));
 800cfb4:	4b84      	ldr	r3, [pc, #528]	; (800d1c8 <show_network_strength+0x228>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4984      	ldr	r1, [pc, #528]	; (800d1cc <show_network_strength+0x22c>)
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f000 fe26 	bl	800dc0c <App_WrCoCmd_Buffer>

	if (network_strength_value == STRONG || network_strength_value == MEDIUM || network_strength_value == WEAK){
 800cfc0:	4b83      	ldr	r3, [pc, #524]	; (800d1d0 <show_network_strength+0x230>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b03      	cmp	r3, #3
 800cfc6:	d007      	beq.n	800cfd8 <show_network_strength+0x38>
 800cfc8:	4b81      	ldr	r3, [pc, #516]	; (800d1d0 <show_network_strength+0x230>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d003      	beq.n	800cfd8 <show_network_strength+0x38>
 800cfd0:	4b7f      	ldr	r3, [pc, #508]	; (800d1d0 <show_network_strength+0x230>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d101      	bne.n	800cfdc <show_network_strength+0x3c>
		load_color_sap_green();
 800cfd8:	f001 fdac 	bl	800eb34 <load_color_sap_green>
	}

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800cfdc:	4b7a      	ldr	r3, [pc, #488]	; (800d1c8 <show_network_strength+0x228>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	497c      	ldr	r1, [pc, #496]	; (800d1d4 <show_network_strength+0x234>)
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fe12 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(32));
 800cfe8:	4b77      	ldr	r3, [pc, #476]	; (800d1c8 <show_network_strength+0x228>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	497a      	ldr	r1, [pc, #488]	; (800d1d8 <show_network_strength+0x238>)
 800cfee:	4618      	mov	r0, r3
 800cff0:	f000 fe0c 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(x_position - 12, top_y_position + 12, 0, 0));
 800cff4:	4b74      	ldr	r3, [pc, #464]	; (800d1c8 <show_network_strength+0x228>)
 800cff6:	6818      	ldr	r0, [r3, #0]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	3b0c      	subs	r3, #12
 800cffc:	055b      	lsls	r3, r3, #21
 800cffe:	4a77      	ldr	r2, [pc, #476]	; (800d1dc <show_network_strength+0x23c>)
 800d000:	401a      	ands	r2, r3
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	330c      	adds	r3, #12
 800d006:	0319      	lsls	r1, r3, #12
 800d008:	4b75      	ldr	r3, [pc, #468]	; (800d1e0 <show_network_strength+0x240>)
 800d00a:	400b      	ands	r3, r1
 800d00c:	4313      	orrs	r3, r2
 800d00e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d012:	4619      	mov	r1, r3
 800d014:	f000 fdfa 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(x_position - 12, base_y_position, 0, 0));
 800d018:	4b6b      	ldr	r3, [pc, #428]	; (800d1c8 <show_network_strength+0x228>)
 800d01a:	6818      	ldr	r0, [r3, #0]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3b0c      	subs	r3, #12
 800d020:	055b      	lsls	r3, r3, #21
 800d022:	4a6e      	ldr	r2, [pc, #440]	; (800d1dc <show_network_strength+0x23c>)
 800d024:	401a      	ands	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	0319      	lsls	r1, r3, #12
 800d02a:	4b6d      	ldr	r3, [pc, #436]	; (800d1e0 <show_network_strength+0x240>)
 800d02c:	400b      	ands	r3, r1
 800d02e:	4313      	orrs	r3, r2
 800d030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d034:	4619      	mov	r1, r3
 800d036:	f000 fde9 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800d03a:	4b63      	ldr	r3, [pc, #396]	; (800d1c8 <show_network_strength+0x228>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800d042:	4618      	mov	r0, r3
 800d044:	f000 fde2 	bl	800dc0c <App_WrCoCmd_Buffer>

	// medium signal bar
	App_WrCoCmd_Buffer(phost, COLOR_RGB(200, 200, 200));
 800d048:	4b5f      	ldr	r3, [pc, #380]	; (800d1c8 <show_network_strength+0x228>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	495f      	ldr	r1, [pc, #380]	; (800d1cc <show_network_strength+0x22c>)
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 fddc 	bl	800dc0c <App_WrCoCmd_Buffer>
	if (network_strength_value == MEDIUM || network_strength_value == STRONG){
 800d054:	4b5e      	ldr	r3, [pc, #376]	; (800d1d0 <show_network_strength+0x230>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d003      	beq.n	800d064 <show_network_strength+0xc4>
 800d05c:	4b5c      	ldr	r3, [pc, #368]	; (800d1d0 <show_network_strength+0x230>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b03      	cmp	r3, #3
 800d062:	d101      	bne.n	800d068 <show_network_strength+0xc8>
			load_color_sap_green();
 800d064:	f001 fd66 	bl	800eb34 <load_color_sap_green>
	}

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800d068:	4b57      	ldr	r3, [pc, #348]	; (800d1c8 <show_network_strength+0x228>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4959      	ldr	r1, [pc, #356]	; (800d1d4 <show_network_strength+0x234>)
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 fdcc 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(32));
	App_WrCoCmd_Buffer(phost, VERTEX2II(x_position - 6, top_y_position + 6, 0, 0));
 800d074:	4b54      	ldr	r3, [pc, #336]	; (800d1c8 <show_network_strength+0x228>)
 800d076:	6818      	ldr	r0, [r3, #0]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	3b06      	subs	r3, #6
 800d07c:	055b      	lsls	r3, r3, #21
 800d07e:	4a57      	ldr	r2, [pc, #348]	; (800d1dc <show_network_strength+0x23c>)
 800d080:	401a      	ands	r2, r3
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3306      	adds	r3, #6
 800d086:	0319      	lsls	r1, r3, #12
 800d088:	4b55      	ldr	r3, [pc, #340]	; (800d1e0 <show_network_strength+0x240>)
 800d08a:	400b      	ands	r3, r1
 800d08c:	4313      	orrs	r3, r2
 800d08e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d092:	4619      	mov	r1, r3
 800d094:	f000 fdba 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(x_position - 6, base_y_position, 0, 0));
 800d098:	4b4b      	ldr	r3, [pc, #300]	; (800d1c8 <show_network_strength+0x228>)
 800d09a:	6818      	ldr	r0, [r3, #0]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	3b06      	subs	r3, #6
 800d0a0:	055b      	lsls	r3, r3, #21
 800d0a2:	4a4e      	ldr	r2, [pc, #312]	; (800d1dc <show_network_strength+0x23c>)
 800d0a4:	401a      	ands	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	0319      	lsls	r1, r3, #12
 800d0aa:	4b4d      	ldr	r3, [pc, #308]	; (800d1e0 <show_network_strength+0x240>)
 800d0ac:	400b      	ands	r3, r1
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	f000 fda9 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800d0ba:	4b43      	ldr	r3, [pc, #268]	; (800d1c8 <show_network_strength+0x228>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f000 fda2 	bl	800dc0c <App_WrCoCmd_Buffer>

	// strong signal bar
	App_WrCoCmd_Buffer(phost, COLOR_RGB(200, 200, 200));
 800d0c8:	4b3f      	ldr	r3, [pc, #252]	; (800d1c8 <show_network_strength+0x228>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	493f      	ldr	r1, [pc, #252]	; (800d1cc <show_network_strength+0x22c>)
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 fd9c 	bl	800dc0c <App_WrCoCmd_Buffer>
	if (network_strength_value == STRONG ){
 800d0d4:	4b3e      	ldr	r3, [pc, #248]	; (800d1d0 <show_network_strength+0x230>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d101      	bne.n	800d0e0 <show_network_strength+0x140>
			load_color_sap_green();
 800d0dc:	f001 fd2a 	bl	800eb34 <load_color_sap_green>
	}

	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800d0e0:	4b39      	ldr	r3, [pc, #228]	; (800d1c8 <show_network_strength+0x228>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	493b      	ldr	r1, [pc, #236]	; (800d1d4 <show_network_strength+0x234>)
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 fd90 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, LINE_WIDTH(32));
	App_WrCoCmd_Buffer(phost, VERTEX2II(x_position, top_y_position, 0, 0));
 800d0ec:	4b36      	ldr	r3, [pc, #216]	; (800d1c8 <show_network_strength+0x228>)
 800d0ee:	6818      	ldr	r0, [r3, #0]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	055b      	lsls	r3, r3, #21
 800d0f4:	4a39      	ldr	r2, [pc, #228]	; (800d1dc <show_network_strength+0x23c>)
 800d0f6:	401a      	ands	r2, r3
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	0319      	lsls	r1, r3, #12
 800d0fc:	4b38      	ldr	r3, [pc, #224]	; (800d1e0 <show_network_strength+0x240>)
 800d0fe:	400b      	ands	r3, r1
 800d100:	4313      	orrs	r3, r2
 800d102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d106:	4619      	mov	r1, r3
 800d108:	f000 fd80 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(x_position, base_y_position, 0, 0));
 800d10c:	4b2e      	ldr	r3, [pc, #184]	; (800d1c8 <show_network_strength+0x228>)
 800d10e:	6818      	ldr	r0, [r3, #0]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	055b      	lsls	r3, r3, #21
 800d114:	4a31      	ldr	r2, [pc, #196]	; (800d1dc <show_network_strength+0x23c>)
 800d116:	401a      	ands	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	0319      	lsls	r1, r3, #12
 800d11c:	4b30      	ldr	r3, [pc, #192]	; (800d1e0 <show_network_strength+0x240>)
 800d11e:	400b      	ands	r3, r1
 800d120:	4313      	orrs	r3, r2
 800d122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d126:	4619      	mov	r1, r3
 800d128:	f000 fd70 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800d12c:	4b26      	ldr	r3, [pc, #152]	; (800d1c8 <show_network_strength+0x228>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800d134:	4618      	mov	r0, r3
 800d136:	f000 fd69 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(12));
 800d13a:	4b23      	ldr	r3, [pc, #140]	; (800d1c8 <show_network_strength+0x228>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4929      	ldr	r1, [pc, #164]	; (800d1e4 <show_network_strength+0x244>)
 800d140:	4618      	mov	r0, r3
 800d142:	f000 fd63 	bl	800dc0c <App_WrCoCmd_Buffer>

	// No signal bar
	if (network_strength_value == NO_SIGNAL){
 800d146:	4b22      	ldr	r3, [pc, #136]	; (800d1d0 <show_network_strength+0x230>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d137      	bne.n	800d1be <show_network_strength+0x21e>

		App_WrCoCmd_Buffer(phost, COLOR_RGB(50, 50, 50));
 800d14e:	4b1e      	ldr	r3, [pc, #120]	; (800d1c8 <show_network_strength+0x228>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4925      	ldr	r1, [pc, #148]	; (800d1e8 <show_network_strength+0x248>)
 800d154:	4618      	mov	r0, r3
 800d156:	f000 fd59 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(LINES));
 800d15a:	4b1b      	ldr	r3, [pc, #108]	; (800d1c8 <show_network_strength+0x228>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4923      	ldr	r1, [pc, #140]	; (800d1ec <show_network_strength+0x24c>)
 800d160:	4618      	mov	r0, r3
 800d162:	f000 fd53 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(362, 14, 0, 0));
 800d166:	4b18      	ldr	r3, [pc, #96]	; (800d1c8 <show_network_strength+0x228>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4921      	ldr	r1, [pc, #132]	; (800d1f0 <show_network_strength+0x250>)
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 fd4d 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(374, 27, 0, 0));
 800d172:	4b15      	ldr	r3, [pc, #84]	; (800d1c8 <show_network_strength+0x228>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	491f      	ldr	r1, [pc, #124]	; (800d1f4 <show_network_strength+0x254>)
 800d178:	4618      	mov	r0, r3
 800d17a:	f000 fd47 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800d17e:	4b12      	ldr	r3, [pc, #72]	; (800d1c8 <show_network_strength+0x228>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fd40 	bl	800dc0c <App_WrCoCmd_Buffer>

		App_WrCoCmd_Buffer(phost, BEGIN(LINES));
 800d18c:	4b0e      	ldr	r3, [pc, #56]	; (800d1c8 <show_network_strength+0x228>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4916      	ldr	r1, [pc, #88]	; (800d1ec <show_network_strength+0x24c>)
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fd3a 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(374, 14, 0, 0));
 800d198:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <show_network_strength+0x228>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4916      	ldr	r1, [pc, #88]	; (800d1f8 <show_network_strength+0x258>)
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f000 fd34 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, VERTEX2II(362, 27, 0, 0));
 800d1a4:	4b08      	ldr	r3, [pc, #32]	; (800d1c8 <show_network_strength+0x228>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4914      	ldr	r1, [pc, #80]	; (800d1fc <show_network_strength+0x25c>)
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fd2e 	bl	800dc0c <App_WrCoCmd_Buffer>
		App_WrCoCmd_Buffer(phost, END());
 800d1b0:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <show_network_strength+0x228>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 fd27 	bl	800dc0c <App_WrCoCmd_Buffer>
	}

}
 800d1be:	bf00      	nop
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000bc8 	.word	0x20000bc8
 800d1cc:	04c8c8c8 	.word	0x04c8c8c8
 800d1d0:	200004bc 	.word	0x200004bc
 800d1d4:	1f000009 	.word	0x1f000009
 800d1d8:	0e000020 	.word	0x0e000020
 800d1dc:	3fe00000 	.word	0x3fe00000
 800d1e0:	001ff000 	.word	0x001ff000
 800d1e4:	0e00000c 	.word	0x0e00000c
 800d1e8:	04323232 	.word	0x04323232
 800d1ec:	1f000003 	.word	0x1f000003
 800d1f0:	ad40e000 	.word	0xad40e000
 800d1f4:	aec1b000 	.word	0xaec1b000
 800d1f8:	aec0e000 	.word	0xaec0e000
 800d1fc:	ad41b000 	.word	0xad41b000

0800d200 <show_incoming_call_notification>:

void show_incoming_call_notification(void) {
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af02      	add	r7, sp, #8

	load_color_sap_green();
 800d206:	f001 fc95 	bl	800eb34 <load_color_sap_green>
	App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800d20a:	4b3b      	ldr	r3, [pc, #236]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	493b      	ldr	r1, [pc, #236]	; (800d2fc <show_incoming_call_notification+0xfc>)
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fcfb 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(390));
 800d216:	4b38      	ldr	r3, [pc, #224]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4939      	ldr	r1, [pc, #228]	; (800d300 <show_incoming_call_notification+0x100>)
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 fcf5 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(180, y_position_call_popup, 0, 0));
 800d222:	4b35      	ldr	r3, [pc, #212]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d224:	6818      	ldr	r0, [r3, #0]
 800d226:	4b37      	ldr	r3, [pc, #220]	; (800d304 <show_incoming_call_notification+0x104>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	031a      	lsls	r2, r3, #12
 800d22c:	4b36      	ldr	r3, [pc, #216]	; (800d308 <show_incoming_call_notification+0x108>)
 800d22e:	4013      	ands	r3, r2
 800d230:	f043 4316 	orr.w	r3, r3, #2516582400	; 0x96000000
 800d234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d238:	4619      	mov	r1, r3
 800d23a:	f000 fce7 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(300, y_position_call_popup, 0, 0));
 800d23e:	4b2e      	ldr	r3, [pc, #184]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d240:	6818      	ldr	r0, [r3, #0]
 800d242:	4b30      	ldr	r3, [pc, #192]	; (800d304 <show_incoming_call_notification+0x104>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	031a      	lsls	r2, r3, #12
 800d248:	4b2f      	ldr	r3, [pc, #188]	; (800d308 <show_incoming_call_notification+0x108>)
 800d24a:	4013      	ands	r3, r2
 800d24c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
 800d250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d254:	4619      	mov	r1, r3
 800d256:	f000 fcd9 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800d25a:	4b27      	ldr	r3, [pc, #156]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800d262:	4618      	mov	r0, r3
 800d264:	f000 fcd2 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, LINE_WIDTH(15));
 800d268:	4b23      	ldr	r3, [pc, #140]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4927      	ldr	r1, [pc, #156]	; (800d30c <show_incoming_call_notification+0x10c>)
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 fccc 	bl	800dc0c <App_WrCoCmd_Buffer>

	Barlow_semibold_14();
 800d274:	f001 ff2a 	bl	800f0cc <Barlow_semibold_14>
	load_color_white();
 800d278:	f001 fc96 	bl	800eba8 <load_color_white>

	if (show_blinker){
 800d27c:	4b24      	ldr	r3, [pc, #144]	; (800d310 <show_incoming_call_notification+0x110>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d01b      	beq.n	800d2bc <show_incoming_call_notification+0xbc>
		App_WrCoCmd_Buffer(phost, COLOR_A(incoming_call_transparency));
 800d284:	4b1c      	ldr	r3, [pc, #112]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	4b22      	ldr	r3, [pc, #136]	; (800d314 <show_incoming_call_notification+0x114>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d292:	4619      	mov	r1, r3
 800d294:	4610      	mov	r0, r2
 800d296:	f000 fcb9 	bl	800dc0c <App_WrCoCmd_Buffer>
		Gpu_CoCmd_Text(phost, 240, y_position_call_popup - 19, 1, OPT_CENTERX, "Incoming Call");
 800d29a:	4b17      	ldr	r3, [pc, #92]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d29c:	6818      	ldr	r0, [r3, #0]
 800d29e:	4b19      	ldr	r3, [pc, #100]	; (800d304 <show_incoming_call_notification+0x104>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	3b13      	subs	r3, #19
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	b21a      	sxth	r2, r3
 800d2aa:	4b1b      	ldr	r3, [pc, #108]	; (800d318 <show_incoming_call_notification+0x118>)
 800d2ac:	9301      	str	r3, [sp, #4]
 800d2ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2b2:	9300      	str	r3, [sp, #0]
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	21f0      	movs	r1, #240	; 0xf0
 800d2b8:	f000 fe0f 	bl	800deda <Gpu_CoCmd_Text>
	}

	App_WrCoCmd_Buffer(phost, COLOR_A(255));
 800d2bc:	4b0e      	ldr	r3, [pc, #56]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4916      	ldr	r1, [pc, #88]	; (800d31c <show_incoming_call_notification+0x11c>)
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fca2 	bl	800dc0c <App_WrCoCmd_Buffer>
	Barlow_bold_20();
 800d2c8:	f001 fe10 	bl	800eeec <Barlow_bold_20>
	load_color_black();
 800d2cc:	f001 fc16 	bl	800eafc <load_color_black>
	Gpu_CoCmd_Text(phost, 240, y_position_call_popup + 1, 1, OPT_CENTERX, "Thakur Paudel");
 800d2d0:	4b09      	ldr	r3, [pc, #36]	; (800d2f8 <show_incoming_call_notification+0xf8>)
 800d2d2:	6818      	ldr	r0, [r3, #0]
 800d2d4:	4b0b      	ldr	r3, [pc, #44]	; (800d304 <show_incoming_call_notification+0x104>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	b21a      	sxth	r2, r3
 800d2e0:	4b0f      	ldr	r3, [pc, #60]	; (800d320 <show_incoming_call_notification+0x120>)
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	21f0      	movs	r1, #240	; 0xf0
 800d2ee:	f000 fdf4 	bl	800deda <Gpu_CoCmd_Text>
//	Gpu_CoCmd_Text(phost, 240, y_position_call_popup + 1, 1, OPT_CENTERX, "Ms. Shrestha");
}
 800d2f2:	bf00      	nop
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	20000bc8 	.word	0x20000bc8
 800d2fc:	1f000009 	.word	0x1f000009
 800d300:	0e000186 	.word	0x0e000186
 800d304:	20000088 	.word	0x20000088
 800d308:	001ff000 	.word	0x001ff000
 800d30c:	0e00000f 	.word	0x0e00000f
 800d310:	20000888 	.word	0x20000888
 800d314:	2000008c 	.word	0x2000008c
 800d318:	0800fc48 	.word	0x0800fc48
 800d31c:	100000ff 	.word	0x100000ff
 800d320:	0800fc58 	.word	0x0800fc58

0800d324 <crc32_calculate>:
#include "main.h"

extern CRC_HandleTypeDef hcrc;
//#define CONSOLE_ENABLE

static uint32_t crc32_calculate(uint8_t *buffer, uint32_t len) {
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
	__HAL_CRC_DR_RESET(&hcrc);
 800d32e:	4b1f      	ldr	r3, [pc, #124]	; (800d3ac <crc32_calculate+0x88>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	689a      	ldr	r2, [r3, #8]
 800d334:	4b1d      	ldr	r3, [pc, #116]	; (800d3ac <crc32_calculate+0x88>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f042 0201 	orr.w	r2, r2, #1
 800d33c:	609a      	str	r2, [r3, #8]
	uint32_t crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*)buffer, (len/4));
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	089b      	lsrs	r3, r3, #2
 800d342:	461a      	mov	r2, r3
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	4819      	ldr	r0, [pc, #100]	; (800d3ac <crc32_calculate+0x88>)
 800d348:	f7fa f9a5 	bl	8007696 <HAL_CRC_Accumulate>
 800d34c:	6178      	str	r0, [r7, #20]
	if((len%4)>0){
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	f003 0303 	and.w	r3, r3, #3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d023      	beq.n	800d3a0 <crc32_calculate+0x7c>
		uint8_t data[4] = {0,0,0,0};
 800d358:	2300      	movs	r3, #0
 800d35a:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<(len%4);i++)
 800d35c:	2300      	movs	r3, #0
 800d35e:	613b      	str	r3, [r7, #16]
 800d360:	e010      	b.n	800d384 <crc32_calculate+0x60>
			data[i]=buffer[i+(len/4)*4];
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	f023 0203 	bic.w	r2, r3, #3
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	4413      	add	r3, r2
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	4413      	add	r3, r2
 800d370:	7819      	ldrb	r1, [r3, #0]
 800d372:	f107 020c 	add.w	r2, r7, #12
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	4413      	add	r3, r2
 800d37a:	460a      	mov	r2, r1
 800d37c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<(len%4);i++)
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	3301      	adds	r3, #1
 800d382:	613b      	str	r3, [r7, #16]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	f003 0203 	and.w	r2, r3, #3
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d8e8      	bhi.n	800d362 <crc32_calculate+0x3e>
		crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*)data, 1);
 800d390:	f107 030c 	add.w	r3, r7, #12
 800d394:	2201      	movs	r2, #1
 800d396:	4619      	mov	r1, r3
 800d398:	4804      	ldr	r0, [pc, #16]	; (800d3ac <crc32_calculate+0x88>)
 800d39a:	f7fa f97c 	bl	8007696 <HAL_CRC_Accumulate>
 800d39e:	6178      	str	r0, [r7, #20]
	}
	return crc;
 800d3a0:	697b      	ldr	r3, [r7, #20]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3718      	adds	r7, #24
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	20000b0c 	.word	0x20000b0c

0800d3b0 <getMillis>:

static uint32_t getMillis() {
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800d3b4:	f7f9 f94c 	bl	8006650 <HAL_GetTick>
 800d3b8:	4603      	mov	r3, r0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <rxSendThread>:
/**
 * Receive thread for receiving should be called in thread continuously
 * @param link 	: Link where data is to be received
 * @param data	: Data that is to be received
 */
int rxSendThread(SyncLayerCANLink *link, SyncLayerCANData *data) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b090      	sub	sp, #64	; 0x40
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
	int isSuccess = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t id;
	uint8_t bytes[8];
	if (data->track == SYNC_LAYER_CAN_START_ACK) {
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d122      	bne.n	800d41e <rxSendThread+0x5e>
		id = link->startAckID;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	62bb      	str	r3, [r7, #40]	; 0x28
		*(uint32_t*) bytes = data->id;
 800d3de:	f107 0308 	add.w	r3, r7, #8
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	601a      	str	r2, [r3, #0]
		*(uint16_t*) (&bytes[4]) = data->size;
 800d3e8:	f107 0308 	add.w	r3, r7, #8
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	8912      	ldrh	r2, [r2, #8]
 800d3f2:	801a      	strh	r2, [r3, #0]
		bytes[6] = data->numTry;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	7a9b      	ldrb	r3, [r3, #10]
 800d3f8:	73bb      	strb	r3, [r7, #14]
		if (link->canSend(id, bytes, 8)) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	f107 0108 	add.w	r1, r7, #8
 800d402:	2208      	movs	r2, #8
 800d404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d406:	4798      	blx	r3
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f000 80e5 	beq.w	800d5da <rxSendThread+0x21a>
			isSuccess = 1;
 800d410:	2301      	movs	r3, #1
 800d412:	63fb      	str	r3, [r7, #60]	; 0x3c
			data->track = SYNC_LAYER_CAN_DATA;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2202      	movs	r2, #2
 800d418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d41c:	e0dd      	b.n	800d5da <rxSendThread+0x21a>
		}
	} else if (data->track == SYNC_LAYER_CAN_END_ACK) {
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d424:	2b05      	cmp	r3, #5
 800d426:	f040 80d8 	bne.w	800d5da <rxSendThread+0x21a>
		id = link->endAckID;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	62bb      	str	r3, [r7, #40]	; 0x28
		*(uint32_t*) bytes = data->id;
 800d430:	f107 0308 	add.w	r3, r7, #8
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	6812      	ldr	r2, [r2, #0]
 800d438:	601a      	str	r2, [r3, #0]

		uint8_t missingDataAvailable = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		int missingFrameIndex = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	637b      	str	r3, [r7, #52]	; 0x34
		int totalFrame = data->size / 7 + (data->size % 7 != 0);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	891a      	ldrh	r2, [r3, #8]
 800d448:	4b79      	ldr	r3, [pc, #484]	; (800d630 <rxSendThread+0x270>)
 800d44a:	fba3 1302 	umull	r1, r3, r3, r2
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	0852      	lsrs	r2, r2, #1
 800d452:	4413      	add	r3, r2
 800d454:	089b      	lsrs	r3, r3, #2
 800d456:	b29b      	uxth	r3, r3
 800d458:	4618      	mov	r0, r3
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	891a      	ldrh	r2, [r3, #8]
 800d45e:	4b74      	ldr	r3, [pc, #464]	; (800d630 <rxSendThread+0x270>)
 800d460:	fba3 1302 	umull	r1, r3, r3, r2
 800d464:	1ad1      	subs	r1, r2, r3
 800d466:	0849      	lsrs	r1, r1, #1
 800d468:	440b      	add	r3, r1
 800d46a:	0899      	lsrs	r1, r3, #2
 800d46c:	460b      	mov	r3, r1
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	1a5b      	subs	r3, r3, r1
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	b29b      	uxth	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	bf14      	ite	ne
 800d47a:	2301      	movne	r3, #1
 800d47c:	2300      	moveq	r3, #0
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	4403      	add	r3, r0
 800d482:	627b      	str	r3, [r7, #36]	; 0x24
		int totalGroupFrame = totalFrame / 8 + (totalFrame % 8 != 0);
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	2b00      	cmp	r3, #0
 800d488:	da00      	bge.n	800d48c <rxSendThread+0xcc>
 800d48a:	3307      	adds	r3, #7
 800d48c:	10db      	asrs	r3, r3, #3
 800d48e:	461a      	mov	r2, r3
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	f003 0307 	and.w	r3, r3, #7
 800d496:	2b00      	cmp	r3, #0
 800d498:	bf14      	ite	ne
 800d49a:	2301      	movne	r3, #1
 800d49c:	2300      	moveq	r3, #0
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	4413      	add	r3, r2
 800d4a2:	623b      	str	r3, [r7, #32]
		for (int group = 0; group < totalGroupFrame; group++) {
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	633b      	str	r3, [r7, #48]	; 0x30
 800d4a8:	e031      	b.n	800d50e <rxSendThread+0x14e>
			uint8_t record = data->frameRecords[group];
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ae:	4413      	add	r3, r2
 800d4b0:	330b      	adds	r3, #11
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	77fb      	strb	r3, [r7, #31]
			int remFrame = totalFrame - (group * 8);
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	61bb      	str	r3, [r7, #24]
			int bitLen = (remFrame > 8) ? 8 : remFrame;
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	2b08      	cmp	r3, #8
 800d4c4:	bfa8      	it	ge
 800d4c6:	2308      	movge	r3, #8
 800d4c8:	617b      	str	r3, [r7, #20]
			for (int bit = 0; bit < bitLen; bit++) {
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4ce:	e013      	b.n	800d4f8 <rxSendThread+0x138>
				if (!(record & (1 << bit))) {
 800d4d0:	7ffa      	ldrb	r2, [r7, #31]
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	fa42 f303 	asr.w	r3, r2, r3
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d108      	bne.n	800d4f2 <rxSendThread+0x132>
					missingDataAvailable = 1;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					missingFrameIndex = bit + 8 * group;
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4ec:	4413      	add	r3, r2
 800d4ee:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d4f0:	e006      	b.n	800d500 <rxSendThread+0x140>
			for (int bit = 0; bit < bitLen; bit++) {
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	dbe7      	blt.n	800d4d0 <rxSendThread+0x110>
				}
			}
			if (missingDataAvailable)
 800d500:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d504:	2b00      	cmp	r3, #0
 800d506:	d107      	bne.n	800d518 <rxSendThread+0x158>
		for (int group = 0; group < totalGroupFrame; group++) {
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	3301      	adds	r3, #1
 800d50c:	633b      	str	r3, [r7, #48]	; 0x30
 800d50e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	429a      	cmp	r2, r3
 800d514:	dbc9      	blt.n	800d4aa <rxSendThread+0xea>
 800d516:	e000      	b.n	800d51a <rxSendThread+0x15a>
				break;
 800d518:	bf00      	nop
		}

		if (missingDataAvailable) {
 800d51a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d015      	beq.n	800d54e <rxSendThread+0x18e>
			bytes[4] = 1;
 800d522:	2301      	movs	r3, #1
 800d524:	733b      	strb	r3, [r7, #12]
			bytes[5] = missingFrameIndex;
 800d526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	737b      	strb	r3, [r7, #13]
			if (link->canSend(id, bytes, 8)) {
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	f107 0108 	add.w	r1, r7, #8
 800d534:	2208      	movs	r2, #8
 800d536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d538:	4798      	blx	r3
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d04c      	beq.n	800d5da <rxSendThread+0x21a>
				isSuccess = 1;
 800d540:	2301      	movs	r3, #1
 800d542:	63fb      	str	r3, [r7, #60]	; 0x3c
				data->track = SYNC_LAYER_CAN_MISSING_DATA;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2203      	movs	r2, #3
 800d548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d54c:	e045      	b.n	800d5da <rxSendThread+0x21a>
			}
		} else {
			bytes[4] = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	733b      	strb	r3, [r7, #12]
			bytes[5] = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	737b      	strb	r3, [r7, #13]
			uint32_t crc = crc32_calculate(data->bytes, data->size);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	685a      	ldr	r2, [r3, #4]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	891b      	ldrh	r3, [r3, #8]
 800d55e:	4619      	mov	r1, r3
 800d560:	4610      	mov	r0, r2
 800d562:	f7ff fedf 	bl	800d324 <crc32_calculate>
 800d566:	6138      	str	r0, [r7, #16]
			data->doesCRCMatch = data->crc == crc;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	6a1b      	ldr	r3, [r3, #32]
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	429a      	cmp	r2, r3
 800d570:	bf0c      	ite	eq
 800d572:	2301      	moveq	r3, #1
 800d574:	2300      	movne	r3, #0
 800d576:	b2db      	uxtb	r3, r3
 800d578:	461a      	mov	r2, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			bytes[6] = data->doesCRCMatch;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d586:	73bb      	strb	r3, [r7, #14]

			if (link->canSend(id, bytes, 8)) {
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	f107 0108 	add.w	r1, r7, #8
 800d590:	2208      	movs	r2, #8
 800d592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d594:	4798      	blx	r3
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d01e      	beq.n	800d5da <rxSendThread+0x21a>
				isSuccess = 1;
 800d59c:	2301      	movs	r3, #1
 800d59e:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (data->doesCRCMatch)
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d004      	beq.n	800d5b4 <rxSendThread+0x1f4>
					data->track = SYNC_LAYER_CAN_RECEIVE_SUCCESS;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2208      	movs	r2, #8
 800d5ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d5b2:	e012      	b.n	800d5da <rxSendThread+0x21a>
				else {
					data->numTry--;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	7a9b      	ldrb	r3, [r3, #10]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	729a      	strb	r2, [r3, #10]
					if (data->numTry > 0) {
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	7a9b      	ldrb	r3, [r3, #10]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d004      	beq.n	800d5d2 <rxSendThread+0x212>
						data->track = SYNC_LAYER_CAN_START_REQ;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d5d0:	e003      	b.n	800d5da <rxSendThread+0x21a>
					} else {
						data->track = SYNC_LAYER_CAN_RECEIVE_FAILED;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2209      	movs	r2, #9
 800d5d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}

	}

	if (isSuccess)
 800d5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d007      	beq.n	800d5f0 <rxSendThread+0x230>
		data->waitTill = getMillis() + RECEIVE_TIMEOUT;
 800d5e0:	f7ff fee6 	bl	800d3b0 <getMillis>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	6293      	str	r3, [r2, #40]	; 0x28

	if (getMillis() > data->waitTill) {
 800d5f0:	f7ff fede 	bl	800d3b0 <getMillis>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d912      	bls.n	800d624 <rxSendThread+0x264>
		data->numTry--;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	7a9b      	ldrb	r3, [r3, #10]
 800d602:	3b01      	subs	r3, #1
 800d604:	b2da      	uxtb	r2, r3
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	729a      	strb	r2, [r3, #10]
		if (data->numTry > 0) {
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	7a9b      	ldrb	r3, [r3, #10]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d004      	beq.n	800d61c <rxSendThread+0x25c>
			data->track = SYNC_LAYER_CAN_START_REQ;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	2200      	movs	r2, #0
 800d616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d61a:	e003      	b.n	800d624 <rxSendThread+0x264>
		} else {
			data->track = SYNC_LAYER_CAN_RECEIVE_FAILED;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	2209      	movs	r2, #9
 800d620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
	}

	return isSuccess;
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d626:	4618      	mov	r0, r3
 800d628:	3740      	adds	r7, #64	; 0x40
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	24924925 	.word	0x24924925

0800d634 <rxReceiveThread>:
 * @param id	: CAN ID
 * @param bytes	: bytes received from CAN
 * @param len	: length of CAN bytes received
 */
int rxReceiveThread(SyncLayerCANLink *link, SyncLayerCANData *data,
		uint32_t id, uint8_t *bytes, uint16_t len) {
 800d634:	b580      	push	{r7, lr}
 800d636:	b090      	sub	sp, #64	; 0x40
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
 800d640:	603b      	str	r3, [r7, #0]
	int isSuccess = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (data->track == SYNC_LAYER_CAN_START_REQ && id == link->startReqID) {
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d122      	bne.n	800d696 <rxReceiveThread+0x62>
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	429a      	cmp	r2, r3
 800d658:	d11d      	bne.n	800d696 <rxReceiveThread+0x62>
		for (int i = 0; i < sizeof(data->frameRecords); i++)
 800d65a:	2300      	movs	r3, #0
 800d65c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d65e:	e008      	b.n	800d672 <rxReceiveThread+0x3e>
			data->frameRecords[i] = 0;
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d664:	4413      	add	r3, r2
 800d666:	330b      	adds	r3, #11
 800d668:	2200      	movs	r2, #0
 800d66a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data->frameRecords); i++)
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	3301      	adds	r3, #1
 800d670:	63bb      	str	r3, [r7, #56]	; 0x38
 800d672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d674:	2b12      	cmp	r3, #18
 800d676:	d9f3      	bls.n	800d660 <rxReceiveThread+0x2c>
		isSuccess = 1;
 800d678:	2301      	movs	r3, #1
 800d67a:	63fb      	str	r3, [r7, #60]	; 0x3c
		data->size = *(uint16_t*) (&bytes[4]);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	889a      	ldrh	r2, [r3, #4]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	811a      	strh	r2, [r3, #8]
		data->numTry = bytes[6];
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	799a      	ldrb	r2, [r3, #6]
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	729a      	strb	r2, [r3, #10]
		data->track = SYNC_LAYER_CAN_START_ACK;
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d694:	e09a      	b.n	800d7cc <rxReceiveThread+0x198>
	} else if (id == link->endReqID) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d10a      	bne.n	800d6b6 <rxReceiveThread+0x82>
		isSuccess = 1;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		data->crc = *(uint32_t*) (&bytes[4]);
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	621a      	str	r2, [r3, #32]
		data->track = SYNC_LAYER_CAN_END_ACK;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2205      	movs	r2, #5
 800d6b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d6b4:	e08a      	b.n	800d7cc <rxReceiveThread+0x198>
	} else if (data->track == SYNC_LAYER_CAN_DATA) {
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d13e      	bne.n	800d73e <rxReceiveThread+0x10a>
		isSuccess = 1;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t frameIndex = bytes[0];
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	77fb      	strb	r3, [r7, #31]
		int indexOffset = frameIndex * 7;
 800d6ca:	7ffa      	ldrb	r2, [r7, #31]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	00db      	lsls	r3, r3, #3
 800d6d0:	1a9b      	subs	r3, r3, r2
 800d6d2:	61bb      	str	r3, [r7, #24]
		int recordIndex = frameIndex / 8;
 800d6d4:	7ffb      	ldrb	r3, [r7, #31]
 800d6d6:	08db      	lsrs	r3, r3, #3
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	617b      	str	r3, [r7, #20]
		int bitIndex = frameIndex % 8;
 800d6dc:	7ffb      	ldrb	r3, [r7, #31]
 800d6de:	f003 0307 	and.w	r3, r3, #7
 800d6e2:	613b      	str	r3, [r7, #16]
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	330b      	adds	r3, #11
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	b25a      	sxtb	r2, r3
				| (1 << bitIndex);
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6f8:	b25b      	sxtb	r3, r3
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	b25b      	sxtb	r3, r3
 800d6fe:	b2d9      	uxtb	r1, r3
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	4413      	add	r3, r2
 800d706:	330b      	adds	r3, #11
 800d708:	460a      	mov	r2, r1
 800d70a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (len - 1); i++)
 800d70c:	2300      	movs	r3, #0
 800d70e:	637b      	str	r3, [r7, #52]	; 0x34
 800d710:	e00e      	b.n	800d730 <rxReceiveThread+0xfc>
			data->bytes[indexOffset + i] = bytes[i + 1];
 800d712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d714:	3301      	adds	r3, #1
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	441a      	add	r2, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	69b8      	ldr	r0, [r7, #24]
 800d720:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d722:	4401      	add	r1, r0
 800d724:	440b      	add	r3, r1
 800d726:	7812      	ldrb	r2, [r2, #0]
 800d728:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (len - 1); i++)
 800d72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72c:	3301      	adds	r3, #1
 800d72e:	637b      	str	r3, [r7, #52]	; 0x34
 800d730:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d734:	3b01      	subs	r3, #1
 800d736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d738:	429a      	cmp	r2, r3
 800d73a:	dbea      	blt.n	800d712 <rxReceiveThread+0xde>
 800d73c:	e046      	b.n	800d7cc <rxReceiveThread+0x198>
	} else if (data->track == SYNC_LAYER_CAN_MISSING_DATA) {
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d744:	2b03      	cmp	r3, #3
 800d746:	d141      	bne.n	800d7cc <rxReceiveThread+0x198>
		isSuccess = 1;
 800d748:	2301      	movs	r3, #1
 800d74a:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t frameIndex = bytes[0];
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		int indexOffset = frameIndex * 7;
 800d754:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d758:	4613      	mov	r3, r2
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	1a9b      	subs	r3, r3, r2
 800d75e:	62bb      	str	r3, [r7, #40]	; 0x28
		int recordIndex = frameIndex / 8;
 800d760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d764:	08db      	lsrs	r3, r3, #3
 800d766:	b2db      	uxtb	r3, r3
 800d768:	627b      	str	r3, [r7, #36]	; 0x24
		int bitIndex = frameIndex % 8;
 800d76a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d76e:	f003 0307 	and.w	r3, r3, #7
 800d772:	623b      	str	r3, [r7, #32]
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	4413      	add	r3, r2
 800d77a:	330b      	adds	r3, #11
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	b25a      	sxtb	r2, r3
				| (1 << bitIndex);
 800d780:	2101      	movs	r1, #1
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	fa01 f303 	lsl.w	r3, r1, r3
 800d788:	b25b      	sxtb	r3, r3
 800d78a:	4313      	orrs	r3, r2
 800d78c:	b25b      	sxtb	r3, r3
 800d78e:	b2d9      	uxtb	r1, r3
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	4413      	add	r3, r2
 800d796:	330b      	adds	r3, #11
 800d798:	460a      	mov	r2, r1
 800d79a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 800d79c:	2300      	movs	r3, #0
 800d79e:	633b      	str	r3, [r7, #48]	; 0x30
 800d7a0:	e00e      	b.n	800d7c0 <rxReceiveThread+0x18c>
			data->bytes[indexOffset + i] = bytes[i + 1];
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	441a      	add	r2, r3
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7b2:	4401      	add	r1, r0
 800d7b4:	440b      	add	r3, r1
 800d7b6:	7812      	ldrb	r2, [r2, #0]
 800d7b8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7bc:	3301      	adds	r3, #1
 800d7be:	633b      	str	r3, [r7, #48]	; 0x30
 800d7c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	dbea      	blt.n	800d7a2 <rxReceiveThread+0x16e>
	}

	if (isSuccess)
 800d7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d007      	beq.n	800d7e2 <rxReceiveThread+0x1ae>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 800d7d2:	f7ff fded 	bl	800d3b0 <getMillis>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d7dc:	3308      	adds	r3, #8
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	6293      	str	r3, [r2, #40]	; 0x28

	return isSuccess;
 800d7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3740      	adds	r7, #64	; 0x40
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <reverseStr>:
 * This reverse the strings from given offset
 * @param str       : String
 * @param end       : End point (exclusive)
 * @param offset    : Offset
 */
static void reverseStr(char *str,uint8_t end,uint32_t offset){
 800d7ec:	b480      	push	{r7}
 800d7ee:	b089      	sub	sp, #36	; 0x24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	72fb      	strb	r3, [r7, #11]
    if(end<=1)
 800d7fa:	7afb      	ldrb	r3, [r7, #11]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d922      	bls.n	800d846 <reverseStr+0x5a>
        return;
    uint32_t i=offset, j=end-1;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	61fb      	str	r3, [r7, #28]
 800d804:	7afb      	ldrb	r3, [r7, #11]
 800d806:	3b01      	subs	r3, #1
 800d808:	61bb      	str	r3, [r7, #24]
    char temp;
    while (i<j){
 800d80a:	e017      	b.n	800d83c <reverseStr+0x50>
        temp = str[i];
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	4413      	add	r3, r2
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	75fb      	strb	r3, [r7, #23]
        str[i] = str[j];
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	441a      	add	r2, r3
 800d81c:	68f9      	ldr	r1, [r7, #12]
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	440b      	add	r3, r1
 800d822:	7812      	ldrb	r2, [r2, #0]
 800d824:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	4413      	add	r3, r2
 800d82c:	7dfa      	ldrb	r2, [r7, #23]
 800d82e:	701a      	strb	r2, [r3, #0]
        i++;
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	3301      	adds	r3, #1
 800d834:	61fb      	str	r3, [r7, #28]
        j--;
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	3b01      	subs	r3, #1
 800d83a:	61bb      	str	r3, [r7, #24]
    while (i<j){
 800d83c:	69fa      	ldr	r2, [r7, #28]
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	429a      	cmp	r2, r3
 800d842:	d3e3      	bcc.n	800d80c <reverseStr+0x20>
 800d844:	e000      	b.n	800d848 <reverseStr+0x5c>
        return;
 800d846:	bf00      	nop
    }
}
 800d848:	3724      	adds	r7, #36	; 0x24
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bc80      	pop	{r7}
 800d84e:	4770      	bx	lr

0800d850 <intToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t intToStr(int val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	4611      	mov	r1, r2
 800d85c:	461a      	mov	r2, r3
 800d85e:	460b      	mov	r3, r1
 800d860:	71fb      	strb	r3, [r7, #7]
 800d862:	4613      	mov	r3, r2
 800d864:	71bb      	strb	r3, [r7, #6]
    uint8_t is_negative = val < 0;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	0fdb      	lsrs	r3, r3, #31
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	74fb      	strb	r3, [r7, #19]
    uint32_t i=offset;
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(is_negative)
 800d872:	7cfb      	ldrb	r3, [r7, #19]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <intToStr+0x2e>
        val=-val;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	425b      	negs	r3, r3
 800d87c:	60fb      	str	r3, [r7, #12]
    if(val==0)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d140      	bne.n	800d906 <intToStr+0xb6>
        str[i++] = '0';
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	1c5a      	adds	r2, r3, #1
 800d888:	617a      	str	r2, [r7, #20]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	4413      	add	r3, r2
 800d88e:	2230      	movs	r2, #48	; 0x30
 800d890:	701a      	strb	r2, [r3, #0]
    while(val){
 800d892:	e038      	b.n	800d906 <intToStr+0xb6>
        temp = val % base;
 800d894:	79fa      	ldrb	r2, [r7, #7]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	fb93 f1f2 	sdiv	r1, r3, r2
 800d89c:	fb02 f201 	mul.w	r2, r2, r1
 800d8a0:	1a9b      	subs	r3, r3, r2
 800d8a2:	74bb      	strb	r3, [r7, #18]
        if(temp>=0 && temp<=9)
 800d8a4:	7cbb      	ldrb	r3, [r7, #18]
 800d8a6:	2b09      	cmp	r3, #9
 800d8a8:	d809      	bhi.n	800d8be <intToStr+0x6e>
            str[i++] = (char)(temp + (int)'0');
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	1c5a      	adds	r2, r3, #1
 800d8ae:	617a      	str	r2, [r7, #20]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	7cba      	ldrb	r2, [r7, #18]
 800d8b6:	3230      	adds	r2, #48	; 0x30
 800d8b8:	b2d2      	uxtb	r2, r2
 800d8ba:	701a      	strb	r2, [r3, #0]
 800d8bc:	e01e      	b.n	800d8fc <intToStr+0xac>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 800d8be:	7cbb      	ldrb	r3, [r7, #18]
 800d8c0:	2b09      	cmp	r3, #9
 800d8c2:	d914      	bls.n	800d8ee <intToStr+0x9e>
 800d8c4:	7cba      	ldrb	r2, [r7, #18]
 800d8c6:	237a      	movs	r3, #122	; 0x7a
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	2361      	movs	r3, #97	; 0x61
 800d8cc:	1acb      	subs	r3, r1, r3
 800d8ce:	330a      	adds	r3, #10
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	dc0c      	bgt.n	800d8ee <intToStr+0x9e>
            str[i++] = (char)(temp - 10 + ch_start);
 800d8d4:	2261      	movs	r2, #97	; 0x61
 800d8d6:	7cbb      	ldrb	r3, [r7, #18]
 800d8d8:	4413      	add	r3, r2
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	1c59      	adds	r1, r3, #1
 800d8e0:	6179      	str	r1, [r7, #20]
 800d8e2:	68b9      	ldr	r1, [r7, #8]
 800d8e4:	440b      	add	r3, r1
 800d8e6:	3a0a      	subs	r2, #10
 800d8e8:	b2d2      	uxtb	r2, r2
 800d8ea:	701a      	strb	r2, [r3, #0]
 800d8ec:	e006      	b.n	800d8fc <intToStr+0xac>
        else
            str[i++] = (char)temp;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	617a      	str	r2, [r7, #20]
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	7cba      	ldrb	r2, [r7, #18]
 800d8fa:	701a      	strb	r2, [r3, #0]
        val/=base;
 800d8fc:	79fb      	ldrb	r3, [r7, #7]
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	fb92 f3f3 	sdiv	r3, r2, r3
 800d904:	60fb      	str	r3, [r7, #12]
    while(val){
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1c3      	bne.n	800d894 <intToStr+0x44>
    }
    if(is_negative){
 800d90c:	7cfb      	ldrb	r3, [r7, #19]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d017      	beq.n	800d942 <intToStr+0xf2>
        if(fill == ' ')
 800d912:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d916:	2b20      	cmp	r3, #32
 800d918:	d107      	bne.n	800d92a <intToStr+0xda>
            str[i++] = '-';
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	1c5a      	adds	r2, r3, #1
 800d91e:	617a      	str	r2, [r7, #20]
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	4413      	add	r3, r2
 800d924:	222d      	movs	r2, #45	; 0x2d
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	e00b      	b.n	800d942 <intToStr+0xf2>
        else
            width -= 1;
 800d92a:	79bb      	ldrb	r3, [r7, #6]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	71bb      	strb	r3, [r7, #6]
    }
    while (i < (width+offset)) {
 800d930:	e007      	b.n	800d942 <intToStr+0xf2>
        str[i++] = fill;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	1c5a      	adds	r2, r3, #1
 800d936:	617a      	str	r2, [r7, #20]
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	4413      	add	r3, r2
 800d93c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d940:	701a      	strb	r2, [r3, #0]
    while (i < (width+offset)) {
 800d942:	79ba      	ldrb	r2, [r7, #6]
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	4413      	add	r3, r2
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d3f1      	bcc.n	800d932 <intToStr+0xe2>
    }
    if(is_negative && fill!=' ')
 800d94e:	7cfb      	ldrb	r3, [r7, #19]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00a      	beq.n	800d96a <intToStr+0x11a>
 800d954:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d958:	2b20      	cmp	r3, #32
 800d95a:	d006      	beq.n	800d96a <intToStr+0x11a>
        str[i++] = '-';
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	1c5a      	adds	r2, r3, #1
 800d960:	617a      	str	r2, [r7, #20]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	4413      	add	r3, r2
 800d966:	222d      	movs	r2, #45	; 0x2d
 800d968:	701a      	strb	r2, [r3, #0]
    reverseStr(str,i,offset);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	6a3a      	ldr	r2, [r7, #32]
 800d970:	4619      	mov	r1, r3
 800d972:	68b8      	ldr	r0, [r7, #8]
 800d974:	f7ff ff3a 	bl	800d7ec <reverseStr>
    return i;
 800d978:	697b      	ldr	r3, [r7, #20]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <strToInt>:
//    for(uint32_t i=0;i<len;i++)
//        printChar(str[i]);
	HAL_UART_Transmit(&huart1, (uint8_t*)str, len, 1000);
}

static int strToInt(const char* str,int len){
 800d982:	b480      	push	{r7}
 800d984:	b087      	sub	sp, #28
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
    if(len==0)
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <strToInt+0x14>
        return 0;
 800d992:	2300      	movs	r3, #0
 800d994:	e01f      	b.n	800d9d6 <strToInt+0x54>
    int x = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	617b      	str	r3, [r7, #20]
    int ten = 1;
 800d99a:	2301      	movs	r3, #1
 800d99c:	613b      	str	r3, [r7, #16]
    for(int i=len-1;i>=0;i--){
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e013      	b.n	800d9ce <strToInt+0x4c>
        x += (int)(str[i]-'0')*ten;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	3b30      	subs	r3, #48	; 0x30
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	fb02 f303 	mul.w	r3, r2, r3
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	617b      	str	r3, [r7, #20]
        ten*=10;
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	613b      	str	r3, [r7, #16]
    for(int i=len-1;i>=0;i--){
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	60fb      	str	r3, [r7, #12]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	dae8      	bge.n	800d9a6 <strToInt+0x24>
    }
    return x;
 800d9d4:	697b      	ldr	r3, [r7, #20]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	371c      	adds	r7, #28
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bc80      	pop	{r7}
 800d9de:	4770      	bx	lr

0800d9e0 <sprint>:
    va_end(vl);
    return count;
}


uint32_t sprint(char *buff, const char *format, ...) {
 800d9e0:	b40e      	push	{r1, r2, r3}
 800d9e2:	b590      	push	{r4, r7, lr}
 800d9e4:	b09a      	sub	sp, #104	; 0x68
 800d9e6:	af02      	add	r7, sp, #8
 800d9e8:	6078      	str	r0, [r7, #4]
    uint32_t count = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    va_list vl;

    uint32_t i = 0, len;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	65bb      	str	r3, [r7, #88]	; 0x58
    char temp_buff[30] = {0};
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	617b      	str	r3, [r7, #20]
 800d9f6:	f107 0318 	add.w	r3, r7, #24
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	601a      	str	r2, [r3, #0]
 800d9fe:	605a      	str	r2, [r3, #4]
 800da00:	609a      	str	r2, [r3, #8]
 800da02:	60da      	str	r2, [r3, #12]
 800da04:	611a      	str	r2, [r3, #16]
 800da06:	615a      	str	r2, [r3, #20]
 800da08:	831a      	strh	r2, [r3, #24]
    char *str_arg;

    va_start(vl, format);
 800da0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da0e:	637b      	str	r3, [r7, #52]	; 0x34
    while (format[i] != '\0') {
 800da10:	e0e6      	b.n	800dbe0 <sprint+0x200>
        if (format[i] == '%') {
 800da12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da16:	4413      	add	r3, r2
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	2b25      	cmp	r3, #37	; 0x25
 800da1c:	f040 80d3 	bne.w	800dbc6 <sprint+0x1e6>
            char filler = ' ';
 800da20:	2320      	movs	r3, #32
 800da22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            char a_buff[3] = "";
 800da26:	4b78      	ldr	r3, [pc, #480]	; (800dc08 <sprint+0x228>)
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	743b      	strb	r3, [r7, #16]
 800da2c:	f107 0311 	add.w	r3, r7, #17
 800da30:	2200      	movs	r2, #0
 800da32:	801a      	strh	r2, [r3, #0]
            char b_buff[3] = "";
 800da34:	4b74      	ldr	r3, [pc, #464]	; (800dc08 <sprint+0x228>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	733b      	strb	r3, [r7, #12]
 800da3a:	f107 030d 	add.w	r3, r7, #13
 800da3e:	2200      	movs	r2, #0
 800da40:	801a      	strh	r2, [r3, #0]
            int a_len = 0, b_len = 0;
 800da42:	2300      	movs	r3, #0
 800da44:	653b      	str	r3, [r7, #80]	; 0x50
 800da46:	2300      	movs	r3, #0
 800da48:	64fb      	str	r3, [r7, #76]	; 0x4c

            i++;
 800da4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da4c:	3301      	adds	r3, #1
 800da4e:	65bb      	str	r3, [r7, #88]	; 0x58
            if (format[i] == '0')
 800da50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da54:	4413      	add	r3, r2
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b30      	cmp	r3, #48	; 0x30
 800da5a:	d107      	bne.n	800da6c <sprint+0x8c>
                filler = format[i++];
 800da5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	65ba      	str	r2, [r7, #88]	; 0x58
 800da62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da64:	4413      	add	r3, r2
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            uint8_t point_encounter = 0;
 800da6c:	2300      	movs	r3, #0
 800da6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            while (1) {
                if (format[i] == 'c') {
 800da72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da76:	4413      	add	r3, r2
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b63      	cmp	r3, #99	; 0x63
 800da7c:	d10b      	bne.n	800da96 <sprint+0xb6>
                    buff[count++] = (char) va_arg(vl, int);
 800da7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da80:	1d1a      	adds	r2, r3, #4
 800da82:	637a      	str	r2, [r7, #52]	; 0x34
 800da84:	6819      	ldr	r1, [r3, #0]
 800da86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da88:	1c5a      	adds	r2, r3, #1
 800da8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	4413      	add	r3, r2
 800da90:	b2ca      	uxtb	r2, r1
 800da92:	701a      	strb	r2, [r3, #0]
                    break;
 800da94:	e0a1      	b.n	800dbda <sprint+0x1fa>
                } else if (format[i] == 'd') {
 800da96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da9a:	4413      	add	r3, r2
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b64      	cmp	r3, #100	; 0x64
 800daa0:	d12e      	bne.n	800db00 <sprint+0x120>
                    len = intToStr(va_arg(vl, int), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 800daa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa4:	1d1a      	adds	r2, r3, #4
 800daa6:	637a      	str	r2, [r7, #52]	; 0x34
 800daa8:	681c      	ldr	r4, [r3, #0]
 800daaa:	f107 0310 	add.w	r3, r7, #16
 800daae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff ff66 	bl	800d982 <strToInt>
 800dab6:	4603      	mov	r3, r0
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	f107 0114 	add.w	r1, r7, #20
 800dabe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dac2:	9301      	str	r3, [sp, #4]
 800dac4:	2300      	movs	r3, #0
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	4613      	mov	r3, r2
 800daca:	220a      	movs	r2, #10
 800dacc:	4620      	mov	r0, r4
 800dace:	f7ff febf 	bl	800d850 <intToStr>
 800dad2:	63b8      	str	r0, [r7, #56]	; 0x38
                    for (uint32_t k = 0; k < len; k++)
 800dad4:	2300      	movs	r3, #0
 800dad6:	647b      	str	r3, [r7, #68]	; 0x44
 800dad8:	e00d      	b.n	800daf6 <sprint+0x116>
                        buff[count++] = temp_buff[k];
 800dada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	4413      	add	r3, r2
 800dae4:	f107 0114 	add.w	r1, r7, #20
 800dae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daea:	440a      	add	r2, r1
 800daec:	7812      	ldrb	r2, [r2, #0]
 800daee:	701a      	strb	r2, [r3, #0]
                    for (uint32_t k = 0; k < len; k++)
 800daf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daf2:	3301      	adds	r3, #1
 800daf4:	647b      	str	r3, [r7, #68]	; 0x44
 800daf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d3ed      	bcc.n	800dada <sprint+0xfa>
                    break;
 800dafe:	e06c      	b.n	800dbda <sprint+0x1fa>
//                } else if (format[i] == 'b') {
//                    len = unsignedToStr(va_arg(vl, unsigned), temp_buff, 2, strToInt(a_buff, a_len), 0, filler);
//                    for (uint32_t k = 0; k < len; k++)
//                        buff[count++] = temp_buff[k];
//                    break;
                } else if (format[i] == 's') {
 800db00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db04:	4413      	add	r3, r2
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b73      	cmp	r3, #115	; 0x73
 800db0a:	d11d      	bne.n	800db48 <sprint+0x168>
                    str_arg = va_arg(vl, char*);
 800db0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0e:	1d1a      	adds	r2, r3, #4
 800db10:	637a      	str	r2, [r7, #52]	; 0x34
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	63fb      	str	r3, [r7, #60]	; 0x3c
                    len = strlen(str_arg);
 800db16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800db18:	f7f5 fd1a 	bl	8003550 <strlen>
 800db1c:	63b8      	str	r0, [r7, #56]	; 0x38
                    for (uint32_t k = 0; k < len; k++)
 800db1e:	2300      	movs	r3, #0
 800db20:	643b      	str	r3, [r7, #64]	; 0x40
 800db22:	e00c      	b.n	800db3e <sprint+0x15e>
                        buff[count++] = str_arg[k];
 800db24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db28:	441a      	add	r2, r3
 800db2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db2c:	1c59      	adds	r1, r3, #1
 800db2e:	65f9      	str	r1, [r7, #92]	; 0x5c
 800db30:	6879      	ldr	r1, [r7, #4]
 800db32:	440b      	add	r3, r1
 800db34:	7812      	ldrb	r2, [r2, #0]
 800db36:	701a      	strb	r2, [r3, #0]
                    for (uint32_t k = 0; k < len; k++)
 800db38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db3a:	3301      	adds	r3, #1
 800db3c:	643b      	str	r3, [r7, #64]	; 0x40
 800db3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	429a      	cmp	r2, r3
 800db44:	d3ee      	bcc.n	800db24 <sprint+0x144>
                    break;
 800db46:	e048      	b.n	800dbda <sprint+0x1fa>
                } else if (format[i] == '.') {
 800db48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db4c:	4413      	add	r3, r2
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	2b2e      	cmp	r3, #46	; 0x2e
 800db52:	d106      	bne.n	800db62 <sprint+0x182>
                    point_encounter = 1;
 800db54:	2301      	movs	r3, #1
 800db56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    i++;
 800db5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db5c:	3301      	adds	r3, #1
 800db5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800db60:	e787      	b.n	800da72 <sprint+0x92>
                } else if (format[i] == '%'){
 800db62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db66:	4413      	add	r3, r2
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b25      	cmp	r3, #37	; 0x25
 800db6c:	d10a      	bne.n	800db84 <sprint+0x1a4>
                    buff[count++] = '%';
 800db6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db70:	1c5a      	adds	r2, r3, #1
 800db72:	65fa      	str	r2, [r7, #92]	; 0x5c
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	4413      	add	r3, r2
 800db78:	2225      	movs	r2, #37	; 0x25
 800db7a:	701a      	strb	r2, [r3, #0]
                    i+=2;
 800db7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db7e:	3302      	adds	r3, #2
 800db80:	65bb      	str	r3, [r7, #88]	; 0x58
                    break;
 800db82:	e02a      	b.n	800dbda <sprint+0x1fa>
                } else {
                    if (!point_encounter)
 800db84:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10c      	bne.n	800dba6 <sprint+0x1c6>
                        a_buff[a_len++] = format[i];
 800db8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db90:	441a      	add	r2, r3
 800db92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db94:	1c59      	adds	r1, r3, #1
 800db96:	6539      	str	r1, [r7, #80]	; 0x50
 800db98:	7812      	ldrb	r2, [r2, #0]
 800db9a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800db9e:	440b      	add	r3, r1
 800dba0:	f803 2c50 	strb.w	r2, [r3, #-80]
 800dba4:	e00b      	b.n	800dbbe <sprint+0x1de>
                    else
                        b_buff[b_len++] = format[i];
 800dba6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbaa:	441a      	add	r2, r3
 800dbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbae:	1c59      	adds	r1, r3, #1
 800dbb0:	64f9      	str	r1, [r7, #76]	; 0x4c
 800dbb2:	7812      	ldrb	r2, [r2, #0]
 800dbb4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800dbb8:	440b      	add	r3, r1
 800dbba:	f803 2c54 	strb.w	r2, [r3, #-84]
                    i++;
 800dbbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	65bb      	str	r3, [r7, #88]	; 0x58
                if (format[i] == 'c') {
 800dbc4:	e755      	b.n	800da72 <sprint+0x92>
                }
            }
        } else {
            buff[count++] = format[i];
 800dbc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbca:	441a      	add	r2, r3
 800dbcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbce:	1c59      	adds	r1, r3, #1
 800dbd0:	65f9      	str	r1, [r7, #92]	; 0x5c
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	440b      	add	r3, r1
 800dbd6:	7812      	ldrb	r2, [r2, #0]
 800dbd8:	701a      	strb	r2, [r3, #0]
        }
        i++;
 800dbda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbdc:	3301      	adds	r3, #1
 800dbde:	65bb      	str	r3, [r7, #88]	; 0x58
    while (format[i] != '\0') {
 800dbe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbe4:	4413      	add	r3, r2
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f47f af12 	bne.w	800da12 <sprint+0x32>
    }
    va_end(vl);
    buff[count] = '\0';
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbf2:	4413      	add	r3, r2
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
    return count;
 800dbf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3760      	adds	r7, #96	; 0x60
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800dc04:	b003      	add	sp, #12
 800dc06:	4770      	bx	lr
 800dc08:	0800fc68 	.word	0x0800fc68

0800dc0c <App_WrCoCmd_Buffer>:
#ifdef BUFFER_OPTIMIZATION
uint8_t  DlBuffer[DL_SIZE];
uint8_t  CmdBuffer[CMD_FIFO_SIZE];
#endif

void App_WrCoCmd_Buffer(Gpu_Hal_Context_t *phost, uint32_t cmd) {
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]


#endif

#if (defined(STM32_PLATFORM))
	Gpu_Hal_WrCmd32(phost, cmd);
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fe91 	bl	800e940 <Gpu_Hal_WrCmd32>
#endif
	/* Increment the command index */
	CmdBuffer_Index += CMD_SIZE;
 800dc1e:	4b04      	ldr	r3, [pc, #16]	; (800dc30 <App_WrCoCmd_Buffer+0x24>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	3304      	adds	r3, #4
 800dc24:	4a02      	ldr	r2, [pc, #8]	; (800dc30 <App_WrCoCmd_Buffer+0x24>)
 800dc26:	6013      	str	r3, [r2, #0]
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20000c68 	.word	0x20000c68

0800dc34 <App_Flush_Co_Buffer>:
    Gpu_Hal_WrMem(phost,RAM_DL,DlBuffer,DlBuffer_Index);
#endif
	DlBuffer_Index = 0;
}

void App_Flush_Co_Buffer(Gpu_Hal_Context_t *phost) {
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
#ifdef  BUFFER_OPTIMIZATION
    if (CmdBuffer_Index > 0)
    Gpu_Hal_WrCmdBuf(phost,CmdBuffer,CmdBuffer_Index);
#endif
	CmdBuffer_Index = 0;
 800dc3c:	4b03      	ldr	r3, [pc, #12]	; (800dc4c <App_Flush_Co_Buffer+0x18>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]
}
 800dc42:	bf00      	nop
 800dc44:	370c      	adds	r7, #12
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bc80      	pop	{r7}
 800dc4a:	4770      	bx	lr
 800dc4c:	20000c68 	.word	0x20000c68

0800dc50 <App_Common_Init>:
	Gpu_Hal_Sleep(20);
}

/******************************************************************************/

void App_Common_Init(Gpu_Hal_Context_t *phost) {
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	Gpu_HalInit_t halinit;
	uint8_t chipid;

	Gpu_Hal_Init(&halinit);
 800dc58:	f107 0308 	add.w	r3, r7, #8
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f000 fb5c 	bl	800e31a <Gpu_Hal_Init>
	Gpu_Hal_Open(phost);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fb65 	bl	800e332 <Gpu_Hal_Open>
	/* FT81x will be in SPI Single channel after POR
	 If we are here with FT4222 in multi channel, then
	 an explicit switch to single channel is essential
	 */
#ifdef FT81X_ENABLE
	Gpu_Hal_SetSPI(phost, GPU_SPI_SINGLE_CHANNEL, GPU_SPI_ONEDUMMY);
 800dc68:	2201      	movs	r2, #1
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fdbb 	bl	800e7e8 <Gpu_Hal_SetSPI>
#endif

	/* access address 0 to wake up the chip */
	Gpu_HostCommand(phost, GPU_ACTIVE_M);
 800dc72:	2100      	movs	r1, #0
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fd06 	bl	800e686 <Gpu_HostCommand>
//    Gpu_Hal_Sleep(300);

#if (defined(EVE_2) && (defined(NTP_50)||defined(RTP_50)||defined(CTP_50)||defined(NTP_70)||defined(RTP_70)||defined(CTP_70)))
    Gpu_HostCommand(phost,GPU_INTERNAL_OSC);
#else
	Gpu_HostCommand(phost, GPU_EXTERNAL_OSC);
 800dc7a:	2144      	movs	r1, #68	; 0x44
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 fd02 	bl	800e686 <Gpu_HostCommand>
#endif

	//Gpu_HostCommand(phost,GPU_EXTERNAL_OSC);
//    Gpu_HostCommand(phost,GPU_PLL_48M);
//    Gpu_81X_SelectSysCLK(phost, GPU_SYSCLK_60M);
	Gpu_81X_SelectSysCLK(phost, GPU_SYSCLK_72M);
 800dc82:	2106      	movs	r1, #6
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fd71 	bl	800e76c <Gpu_81X_SelectSysCLK>
//    Gpu_Hal_Sleep(100);
	Gpu_HostCommand(phost, GPU_ACTIVE_M);
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fcfa 	bl	800e686 <Gpu_HostCommand>
//    Gpu_Hal_Sleep(300);

//    Gpu_Hal_Wr32(phost, REG_FREQUENCY, 60000000);
	Gpu_Hal_Wr32(phost, REG_FREQUENCY, 72000000);
 800dc92:	4a61      	ldr	r2, [pc, #388]	; (800de18 <App_Common_Init+0x1c8>)
 800dc94:	4961      	ldr	r1, [pc, #388]	; (800de1c <App_Common_Init+0x1cc>)
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fcdf 	bl	800e65a <Gpu_Hal_Wr32>

//	uint32_t freq = Gpu_Hal_Rd32(phost, REG_FREQUENCY);

	/* read Register ID to check if chip ID series is correct */
    uint8_t resistor_val=0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73bb      	strb	r3, [r7, #14]
	chipid = Gpu_Hal_Rd8(phost, REG_ID);
 800dca0:	495f      	ldr	r1, [pc, #380]	; (800de20 <App_Common_Init+0x1d0>)
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fc75 	bl	800e592 <Gpu_Hal_Rd8>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	73fb      	strb	r3, [r7, #15]
//	print("DISPLAY :: VALUE OF CHIP_ID : %d\n", chipid);
	while (chipid != 0x7C) {
 800dcac:	e016      	b.n	800dcdc <App_Common_Init+0x8c>
		chipid = Gpu_Hal_Rd8(phost, REG_ID);
 800dcae:	495c      	ldr	r1, [pc, #368]	; (800de20 <App_Common_Init+0x1d0>)
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fc6e 	bl	800e592 <Gpu_Hal_Rd8>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	73fb      	strb	r3, [r7, #15]
		resistor_val++;
 800dcba:	7bbb      	ldrb	r3, [r7, #14]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	73bb      	strb	r3, [r7, #14]
		Gpu_Hal_Sleep(100);
 800dcc0:	2064      	movs	r0, #100	; 0x64
 800dcc2:	f000 fd26 	bl	800e712 <Gpu_Hal_Sleep>
		if (resistor_val == 20) {
 800dcc6:	7bbb      	ldrb	r3, [r7, #14]
 800dcc8:	2b14      	cmp	r3, #20
 800dcca:	d102      	bne.n	800dcd2 <App_Common_Init+0x82>
			Display_Backlight_Power_Recycle();
 800dccc:	f7f7 fe5e 	bl	800598c <Display_Backlight_Power_Recycle>
			break;
 800dcd0:	e007      	b.n	800dce2 <App_Common_Init+0x92>
		}
		chipid_counter++;
 800dcd2:	4b54      	ldr	r3, [pc, #336]	; (800de24 <App_Common_Init+0x1d4>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	4a52      	ldr	r2, [pc, #328]	; (800de24 <App_Common_Init+0x1d4>)
 800dcda:	6013      	str	r3, [r2, #0]
	while (chipid != 0x7C) {
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
 800dcde:	2b7c      	cmp	r3, #124	; 0x7c
 800dce0:	d1e5      	bne.n	800dcae <App_Common_Init+0x5e>
		/* Read REG_CPURESET to check if engines are ready.
		 Bit 0 for coprocessor engine,
		 Bit 1 for touch engine,
		 Bit 2 for audio engine.
		 */
		engine_status = Gpu_Hal_Rd8(phost, REG_CPURESET);
 800dce2:	4951      	ldr	r1, [pc, #324]	; (800de28 <App_Common_Init+0x1d8>)
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fc54 	bl	800e592 <Gpu_Hal_Rd8>
 800dcea:	4603      	mov	r3, r0
 800dcec:	737b      	strb	r3, [r7, #13]
		while (engine_status != 0x00) {
 800dcee:	e00a      	b.n	800dd06 <App_Common_Init+0xb6>
			engine_counter++;
 800dcf0:	4b4e      	ldr	r3, [pc, #312]	; (800de2c <App_Common_Init+0x1dc>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	4a4d      	ldr	r2, [pc, #308]	; (800de2c <App_Common_Init+0x1dc>)
 800dcf8:	6013      	str	r3, [r2, #0]
			engine_status = Gpu_Hal_Rd8(phost, REG_CPURESET);
 800dcfa:	494b      	ldr	r1, [pc, #300]	; (800de28 <App_Common_Init+0x1d8>)
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fc48 	bl	800e592 <Gpu_Hal_Rd8>
 800dd02:	4603      	mov	r3, r0
 800dd04:	737b      	strb	r3, [r7, #13]
		while (engine_status != 0x00) {
 800dd06:	7b7b      	ldrb	r3, [r7, #13]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1f1      	bne.n	800dcf0 <App_Common_Init+0xa0>
//          Gpu_Hal_Sleep(100);
		}
	}

	Gpu_Hal_Wr16(phost, REG_PWM_HZ, 10000);
 800dd0c:	f242 7210 	movw	r2, #10000	; 0x2710
 800dd10:	4947      	ldr	r1, [pc, #284]	; (800de30 <App_Common_Init+0x1e0>)
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fc89 	bl	800e62a <Gpu_Hal_Wr16>
//	Gpu_Hal_Wr8(phost, REG_PWM_DUTY, 128);
	Gpu_Hal_Wr8(phost, REG_PWM_DUTY, brightness_level);
 800dd18:	4b46      	ldr	r3, [pc, #280]	; (800de34 <App_Common_Init+0x1e4>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	461a      	mov	r2, r3
 800dd20:	4945      	ldr	r1, [pc, #276]	; (800de38 <App_Common_Init+0x1e8>)
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fc69 	bl	800e5fa <Gpu_Hal_Wr8>

//	uint16_t pwmHz = Gpu_Hal_Rd16(phost, REG_PWM_HZ);

	Gpu_Hal_Wr16(phost, REG_PCLK_FREQ, DispPLCLKFREQ);
 800dd28:	2232      	movs	r2, #50	; 0x32
 800dd2a:	4944      	ldr	r1, [pc, #272]	; (800de3c <App_Common_Init+0x1ec>)
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fc7c 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr8(phost, REG_PCLK_2X, DispPCLK2x);
 800dd32:	2200      	movs	r2, #0
 800dd34:	4942      	ldr	r1, [pc, #264]	; (800de40 <App_Common_Init+0x1f0>)
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 fc5f 	bl	800e5fa <Gpu_Hal_Wr8>

	/* configuration of LCD display */
	Gpu_Hal_Wr16(phost, REG_HCYCLE, DispHCycle);
 800dd3c:	f240 2213 	movw	r2, #531	; 0x213
 800dd40:	4940      	ldr	r1, [pc, #256]	; (800de44 <App_Common_Init+0x1f4>)
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fc71 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_HOFFSET, DispHOffset);
 800dd48:	222b      	movs	r2, #43	; 0x2b
 800dd4a:	493f      	ldr	r1, [pc, #252]	; (800de48 <App_Common_Init+0x1f8>)
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fc6c 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_HSYNC0, DispHSync0);
 800dd52:	2200      	movs	r2, #0
 800dd54:	493d      	ldr	r1, [pc, #244]	; (800de4c <App_Common_Init+0x1fc>)
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fc67 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_HSYNC1, DispHSync1);
 800dd5c:	2204      	movs	r2, #4
 800dd5e:	493c      	ldr	r1, [pc, #240]	; (800de50 <App_Common_Init+0x200>)
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fc62 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_VCYCLE, DispVCycle);
 800dd66:	f44f 7292 	mov.w	r2, #292	; 0x124
 800dd6a:	493a      	ldr	r1, [pc, #232]	; (800de54 <App_Common_Init+0x204>)
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fc5c 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_VOFFSET, DispVOffset);
 800dd72:	220c      	movs	r2, #12
 800dd74:	4938      	ldr	r1, [pc, #224]	; (800de58 <App_Common_Init+0x208>)
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fc57 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_VSYNC0, DispVSync0);
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	4937      	ldr	r1, [pc, #220]	; (800de5c <App_Common_Init+0x20c>)
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 fc52 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_VSYNC1, DispVSync1);
 800dd86:	2204      	movs	r2, #4
 800dd88:	4935      	ldr	r1, [pc, #212]	; (800de60 <App_Common_Init+0x210>)
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 fc4d 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr8(phost, REG_SWIZZLE, DispSwizzle);
 800dd90:	2200      	movs	r2, #0
 800dd92:	4934      	ldr	r1, [pc, #208]	; (800de64 <App_Common_Init+0x214>)
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fc30 	bl	800e5fa <Gpu_Hal_Wr8>
	Gpu_Hal_Wr8(phost, REG_PCLK_POL, DispPCLKPol);
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	4932      	ldr	r1, [pc, #200]	; (800de68 <App_Common_Init+0x218>)
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fc2b 	bl	800e5fa <Gpu_Hal_Wr8>
	Gpu_Hal_Wr16(phost, REG_HSIZE, DispWidth);
 800dda4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dda8:	4930      	ldr	r1, [pc, #192]	; (800de6c <App_Common_Init+0x21c>)
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 fc3d 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_VSIZE, DispHeight);
 800ddb0:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ddb4:	492e      	ldr	r1, [pc, #184]	; (800de70 <App_Common_Init+0x220>)
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fc37 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_CSPREAD, DispCSpread);
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	492d      	ldr	r1, [pc, #180]	; (800de74 <App_Common_Init+0x224>)
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 fc32 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_DITHER, DispDither);
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	492b      	ldr	r1, [pc, #172]	; (800de78 <App_Common_Init+0x228>)
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fc2d 	bl	800e62a <Gpu_Hal_Wr16>

	/* GPIO configuration */
#if defined(FT81X_ENABLE)
	Gpu_Hal_Wr16(phost, REG_GPIOX_DIR, 0xffff);
 800ddd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddd4:	4929      	ldr	r1, [pc, #164]	; (800de7c <App_Common_Init+0x22c>)
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 fc27 	bl	800e62a <Gpu_Hal_Wr16>
	Gpu_Hal_Wr16(phost, REG_GPIOX, 0xffff);
 800dddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dde0:	4927      	ldr	r1, [pc, #156]	; (800de80 <App_Common_Init+0x230>)
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fc21 	bl	800e62a <Gpu_Hal_Wr16>
#else
    Gpu_Hal_Wr8(phost, REG_GPIO_DIR,0xff);
    Gpu_Hal_Wr8(phost, REG_GPIO,0xff);
#endif

	if (UI_lastState == 0) {
 800dde8:	4b26      	ldr	r3, [pc, #152]	; (800de84 <App_Common_Init+0x234>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d102      	bne.n	800ddf6 <App_Common_Init+0x1a6>
		Gpu_ClearScreen(phost);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 fdbf 	bl	800e974 <Gpu_ClearScreen>
	}

	/* after this display is visible on the LCD */
	Gpu_Hal_Wr8(phost, REG_PCLK, DispPCLK);
 800ddf6:	2205      	movs	r2, #5
 800ddf8:	4923      	ldr	r1, [pc, #140]	; (800de88 <App_Common_Init+0x238>)
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fbfd 	bl	800e5fa <Gpu_Hal_Wr8>

	phost->cmd_fifo_wp = Gpu_Hal_Rd16(phost, REG_CMD_WRITE);
 800de00:	4922      	ldr	r1, [pc, #136]	; (800de8c <App_Common_Init+0x23c>)
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fbdf 	bl	800e5c6 <Gpu_Hal_Rd16>
 800de08:	4603      	mov	r3, r0
 800de0a:	461a      	mov	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	811a      	strh	r2, [r3, #8]
}
 800de10:	bf00      	nop
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	044aa200 	.word	0x044aa200
 800de1c:	0030200c 	.word	0x0030200c
 800de20:	00302000 	.word	0x00302000
 800de24:	2000063c 	.word	0x2000063c
 800de28:	00302020 	.word	0x00302020
 800de2c:	200004a4 	.word	0x200004a4
 800de30:	003020d0 	.word	0x003020d0
 800de34:	20000000 	.word	0x20000000
 800de38:	003020d4 	.word	0x003020d4
 800de3c:	00302614 	.word	0x00302614
 800de40:	00302618 	.word	0x00302618
 800de44:	0030202c 	.word	0x0030202c
 800de48:	00302030 	.word	0x00302030
 800de4c:	00302038 	.word	0x00302038
 800de50:	0030203c 	.word	0x0030203c
 800de54:	00302040 	.word	0x00302040
 800de58:	00302044 	.word	0x00302044
 800de5c:	0030204c 	.word	0x0030204c
 800de60:	00302050 	.word	0x00302050
 800de64:	00302064 	.word	0x00302064
 800de68:	0030206c 	.word	0x0030206c
 800de6c:	00302034 	.word	0x00302034
 800de70:	00302048 	.word	0x00302048
 800de74:	00302068 	.word	0x00302068
 800de78:	00302060 	.word	0x00302060
 800de7c:	00302098 	.word	0x00302098
 800de80:	0030209c 	.word	0x0030209c
 800de84:	200009a0 	.word	0x200009a0
 800de88:	00302070 	.word	0x00302070
 800de8c:	003020fc 	.word	0x003020fc

0800de90 <COUNT_ARGS>:
#include "platform.h"
#include "App_Common.h"

#ifdef BT81X_ENABLE
static uint8_t COUNT_ARGS(const char* str)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  uint8_t count = 0;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]
  const char *tmp = str;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	60bb      	str	r3, [r7, #8]

  while ((tmp = strstr(tmp, "%")))
 800dea0:	e00e      	b.n	800dec0 <COUNT_ARGS+0x30>
    {
      if (*(tmp + 1) == '%')
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	3301      	adds	r3, #1
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	2b25      	cmp	r3, #37	; 0x25
 800deaa:	d103      	bne.n	800deb4 <COUNT_ARGS+0x24>
        {
          tmp += 2;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	3302      	adds	r3, #2
 800deb0:	60bb      	str	r3, [r7, #8]
 800deb2:	e005      	b.n	800dec0 <COUNT_ARGS+0x30>
        }
      else
        {
          count++;
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	3301      	adds	r3, #1
 800deb8:	73fb      	strb	r3, [r7, #15]
          tmp++;
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	3301      	adds	r3, #1
 800debe:	60bb      	str	r3, [r7, #8]
  while ((tmp = strstr(tmp, "%")))
 800dec0:	2125      	movs	r1, #37	; 0x25
 800dec2:	68b8      	ldr	r0, [r7, #8]
 800dec4:	f001 fbdc 	bl	800f680 <strchr>
 800dec8:	60b8      	str	r0, [r7, #8]
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1e8      	bne.n	800dea2 <COUNT_ARGS+0x12>
        }
    }
  return count;
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <Gpu_CoCmd_Text>:
#endif

void Gpu_CoCmd_Text(Gpu_Hal_Context_t *phost, int16_t x, int16_t y, int16_t font, uint16_t options, const char8_t* s, ...)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b086      	sub	sp, #24
 800dede:	af00      	add	r7, sp, #0
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	4608      	mov	r0, r1
 800dee4:	4611      	mov	r1, r2
 800dee6:	461a      	mov	r2, r3
 800dee8:	4603      	mov	r3, r0
 800deea:	817b      	strh	r3, [r7, #10]
 800deec:	460b      	mov	r3, r1
 800deee:	813b      	strh	r3, [r7, #8]
 800def0:	4613      	mov	r3, r2
 800def2:	80fb      	strh	r3, [r7, #6]
  va_list args;
  uint8_t i, num=0;
 800def4:	2300      	movs	r3, #0
 800def6:	75bb      	strb	r3, [r7, #22]
  uint8_t len = strlen(s);
 800def8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800defa:	f7f5 fb29 	bl	8003550 <strlen>
 800defe:	4603      	mov	r3, r0
 800df00:	757b      	strb	r3, [r7, #21]

  va_start(args, s);
 800df02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df06:	613b      	str	r3, [r7, #16]

#ifdef BT81X_ENABLE
  num = (options & OPT_FORMAT) ? (COUNT_ARGS(s)) : (0);
 800df08:	8c3b      	ldrh	r3, [r7, #32]
 800df0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d004      	beq.n	800df1c <Gpu_CoCmd_Text+0x42>
 800df12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df14:	f7ff ffbc 	bl	800de90 <COUNT_ARGS>
 800df18:	4603      	mov	r3, r0
 800df1a:	e000      	b.n	800df1e <Gpu_CoCmd_Text+0x44>
 800df1c:	2300      	movs	r3, #0
 800df1e:	75bb      	strb	r3, [r7, #22]
#endif

  Gpu_CoCmd_StartFunc(phost, CMD_SIZE * (3+ num) + ((len + 1 + 3) & ~3));
 800df20:	7dbb      	ldrb	r3, [r7, #22]
 800df22:	3303      	adds	r3, #3
 800df24:	b29b      	uxth	r3, r3
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	b29a      	uxth	r2, r3
 800df2a:	7d7b      	ldrb	r3, [r7, #21]
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	3304      	adds	r3, #4
 800df30:	b29b      	uxth	r3, r3
 800df32:	f023 0303 	bic.w	r3, r3, #3
 800df36:	b29b      	uxth	r3, r3
 800df38:	4413      	add	r3, r2
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	4619      	mov	r1, r3
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 f9c4 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_TEXT);
 800df44:	f06f 01f3 	mvn.w	r1, #243	; 0xf3
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f980 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, (((uint32_t)y << 16) | (x & 0xffff)));
 800df4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800df52:	041a      	lsls	r2, r3, #16
 800df54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df58:	b29b      	uxth	r3, r3
 800df5a:	4313      	orrs	r3, r2
 800df5c:	4619      	mov	r1, r3
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f000 f975 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, (((uint32_t)options << 16) | (font & 0xffff)));
 800df64:	8c3b      	ldrh	r3, [r7, #32]
 800df66:	041a      	lsls	r2, r3, #16
 800df68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	4313      	orrs	r3, r2
 800df70:	4619      	mov	r1, r3
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f000 f96b 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_SendStr(phost, s);
 800df78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f000 f974 	bl	800e268 <Gpu_CoCmd_SendStr>

  for (i = 0; i < num; i++)
 800df80:	2300      	movs	r3, #0
 800df82:	75fb      	strb	r3, [r7, #23]
 800df84:	e00a      	b.n	800df9c <Gpu_CoCmd_Text+0xc2>
    Gpu_Copro_SendCmd(phost, (uint32_t)va_arg(args, uint32_t));
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	1d1a      	adds	r2, r3, #4
 800df8a:	613a      	str	r2, [r7, #16]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4619      	mov	r1, r3
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f000 f95c 	bl	800e24e <Gpu_Copro_SendCmd>
  for (i = 0; i < num; i++)
 800df96:	7dfb      	ldrb	r3, [r7, #23]
 800df98:	3301      	adds	r3, #1
 800df9a:	75fb      	strb	r3, [r7, #23]
 800df9c:	7dfa      	ldrb	r2, [r7, #23]
 800df9e:	7dbb      	ldrb	r3, [r7, #22]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d3f0      	bcc.n	800df86 <Gpu_CoCmd_Text+0xac>

  Gpu_CoCmd_EndFunc(phost, CMD_SIZE * (3+ num) + ((len + 1 + 3) & ~3));
 800dfa4:	7dbb      	ldrb	r3, [r7, #22]
 800dfa6:	3303      	adds	r3, #3
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	7d7b      	ldrb	r3, [r7, #21]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	f023 0303 	bic.w	r3, r3, #3
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	4413      	add	r3, r2
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f000 f997 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
  va_end(args);
}
 800dfc8:	bf00      	nop
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <Gpu_CoCmd_LoadIdentity>:
  Gpu_Copro_SendCmd(phost, n);
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*4));
}

void Gpu_CoCmd_LoadIdentity(Gpu_Hal_Context_t *phost)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*1);
 800dfd8:	2104      	movs	r1, #4
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f976 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_LOADIDENTITY);
 800dfe0:	f06f 01d9 	mvn.w	r1, #217	; 0xd9
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 f932 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*1));
 800dfea:	2104      	movs	r1, #4
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 f982 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800dff2:	bf00      	nop
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <Gpu_CoCmd_Swap>:
  Gpu_Copro_SendCmd(phost, c);
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*2));
}

void Gpu_CoCmd_Swap(Gpu_Hal_Context_t *phost)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b082      	sub	sp, #8
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*1);
 800e002:	2104      	movs	r1, #4
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 f961 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_SWAP);
 800e00a:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f91d 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*1));
 800e014:	2104      	movs	r1, #4
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f96d 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <Gpu_CoCmd_Translate>:
  Gpu_Copro_SendCmd(phost, ptr);
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*2));
}

void Gpu_CoCmd_Translate(Gpu_Hal_Context_t *phost,int32_t tx, int32_t ty)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*3);
 800e030:	210c      	movs	r1, #12
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f000 f94a 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_TRANSLATE);
 800e038:	f06f 01d8 	mvn.w	r1, #216	; 0xd8
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f000 f906 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, tx);
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	4619      	mov	r1, r3
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f000 f901 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, ty);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4619      	mov	r1, r3
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 f8fc 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*3));
 800e056:	210c      	movs	r1, #12
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f000 f94c 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e05e:	bf00      	nop
 800e060:	3710      	adds	r7, #16
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <Gpu_CoCmd_Scale>:
  Gpu_Copro_SendCmd(phost, num);
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*3));
}

void Gpu_CoCmd_Scale(Gpu_Hal_Context_t *phost,int32_t sx, int32_t sy)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	60f8      	str	r0, [r7, #12]
 800e06e:	60b9      	str	r1, [r7, #8]
 800e070:	607a      	str	r2, [r7, #4]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*3);
 800e072:	210c      	movs	r1, #12
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f000 f929 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_SCALE);
 800e07a:	f06f 01d7 	mvn.w	r1, #215	; 0xd7
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 f8e5 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, sx);
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	4619      	mov	r1, r3
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f000 f8e0 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, sy);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4619      	mov	r1, r3
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f000 f8db 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*3));
 800e098:	210c      	movs	r1, #12
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 f92b 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e0a0:	bf00      	nop
 800e0a2:	3710      	adds	r7, #16
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <Gpu_CoCmd_SetMatrix>:
  Gpu_Copro_SendCmd(phost, rgb1);
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*5));
}

void Gpu_CoCmd_SetMatrix(Gpu_Hal_Context_t *phost)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*1);
 800e0b0:	2104      	movs	r1, #4
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f90a 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_SETMATRIX);
 800e0b8:	f06f 01d5 	mvn.w	r1, #213	; 0xd5
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f8c6 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*1));
 800e0c2:	2104      	movs	r1, #4
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 f916 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e0ca:	bf00      	nop
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <Gpu_CoCmd_Dlstart>:
  Gpu_Copro_SendCmd(phost, options);
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*3));
}

void Gpu_CoCmd_Dlstart(Gpu_Hal_Context_t *phost)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*1);
 800e0da:	2104      	movs	r1, #4
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f8f5 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_DLSTART);
 800e0e2:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f8b1 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*1));
 800e0ec:	2104      	movs	r1, #4
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 f901 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e0f4:	bf00      	nop
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <Gpu_CoCmd_SetBitmap>:
    }
}

#ifdef FT81X_ENABLE
void Gpu_CoCmd_SetBitmap(Gpu_Hal_Context_t *phost,uint32_t source, uint16_t fmt, uint16_t w, uint16_t h)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	4611      	mov	r1, r2
 800e108:	461a      	mov	r2, r3
 800e10a:	460b      	mov	r3, r1
 800e10c:	80fb      	strh	r3, [r7, #6]
 800e10e:	4613      	mov	r3, r2
 800e110:	80bb      	strh	r3, [r7, #4]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*4);
 800e112:	2110      	movs	r1, #16
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f000 f8d9 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_SETBITMAP);
 800e11a:	f06f 01bc 	mvn.w	r1, #188	; 0xbc
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f000 f895 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, source);
 800e124:	68b9      	ldr	r1, [r7, #8]
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f000 f891 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, (((uint32_t)w<<16)|(fmt & 0xffff)));
 800e12c:	88bb      	ldrh	r3, [r7, #4]
 800e12e:	041a      	lsls	r2, r3, #16
 800e130:	88fb      	ldrh	r3, [r7, #6]
 800e132:	4313      	orrs	r3, r2
 800e134:	4619      	mov	r1, r3
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f000 f889 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, h);
 800e13c:	8b3b      	ldrh	r3, [r7, #24]
 800e13e:	4619      	mov	r1, r3
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f000 f884 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*4));
 800e146:	2110      	movs	r1, #16
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	f000 f8d4 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e14e:	bf00      	nop
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <Gpu_CoCmd_SetFont2>:
  Gpu_Copro_SendCmd(phost, (((uint32_t)h<<16)|(w&0xffff)));
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*5));
}

void Gpu_CoCmd_SetFont2(Gpu_Hal_Context_t *phost,uint32_t font, uint32_t ptr, uint32_t firstchar)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b084      	sub	sp, #16
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	60f8      	str	r0, [r7, #12]
 800e15e:	60b9      	str	r1, [r7, #8]
 800e160:	607a      	str	r2, [r7, #4]
 800e162:	603b      	str	r3, [r7, #0]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*4);
 800e164:	2110      	movs	r1, #16
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f8b0 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_SETFONT2);
 800e16c:	f06f 01c4 	mvn.w	r1, #196	; 0xc4
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 f86c 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, font);
 800e176:	68b9      	ldr	r1, [r7, #8]
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f000 f868 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, ptr);
 800e17e:	6879      	ldr	r1, [r7, #4]
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f000 f864 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, firstchar);
 800e186:	6839      	ldr	r1, [r7, #0]
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f000 f860 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*4));
 800e18e:	2110      	movs	r1, #16
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f000 f8b0 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e196:	bf00      	nop
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <Gpu_CoCmd_FlashRead>:
  Gpu_CoCmd_EndFunc(phost, (CMD_SIZE * 4));
}

/* Read data from flash into main memory */
void Gpu_CoCmd_FlashRead(Gpu_Hal_Context_t *phost,uint32_t dest, uint32_t src, uint32_t num)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b084      	sub	sp, #16
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	60f8      	str	r0, [r7, #12]
 800e1a6:	60b9      	str	r1, [r7, #8]
 800e1a8:	607a      	str	r2, [r7, #4]
 800e1aa:	603b      	str	r3, [r7, #0]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*4);
 800e1ac:	2110      	movs	r1, #16
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f000 f88c 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost, CMD_FLASHREAD);
 800e1b4:	f06f 01b9 	mvn.w	r1, #185	; 0xb9
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 f848 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, dest);
 800e1be:	68b9      	ldr	r1, [r7, #8]
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 f844 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, src);
 800e1c6:	6879      	ldr	r1, [r7, #4]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 f840 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost, num);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f000 f83c 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*4));
 800e1d6:	2110      	movs	r1, #16
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f000 f88c 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e1de:	bf00      	nop
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <Gpu_CoCmd_FlashSource>:

void Gpu_CoCmd_FlashSource(Gpu_Hal_Context_t *phost,uint32_t ptr)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b082      	sub	sp, #8
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	6039      	str	r1, [r7, #0]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*2);
 800e1f0:	2108      	movs	r1, #8
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f86a 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost,CMD_FLASHSOURCE);
 800e1f8:	f06f 01b1 	mvn.w	r1, #177	; 0xb1
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 f826 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost,ptr);
 800e202:	6839      	ldr	r1, [r7, #0]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 f822 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*2));
 800e20a:	2108      	movs	r1, #8
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 f872 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e212:	bf00      	nop
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <Gpu_CoCmd_FlashFast>:
  Gpu_Copro_SendCmd(phost,num);
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*2));
}

void Gpu_CoCmd_FlashFast(Gpu_Hal_Context_t *phost,uint32_t result)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b082      	sub	sp, #8
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
 800e222:	6039      	str	r1, [r7, #0]
  Gpu_CoCmd_StartFunc(phost,CMD_SIZE*2);
 800e224:	2108      	movs	r1, #8
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f850 	bl	800e2cc <Gpu_CoCmd_StartFunc>
  Gpu_Copro_SendCmd(phost,CMD_FLASHFAST);
 800e22c:	f06f 01b5 	mvn.w	r1, #181	; 0xb5
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f80c 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_Copro_SendCmd(phost,result);
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f808 	bl	800e24e <Gpu_Copro_SendCmd>
  Gpu_CoCmd_EndFunc(phost,(CMD_SIZE*2));
 800e23e:	2108      	movs	r1, #8
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 f858 	bl	800e2f6 <Gpu_CoCmd_EndFunc>
}
 800e246:	bf00      	nop
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <Gpu_Copro_SendCmd>:
  return Gpu_Hal_Rd8(phost, REG_FLASH_STATUS);
}
#endif /* BT81X_ENABLE */

void Gpu_Copro_SendCmd(Gpu_Hal_Context_t *phost,uint32_t cmd)
{
 800e24e:	b580      	push	{r7, lr}
 800e250:	b082      	sub	sp, #8
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
 800e256:	6039      	str	r1, [r7, #0]
#endif
#endif

#ifdef STM32_PLATFORM
#ifdef STM32_PLATFORM_COCMD_BURST
   Gpu_Hal_Transfer32(phost,cmd);
 800e258:	6839      	ldr	r1, [r7, #0]
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 f95c 	bl	800e518 <Gpu_Hal_Transfer32>
#else
   Gpu_Hal_WrCmd32(phost,cmd);
#endif
#endif
}
 800e260:	bf00      	nop
 800e262:	3708      	adds	r7, #8
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <Gpu_CoCmd_SendStr>:

void Gpu_CoCmd_SendStr(Gpu_Hal_Context_t *phost,const char8_t *s)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
#endif
#endif

#ifdef STM32_PLATFORM
#ifdef STM32_PLATFORM_COCMD_BURST
  Gpu_Hal_TransferString(phost,s);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f8e9 	bl	800e44c <Gpu_Hal_TransferString>
#else
  Gpu_Hal_WrCmdBuf(phost,(uint8_t*)s,length);
#endif

  /* align 4 byte in coprocessor command buffer */
  uint8_t i=0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	81bb      	strh	r3, [r7, #12]
  length = strlen(s) + 1;
 800e282:	6838      	ldr	r0, [r7, #0]
 800e284:	f7f5 f964 	bl	8003550 <strlen>
 800e288:	4603      	mov	r3, r0
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	3301      	adds	r3, #1
 800e28e:	81bb      	strh	r3, [r7, #12]
  for (i=0; i< (4-length%4)%4 ;i++)
 800e290:	2300      	movs	r3, #0
 800e292:	73fb      	strb	r3, [r7, #15]
 800e294:	e006      	b.n	800e2a4 <Gpu_CoCmd_SendStr+0x3c>
    Gpu_Hal_Transfer8(phost,0);
 800e296:	2100      	movs	r1, #0
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 f8f8 	bl	800e48e <Gpu_Hal_Transfer8>
  for (i=0; i< (4-length%4)%4 ;i++)
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	73fb      	strb	r3, [r7, #15]
 800e2a4:	7bfa      	ldrb	r2, [r7, #15]
 800e2a6:	89bb      	ldrh	r3, [r7, #12]
 800e2a8:	f003 0303 	and.w	r3, r3, #3
 800e2ac:	f1c3 0304 	rsb	r3, r3, #4
 800e2b0:	4259      	negs	r1, r3
 800e2b2:	f003 0303 	and.w	r3, r3, #3
 800e2b6:	f001 0103 	and.w	r1, r1, #3
 800e2ba:	bf58      	it	pl
 800e2bc:	424b      	negpl	r3, r1
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	dbe9      	blt.n	800e296 <Gpu_CoCmd_SendStr+0x2e>
#endif
}
 800e2c2:	bf00      	nop
 800e2c4:	bf00      	nop
 800e2c6:	3710      	adds	r7, #16
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <Gpu_CoCmd_StartFunc>:

void Gpu_CoCmd_StartFunc(Gpu_Hal_Context_t *phost,uint16_t count)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	807b      	strh	r3, [r7, #2]
#endif
#endif

#ifdef STM32_PLATFORM
#ifdef STM32_PLATFORM_COCMD_BURST
  Gpu_Hal_CheckCmdBuffer(phost,count);
 800e2d8:	887b      	ldrh	r3, [r7, #2]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 faf9 	bl	800e8d4 <Gpu_Hal_CheckCmdBuffer>
  Gpu_Hal_StartCmdTransfer(phost,GPU_WRITE,count);
 800e2e2:	887b      	ldrh	r3, [r7, #2]
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	2101      	movs	r1, #1
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 f89a 	bl	800e422 <Gpu_Hal_StartCmdTransfer>
#endif
#endif
}
 800e2ee:	bf00      	nop
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <Gpu_CoCmd_EndFunc>:

void Gpu_CoCmd_EndFunc(Gpu_Hal_Context_t *phost,uint16_t count)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	807b      	strh	r3, [r7, #2]
#endif
#endif

#ifdef STM32_PLATFORM
#ifdef STM32_PLATFORM_COCMD_BURST
  Gpu_Hal_EndTransfer(phost);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f935 	bl	800e572 <Gpu_Hal_EndTransfer>
  Gpu_Hal_Updatecmdfifo(phost,count);
 800e308:	887b      	ldrh	r3, [r7, #2]
 800e30a:	4619      	mov	r1, r3
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 fa9d 	bl	800e84c <Gpu_Hal_Updatecmdfifo>
#endif
#endif
}
 800e312:	bf00      	nop
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <Gpu_Hal_Init>:
/*
 * Gpu_Hal_Init()
 */
bool_t
Gpu_Hal_Init (Gpu_HalInit_t *halinit)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  platform_init (halinit);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fb3e 	bl	800e9a4 <platform_init>

  return TRUE;
 800e328:	2301      	movs	r3, #1
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3708      	adds	r7, #8
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <Gpu_Hal_Open>:
/*
 * Gpu_Hal_Open()
 */
bool_t
Gpu_Hal_Open (Gpu_Hal_Context_t *host)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b084      	sub	sp, #16
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
  bool_t ret;

  platform_gpio_init (host, GPIO_CS);  /*  chip select */
 800e33a:	2110      	movs	r1, #16
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fb81 	bl	800ea44 <platform_gpio_init>
  platform_gpio_init (host, GPIO_PD);  /*  powerdown   */
 800e342:	2104      	movs	r1, #4
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fb7d 	bl	800ea44 <platform_gpio_init>
//  platform_gpio_init (host, GPIO_INT); /*  interrupt   */

  platform_gpio_value (host, GPIO_PD, GPIO_HIGH);
 800e34a:	2201      	movs	r2, #1
 800e34c:	2104      	movs	r1, #4
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fba2 	bl	800ea98 <platform_gpio_value>
  platform_gpio_value (host, GPIO_CS, GPIO_HIGH);
 800e354:	2201      	movs	r2, #1
 800e356:	2110      	movs	r1, #16
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fb9d 	bl	800ea98 <platform_gpio_value>

  /* init SPI */
  ret = platform_spi_init (host);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fb35 	bl	800e9ce <platform_spi_init>
 800e364:	4603      	mov	r3, r0
 800e366:	73fb      	strb	r3, [r7, #15]
//	HAL_UART_Transmit(&huart1, ret, 1, 1000);


  /* initialize the context valriables */
  host->cmd_fifo_wp = host->dl_buff_wp = 0;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	815a      	strh	r2, [r3, #10]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	895a      	ldrh	r2, [r3, #10]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	811a      	strh	r2, [r3, #8]
  host->spinumdummy = GPU_SPI_ONEDUMMY;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	765a      	strb	r2, [r3, #25]
  host->status = GPU_HAL_OPENED;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	731a      	strb	r2, [r3, #12]

  return ret;
 800e382:	7bfb      	ldrb	r3, [r7, #15]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <Gpu_Hal_StartTransfer>:
 */
void
Gpu_Hal_StartTransfer (Gpu_Hal_Context_t  *host,
                       GPU_TRANSFERDIR_T   rw,
                       uint32_t            addr)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	460b      	mov	r3, r1
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	72fb      	strb	r3, [r7, #11]
  if (GPU_READ == rw)
 800e39a:	7afb      	ldrb	r3, [r7, #11]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d11c      	bne.n	800e3da <Gpu_Hal_StartTransfer+0x4e>
    {
      uchar8_t transfer[4];

      transfer[0] = addr >> 16;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	0c1b      	lsrs	r3, r3, #16
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	753b      	strb	r3, [r7, #20]
      transfer[1] = (addr & 0xFF00) >> 8;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	0a1b      	lsrs	r3, r3, #8
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	757b      	strb	r3, [r7, #21]
      transfer[2] = addr & 0xFF;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	75bb      	strb	r3, [r7, #22]
      transfer[3] = DUMMY_BYTE;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	75fb      	strb	r3, [r7, #23]

      platform_gpio_value (host, GPIO_CS, GPIO_LOW);
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2110      	movs	r1, #16
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 fb6a 	bl	800ea98 <platform_gpio_value>

      platform_spi_send_data (host, transfer, sizeof(transfer),
 800e3c4:	f107 0114 	add.w	r1, r7, #20
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	2204      	movs	r2, #4
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f000 fb23 	bl	800ea18 <platform_spi_send_data>
                              SPI_TRANSFER_OPTIONS_CHIPSELECT_ENABLE);

      host->status = GPU_HAL_READING;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	731a      	strb	r2, [r3, #12]
      platform_spi_send_data (host, transfer, sizeof(transfer),
                              SPI_TRANSFER_OPTIONS_CHIPSELECT_ENABLE);

      host->status = GPU_HAL_WRITING;
    }
}
 800e3d8:	e01f      	b.n	800e41a <Gpu_Hal_StartTransfer+0x8e>
      transfer[0] = ((addr >> 16) & 0xBF) | 0x80;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	0c1b      	lsrs	r3, r3, #16
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	743b      	strb	r3, [r7, #16]
      transfer[1] = (addr & 0xFF00) >> 8;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	0a1b      	lsrs	r3, r3, #8
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	747b      	strb	r3, [r7, #17]
      transfer[2] = addr & 0xFF;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	74bb      	strb	r3, [r7, #18]
      platform_gpio_value (host, GPIO_CS, GPIO_LOW);
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2110      	movs	r1, #16
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fb49 	bl	800ea98 <platform_gpio_value>
      platform_spi_send_data (host, transfer, sizeof(transfer),
 800e406:	f107 0110 	add.w	r1, r7, #16
 800e40a:	2302      	movs	r3, #2
 800e40c:	2203      	movs	r2, #3
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f000 fb02 	bl	800ea18 <platform_spi_send_data>
      host->status = GPU_HAL_WRITING;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2202      	movs	r2, #2
 800e418:	731a      	strb	r2, [r3, #12]
}
 800e41a:	bf00      	nop
 800e41c:	3718      	adds	r7, #24
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <Gpu_Hal_StartCmdTransfer>:
 */
void
Gpu_Hal_StartCmdTransfer (Gpu_Hal_Context_t  *host,
                          GPU_TRANSFERDIR_T   rw,
                          uint16_t            count)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	460b      	mov	r3, r1
 800e42c:	70fb      	strb	r3, [r7, #3]
 800e42e:	4613      	mov	r3, r2
 800e430:	803b      	strh	r3, [r7, #0]
  Gpu_Hal_StartTransfer(host,rw,host->cmd_fifo_wp + RAM_CMD);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	891b      	ldrh	r3, [r3, #8]
 800e436:	f503 1242 	add.w	r2, r3, #3178496	; 0x308000
 800e43a:	78fb      	ldrb	r3, [r7, #3]
 800e43c:	4619      	mov	r1, r3
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f7ff ffa4 	bl	800e38c <Gpu_Hal_StartTransfer>
}
 800e444:	bf00      	nop
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <Gpu_Hal_TransferString>:
 * Gpu_Hal_TransferString()
 */
void
Gpu_Hal_TransferString (Gpu_Hal_Context_t  *host,
                        const char8_t      *string)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  uint16_t length = strlen(string);
 800e456:	6838      	ldr	r0, [r7, #0]
 800e458:	f7f5 f87a 	bl	8003550 <strlen>
 800e45c:	4603      	mov	r3, r0
 800e45e:	81fb      	strh	r3, [r7, #14]

  while(length --)
 800e460:	e008      	b.n	800e474 <Gpu_Hal_TransferString+0x28>
    {
      Gpu_Hal_Transfer8(host,*string);
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	4619      	mov	r1, r3
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f810 	bl	800e48e <Gpu_Hal_Transfer8>
      string ++;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	3301      	adds	r3, #1
 800e472:	603b      	str	r3, [r7, #0]
  while(length --)
 800e474:	89fb      	ldrh	r3, [r7, #14]
 800e476:	1e5a      	subs	r2, r3, #1
 800e478:	81fa      	strh	r2, [r7, #14]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1f1      	bne.n	800e462 <Gpu_Hal_TransferString+0x16>
    }

  /* append one null as ending flag */
  Gpu_Hal_Transfer8(host,0);
 800e47e:	2100      	movs	r1, #0
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 f804 	bl	800e48e <Gpu_Hal_Transfer8>
}
 800e486:	bf00      	nop
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <Gpu_Hal_Transfer8>:
 * Gpu_Hal_Transfer8()
 */
uint8_t
Gpu_Hal_Transfer8 (Gpu_Hal_Context_t  *host,
                   uint8_t             value)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b082      	sub	sp, #8
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	460b      	mov	r3, r1
 800e498:	70fb      	strb	r3, [r7, #3]
  return platform_spi_send_recv_byte (host, value, host->status);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	7b1b      	ldrb	r3, [r3, #12]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 fa9d 	bl	800e9e4 <platform_spi_send_recv_byte>
 800e4aa:	4603      	mov	r3, r0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <Gpu_Hal_Transfer16>:
 * Gpu_Hal_Transfer16()
 */
uint16_t
Gpu_Hal_Transfer16 (Gpu_Hal_Context_t  *host,
                    uint16_t            value)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	460b      	mov	r3, r1
 800e4be:	807b      	strh	r3, [r7, #2]
  uint16_t retVal = 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	81fb      	strh	r3, [r7, #14]

  if (host->status == GPU_HAL_WRITING)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	7b1b      	ldrb	r3, [r3, #12]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d10e      	bne.n	800e4ea <Gpu_Hal_Transfer16+0x36>
    {
      Gpu_Hal_Transfer8(host,value & 0xFF);
 800e4cc:	887b      	ldrh	r3, [r7, #2]
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7ff ffdb 	bl	800e48e <Gpu_Hal_Transfer8>
      Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
 800e4d8:	887b      	ldrh	r3, [r7, #2]
 800e4da:	0a1b      	lsrs	r3, r3, #8
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff ffd3 	bl	800e48e <Gpu_Hal_Transfer8>
 800e4e8:	e011      	b.n	800e50e <Gpu_Hal_Transfer16+0x5a>
    }
  else
    {
      retVal = Gpu_Hal_Transfer8(host,0);
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7ff ffce 	bl	800e48e <Gpu_Hal_Transfer8>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	81fb      	strh	r3, [r7, #14]
      retVal |= (uint16_t)Gpu_Hal_Transfer8(host,0) << 8;
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff ffc8 	bl	800e48e <Gpu_Hal_Transfer8>
 800e4fe:	4603      	mov	r3, r0
 800e500:	021b      	lsls	r3, r3, #8
 800e502:	b21a      	sxth	r2, r3
 800e504:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e508:	4313      	orrs	r3, r2
 800e50a:	b21b      	sxth	r3, r3
 800e50c:	81fb      	strh	r3, [r7, #14]
    }

  return retVal;
 800e50e:	89fb      	ldrh	r3, [r7, #14]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <Gpu_Hal_Transfer32>:
 * Gpu_Hal_Transfer32()
 */
uint32_t
Gpu_Hal_Transfer32 (Gpu_Hal_Context_t  *host,
                    uint32_t            value)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  uint32_t retVal = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	60fb      	str	r3, [r7, #12]

  if (host->status == GPU_HAL_WRITING)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7b1b      	ldrb	r3, [r3, #12]
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d10d      	bne.n	800e54a <Gpu_Hal_Transfer32+0x32>
    {
      Gpu_Hal_Transfer16(host,value & 0xFFFF);
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	b29b      	uxth	r3, r3
 800e532:	4619      	mov	r1, r3
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ffbd 	bl	800e4b4 <Gpu_Hal_Transfer16>
      Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	0c1b      	lsrs	r3, r3, #16
 800e53e:	b29b      	uxth	r3, r3
 800e540:	4619      	mov	r1, r3
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7ff ffb6 	bl	800e4b4 <Gpu_Hal_Transfer16>
 800e548:	e00e      	b.n	800e568 <Gpu_Hal_Transfer32+0x50>
    }
  else
    {
      retVal = Gpu_Hal_Transfer16(host,0);
 800e54a:	2100      	movs	r1, #0
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7ff ffb1 	bl	800e4b4 <Gpu_Hal_Transfer16>
 800e552:	4603      	mov	r3, r0
 800e554:	60fb      	str	r3, [r7, #12]
      retVal |= (uint32_t)Gpu_Hal_Transfer16(host,0) << 16;
 800e556:	2100      	movs	r1, #0
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7ff ffab 	bl	800e4b4 <Gpu_Hal_Transfer16>
 800e55e:	4603      	mov	r3, r0
 800e560:	041b      	lsls	r3, r3, #16
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	4313      	orrs	r3, r2
 800e566:	60fb      	str	r3, [r7, #12]
    }

  return retVal;
 800e568:	68fb      	ldr	r3, [r7, #12]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <Gpu_Hal_EndTransfer>:
/*
 * Gpu_Hal_EndTransfer()
 */
void
Gpu_Hal_EndTransfer (Gpu_Hal_Context_t *host)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b082      	sub	sp, #8
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
/* TODO: this part should be platform independent */
#ifdef FT232H_MINGW_PLATFORM
  SPI_ToggleCS ((FT_HANDLE)host->hal_handle,FALSE);
#else
  platform_gpio_value (host, GPIO_CS, GPIO_HIGH);
 800e57a:	2201      	movs	r2, #1
 800e57c:	2110      	movs	r1, #16
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fa8a 	bl	800ea98 <platform_gpio_value>
#endif

  host->status = GPU_HAL_OPENED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	731a      	strb	r2, [r3, #12]
}
 800e58a:	bf00      	nop
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <Gpu_Hal_Rd8>:
 * Gpu_Hal_Rd8()
 */
uint8_t
Gpu_Hal_Rd8 (Gpu_Hal_Context_t  *host,
             uint32_t            addr)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b084      	sub	sp, #16
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
 800e59a:	6039      	str	r1, [r7, #0]
  uint8_t value = 0;
 800e59c:	2300      	movs	r3, #0
 800e59e:	73fb      	strb	r3, [r7, #15]

  Gpu_Hal_StartTransfer(host,GPU_READ,addr);
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff fef1 	bl	800e38c <Gpu_Hal_StartTransfer>
  value = Gpu_Hal_Transfer8 (host, 0);
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff ff6e 	bl	800e48e <Gpu_Hal_Transfer8>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	73fb      	strb	r3, [r7, #15]
  Gpu_Hal_EndTransfer(host);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff ffdb 	bl	800e572 <Gpu_Hal_EndTransfer>

  return value;
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <Gpu_Hal_Rd16>:
 * Gpu_Hal_Rd16()
 */
uint16_t
Gpu_Hal_Rd16 (Gpu_Hal_Context_t  *host,
              uint32_t            addr)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	6039      	str	r1, [r7, #0]
  uint16_t value = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	81fb      	strh	r3, [r7, #14]

  Gpu_Hal_StartTransfer(host,GPU_READ,addr);
 800e5d4:	683a      	ldr	r2, [r7, #0]
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff fed7 	bl	800e38c <Gpu_Hal_StartTransfer>
  value = Gpu_Hal_Transfer16 (host, 0);
 800e5de:	2100      	movs	r1, #0
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff ff67 	bl	800e4b4 <Gpu_Hal_Transfer16>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	81fb      	strh	r3, [r7, #14]
  Gpu_Hal_EndTransfer(host);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff ffc1 	bl	800e572 <Gpu_Hal_EndTransfer>

  return value;
 800e5f0:	89fb      	ldrh	r3, [r7, #14]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <Gpu_Hal_Wr8>:
 */
void
Gpu_Hal_Wr8 (Gpu_Hal_Context_t  *host,
             uint32_t            addr,
             uint8_t             v)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b084      	sub	sp, #16
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	60f8      	str	r0, [r7, #12]
 800e602:	60b9      	str	r1, [r7, #8]
 800e604:	4613      	mov	r3, r2
 800e606:	71fb      	strb	r3, [r7, #7]
  Gpu_Hal_StartTransfer(host,GPU_WRITE,addr);
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	2101      	movs	r1, #1
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7ff febd 	bl	800e38c <Gpu_Hal_StartTransfer>
  Gpu_Hal_Transfer8(host,v);
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	4619      	mov	r1, r3
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7ff ff39 	bl	800e48e <Gpu_Hal_Transfer8>
  Gpu_Hal_EndTransfer(host);
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f7ff ffa8 	bl	800e572 <Gpu_Hal_EndTransfer>
}
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <Gpu_Hal_Wr16>:
 */
void
Gpu_Hal_Wr16 (Gpu_Hal_Context_t  *host,
              uint32_t            addr,
              uint16_t            v)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b084      	sub	sp, #16
 800e62e:	af00      	add	r7, sp, #0
 800e630:	60f8      	str	r0, [r7, #12]
 800e632:	60b9      	str	r1, [r7, #8]
 800e634:	4613      	mov	r3, r2
 800e636:	80fb      	strh	r3, [r7, #6]
  Gpu_Hal_StartTransfer(host,GPU_WRITE,addr);
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	2101      	movs	r1, #1
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7ff fea5 	bl	800e38c <Gpu_Hal_StartTransfer>
  Gpu_Hal_Transfer16(host,v);
 800e642:	88fb      	ldrh	r3, [r7, #6]
 800e644:	4619      	mov	r1, r3
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f7ff ff34 	bl	800e4b4 <Gpu_Hal_Transfer16>
  Gpu_Hal_EndTransfer(host);
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f7ff ff90 	bl	800e572 <Gpu_Hal_EndTransfer>
}
 800e652:	bf00      	nop
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <Gpu_Hal_Wr32>:
 */
void
Gpu_Hal_Wr32 (Gpu_Hal_Context_t  *host,
              uint32_t            addr,
              uint32_t            v)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	60f8      	str	r0, [r7, #12]
 800e662:	60b9      	str	r1, [r7, #8]
 800e664:	607a      	str	r2, [r7, #4]
  Gpu_Hal_StartTransfer(host,GPU_WRITE,addr);
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	2101      	movs	r1, #1
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7ff fe8e 	bl	800e38c <Gpu_Hal_StartTransfer>
  Gpu_Hal_Transfer32(host,v);
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f7ff ff50 	bl	800e518 <Gpu_Hal_Transfer32>
  Gpu_Hal_EndTransfer(host);
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	f7ff ff7a 	bl	800e572 <Gpu_Hal_EndTransfer>
}
 800e67e:	bf00      	nop
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <Gpu_HostCommand>:
 * Gpu_HostCommand()
 */
void
Gpu_HostCommand (Gpu_Hal_Context_t  *host,
                 uint8_t             cmd)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b084      	sub	sp, #16
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	460b      	mov	r3, r1
 800e690:	70fb      	strb	r3, [r7, #3]
  uchar8_t transfer[3];

  transfer[0] = cmd;
 800e692:	78fb      	ldrb	r3, [r7, #3]
 800e694:	733b      	strb	r3, [r7, #12]
  transfer[1] = 0x00;
 800e696:	2300      	movs	r3, #0
 800e698:	737b      	strb	r3, [r7, #13]
  transfer[2] = 0x00;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73bb      	strb	r3, [r7, #14]

  platform_gpio_value (host, GPIO_CS, GPIO_LOW);
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2110      	movs	r1, #16
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 f9f8 	bl	800ea98 <platform_gpio_value>

  platform_spi_send_data (host, transfer, sizeof(transfer),
 800e6a8:	f107 010c 	add.w	r1, r7, #12
 800e6ac:	2306      	movs	r3, #6
 800e6ae:	2203      	movs	r2, #3
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 f9b1 	bl	800ea18 <platform_spi_send_data>
                          SPI_TRANSFER_OPTIONS_CHIPSELECT_ENABLE |
                          SPI_TRANSFER_OPTIONS_CHIPSELECT_DISABLE);

  platform_gpio_value (host, GPIO_CS, GPIO_HIGH);
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	2110      	movs	r1, #16
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f9ec 	bl	800ea98 <platform_gpio_value>
}
 800e6c0:	bf00      	nop
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <Gpu_HostCommand_Ext3>:
 * Gpu_HostCommand_Ext3()
 */
void
Gpu_HostCommand_Ext3 (Gpu_Hal_Context_t  *host,
                      uint32_t            cmd)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  uchar8_t transfer[3];

  transfer[0] = cmd;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	733b      	strb	r3, [r7, #12]
  transfer[1] = (cmd>>8) & 0xff;
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	0a1b      	lsrs	r3, r3, #8
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	737b      	strb	r3, [r7, #13]
  transfer[2] = (cmd>>16) & 0xff;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	0c1b      	lsrs	r3, r3, #16
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	73bb      	strb	r3, [r7, #14]

  platform_gpio_value (host, GPIO_CS, GPIO_LOW);
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	2110      	movs	r1, #16
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f9d3 	bl	800ea98 <platform_gpio_value>

  platform_spi_send_data (host, transfer, sizeof(transfer),
 800e6f2:	f107 010c 	add.w	r1, r7, #12
 800e6f6:	2306      	movs	r3, #6
 800e6f8:	2203      	movs	r2, #3
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f98c 	bl	800ea18 <platform_spi_send_data>
                          SPI_TRANSFER_OPTIONS_CHIPSELECT_ENABLE |
                          SPI_TRANSFER_OPTIONS_CHIPSELECT_DISABLE);

  platform_gpio_value (host, GPIO_CS, GPIO_HIGH);
 800e700:	2201      	movs	r2, #1
 800e702:	2110      	movs	r1, #16
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 f9c7 	bl	800ea98 <platform_gpio_value>
}
 800e70a:	bf00      	nop
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <Gpu_Hal_Sleep>:
/*
 * Gpu_Hal_Sleep()
 */
void
Gpu_Hal_Sleep (uint32_t ms)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b082      	sub	sp, #8
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
  platform_sleep_ms (ms);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 f94c 	bl	800e9b8 <platform_sleep_ms>
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <Gpu_Hal_WrMem>:
void
Gpu_Hal_WrMem (Gpu_Hal_Context_t  *host,
               uint32_t            addr,
               const uint8_t      *buffer,
               uint32_t            length)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	603b      	str	r3, [r7, #0]
  Gpu_Hal_StartTransfer(host,GPU_WRITE,addr);
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	2101      	movs	r1, #1
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f7ff fe26 	bl	800e38c <Gpu_Hal_StartTransfer>

  /* buffer += platform_spi_send_data (host, (uchar8_t*)buffer, length, 0); */
  while (length--)
 800e740:	e008      	b.n	800e754 <Gpu_Hal_WrMem+0x2c>
    {
      Gpu_Hal_Transfer8(host,*buffer);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	4619      	mov	r1, r3
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f7ff fea0 	bl	800e48e <Gpu_Hal_Transfer8>
      buffer++;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	3301      	adds	r3, #1
 800e752:	607b      	str	r3, [r7, #4]
  while (length--)
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	1e5a      	subs	r2, r3, #1
 800e758:	603a      	str	r2, [r7, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1f1      	bne.n	800e742 <Gpu_Hal_WrMem+0x1a>
    }

  Gpu_Hal_EndTransfer(host);
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f7ff ff07 	bl	800e572 <Gpu_Hal_EndTransfer>
}
 800e764:	bf00      	nop
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <Gpu_81X_SelectSysCLK>:
 * GPU_SETPLLSP1_T table.
 */
void
Gpu_81X_SelectSysCLK (Gpu_Hal_Context_t  *host,
                      GPU_81X_PLL_FREQ_T  freq)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	460b      	mov	r3, r1
 800e776:	70fb      	strb	r3, [r7, #3]
  if(GPU_SYSCLK_72M == freq)
 800e778:	78fb      	ldrb	r3, [r7, #3]
 800e77a:	2b06      	cmp	r3, #6
 800e77c:	d105      	bne.n	800e78a <Gpu_81X_SelectSysCLK+0x1e>
    Gpu_HostCommand_Ext3(host, (uint32_t)0x61 | (0x40 << 8) | (0x06 << 8));
 800e77e:	f244 6161 	movw	r1, #18017	; 0x4661
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7ff ffa0 	bl	800e6c8 <Gpu_HostCommand_Ext3>
    Gpu_HostCommand_Ext3(host, (uint32_t)0x61 | (0x03 << 8));
  else if(GPU_SYSCLK_24M == freq)
    Gpu_HostCommand_Ext3(host, (uint32_t)0x61 | (0x02 << 8));
  else if(GPU_SYSCLK_DEFAULT == freq)
    Gpu_HostCommand_Ext3(host, 0x61);
}
 800e788:	e02a      	b.n	800e7e0 <Gpu_81X_SelectSysCLK+0x74>
  else if(GPU_SYSCLK_60M == freq)
 800e78a:	78fb      	ldrb	r3, [r7, #3]
 800e78c:	2b05      	cmp	r3, #5
 800e78e:	d105      	bne.n	800e79c <Gpu_81X_SelectSysCLK+0x30>
    Gpu_HostCommand_Ext3(host, (uint32_t)0x61 | (0x40 << 8) | (0x05 << 8));
 800e790:	f244 5161 	movw	r1, #17761	; 0x4561
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7ff ff97 	bl	800e6c8 <Gpu_HostCommand_Ext3>
}
 800e79a:	e021      	b.n	800e7e0 <Gpu_81X_SelectSysCLK+0x74>
  else if(GPU_SYSCLK_48M == freq)
 800e79c:	78fb      	ldrb	r3, [r7, #3]
 800e79e:	2b04      	cmp	r3, #4
 800e7a0:	d105      	bne.n	800e7ae <Gpu_81X_SelectSysCLK+0x42>
    Gpu_HostCommand_Ext3(host, (uint32_t)0x61 | (0x40 << 8) | (0x04 << 8));
 800e7a2:	f244 4161 	movw	r1, #17505	; 0x4461
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f7ff ff8e 	bl	800e6c8 <Gpu_HostCommand_Ext3>
}
 800e7ac:	e018      	b.n	800e7e0 <Gpu_81X_SelectSysCLK+0x74>
  else if(GPU_SYSCLK_36M == freq)
 800e7ae:	78fb      	ldrb	r3, [r7, #3]
 800e7b0:	2b03      	cmp	r3, #3
 800e7b2:	d105      	bne.n	800e7c0 <Gpu_81X_SelectSysCLK+0x54>
    Gpu_HostCommand_Ext3(host, (uint32_t)0x61 | (0x03 << 8));
 800e7b4:	f240 3161 	movw	r1, #865	; 0x361
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff ff85 	bl	800e6c8 <Gpu_HostCommand_Ext3>
}
 800e7be:	e00f      	b.n	800e7e0 <Gpu_81X_SelectSysCLK+0x74>
  else if(GPU_SYSCLK_24M == freq)
 800e7c0:	78fb      	ldrb	r3, [r7, #3]
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d105      	bne.n	800e7d2 <Gpu_81X_SelectSysCLK+0x66>
    Gpu_HostCommand_Ext3(host, (uint32_t)0x61 | (0x02 << 8));
 800e7c6:	f240 2161 	movw	r1, #609	; 0x261
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff ff7c 	bl	800e6c8 <Gpu_HostCommand_Ext3>
}
 800e7d0:	e006      	b.n	800e7e0 <Gpu_81X_SelectSysCLK+0x74>
  else if(GPU_SYSCLK_DEFAULT == freq)
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d103      	bne.n	800e7e0 <Gpu_81X_SelectSysCLK+0x74>
    Gpu_HostCommand_Ext3(host, 0x61);
 800e7d8:	2161      	movs	r1, #97	; 0x61
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff ff74 	bl	800e6c8 <Gpu_HostCommand_Ext3>
}
 800e7e0:	bf00      	nop
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <Gpu_Hal_SetSPI>:
 */
int16_t
Gpu_Hal_SetSPI (Gpu_Hal_Context_t      *host,
                GPU_SPI_NUMCHANNELS_T   numchnls,
                GPU_SPI_NUMDUMMYBYTES   numdummy)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	70fb      	strb	r3, [r7, #3]
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	70bb      	strb	r3, [r7, #2]
  uint8_t writebyte = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73fb      	strb	r3, [r7, #15]

  if((numchnls > GPU_SPI_QUAD_CHANNEL) ||
 800e7fc:	78fb      	ldrb	r3, [r7, #3]
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d805      	bhi.n	800e80e <Gpu_Hal_SetSPI+0x26>
 800e802:	78bb      	ldrb	r3, [r7, #2]
 800e804:	2b02      	cmp	r3, #2
 800e806:	d802      	bhi.n	800e80e <Gpu_Hal_SetSPI+0x26>
     (numdummy > GPU_SPI_TWODUMMY) ||
 800e808:	78bb      	ldrb	r3, [r7, #2]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d102      	bne.n	800e814 <Gpu_Hal_SetSPI+0x2c>
     (numdummy < GPU_SPI_ONEDUMMY))
    return -1;
 800e80e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e812:	e015      	b.n	800e840 <Gpu_Hal_SetSPI+0x58>

  /* swicth EVE to multi channel SPI mode */
  writebyte = numchnls;
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	73fb      	strb	r3, [r7, #15]
  if(numdummy == GPU_SPI_TWODUMMY)
 800e818:	78bb      	ldrb	r3, [r7, #2]
 800e81a:	2b02      	cmp	r3, #2
 800e81c:	d103      	bne.n	800e826 <Gpu_Hal_SetSPI+0x3e>
    writebyte |= SPI_TWO_DUMMY_BYTE;
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
 800e820:	f043 0304 	orr.w	r3, r3, #4
 800e824:	73fb      	strb	r3, [r7, #15]
  Gpu_Hal_Wr8(host, REG_SPI_WIDTH, writebyte);
 800e826:	7bfb      	ldrb	r3, [r7, #15]
 800e828:	461a      	mov	r2, r3
 800e82a:	4907      	ldr	r1, [pc, #28]	; (800e848 <Gpu_Hal_SetSPI+0x60>)
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff fee4 	bl	800e5fa <Gpu_Hal_Wr8>

  /* FT81x swicthed to dual/quad mode, now update global HAL context */
  host->spichannel = numchnls;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	78fa      	ldrb	r2, [r7, #3]
 800e836:	761a      	strb	r2, [r3, #24]
  host->spinumdummy = numdummy;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	78ba      	ldrb	r2, [r7, #2]
 800e83c:	765a      	strb	r2, [r3, #25]

  return 0;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	00302188 	.word	0x00302188

0800e84c <Gpu_Hal_Updatecmdfifo>:
 * to REG_CMD_WRITE to indicate GPU to start processing new commands in RAM_CMD
 */
void
Gpu_Hal_Updatecmdfifo (Gpu_Hal_Context_t  *host,
                       uint32_t            count)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  host->cmd_fifo_wp  = (host->cmd_fifo_wp + count) & FIFO_SIZE_MASK;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	891a      	ldrh	r2, [r3, #8]
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	4413      	add	r3, r2
 800e860:	b29b      	uxth	r3, r3
 800e862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e866:	b29a      	uxth	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	811a      	strh	r2, [r3, #8]

  /* 4 byte alignment */
  host->cmd_fifo_wp = (host->cmd_fifo_wp + 3) & FIFO_BYTE_ALIGNMENT_MASK;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	891b      	ldrh	r3, [r3, #8]
 800e870:	3303      	adds	r3, #3
 800e872:	b29a      	uxth	r2, r3
 800e874:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e878:	4013      	ands	r3, r2
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	811a      	strh	r2, [r3, #8]
  Gpu_Hal_Wr16(host,REG_CMD_WRITE,host->cmd_fifo_wp);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	891b      	ldrh	r3, [r3, #8]
 800e884:	461a      	mov	r2, r3
 800e886:	4904      	ldr	r1, [pc, #16]	; (800e898 <Gpu_Hal_Updatecmdfifo+0x4c>)
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7ff fece 	bl	800e62a <Gpu_Hal_Wr16>
}
 800e88e:	bf00      	nop
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	003020fc 	.word	0x003020fc

0800e89c <Gpu_Cmdfifo_Freespace>:
 * Function to compute available freespace in RAM_CMD. RAM_CMD is 4K in size.
 * REG_CMD_READ reg provides command buffer read pointer.
 */
uint16_t
Gpu_Cmdfifo_Freespace (Gpu_Hal_Context_t *host)
{
 800e89c:	b590      	push	{r4, r7, lr}
 800e89e:	b085      	sub	sp, #20
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  uint16_t fullness,retval;

  fullness = (host->cmd_fifo_wp-Gpu_Hal_Rd16(host,REG_CMD_READ))&FIFO_SIZE_MASK;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	891c      	ldrh	r4, [r3, #8]
 800e8a8:	4909      	ldr	r1, [pc, #36]	; (800e8d0 <Gpu_Cmdfifo_Freespace+0x34>)
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff fe8b 	bl	800e5c6 <Gpu_Hal_Rd16>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	1ae3      	subs	r3, r4, r3
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8ba:	81fb      	strh	r3, [r7, #14]
  retval = (CMD_FIFO_SIZE - 4) - fullness;
 800e8bc:	89fb      	ldrh	r3, [r7, #14]
 800e8be:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800e8c2:	330c      	adds	r3, #12
 800e8c4:	81bb      	strh	r3, [r7, #12]

  return (retval);
 800e8c6:	89bb      	ldrh	r3, [r7, #12]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3714      	adds	r7, #20
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd90      	pop	{r4, r7, pc}
 800e8d0:	003020f8 	.word	0x003020f8

0800e8d4 <Gpu_Hal_CheckCmdBuffer>:
 * in RAM_CMD.
 */
void
Gpu_Hal_CheckCmdBuffer (Gpu_Hal_Context_t  *host,
                        uint32_t            count)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  uint16_t getfreespace;
  do
    {
      getfreespace = Gpu_Cmdfifo_Freespace(host);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff ffdc 	bl	800e89c <Gpu_Cmdfifo_Freespace>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	81fb      	strh	r3, [r7, #14]
    } while(getfreespace < count);
 800e8e8:	89fb      	ldrh	r3, [r7, #14]
 800e8ea:	683a      	ldr	r2, [r7, #0]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d8f6      	bhi.n	800e8de <Gpu_Hal_CheckCmdBuffer+0xa>
}
 800e8f0:	bf00      	nop
 800e8f2:	bf00      	nop
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <Gpu_Hal_WaitCmdfifo_empty>:
 * Blocking function call. Blocks until all commands in RAM_CMD are executed and
 * it is fully empty.
 */
void
Gpu_Hal_WaitCmdfifo_empty (Gpu_Hal_Context_t *host)
{
 800e8fc:	b590      	push	{r4, r7, lr}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  while(Gpu_Hal_Rd16(host,REG_CMD_READ) != Gpu_Hal_Rd16(host,REG_CMD_WRITE));
 800e904:	bf00      	nop
 800e906:	490c      	ldr	r1, [pc, #48]	; (800e938 <Gpu_Hal_WaitCmdfifo_empty+0x3c>)
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff fe5c 	bl	800e5c6 <Gpu_Hal_Rd16>
 800e90e:	4603      	mov	r3, r0
 800e910:	461c      	mov	r4, r3
 800e912:	490a      	ldr	r1, [pc, #40]	; (800e93c <Gpu_Hal_WaitCmdfifo_empty+0x40>)
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f7ff fe56 	bl	800e5c6 <Gpu_Hal_Rd16>
 800e91a:	4603      	mov	r3, r0
 800e91c:	429c      	cmp	r4, r3
 800e91e:	d1f2      	bne.n	800e906 <Gpu_Hal_WaitCmdfifo_empty+0xa>

  host->cmd_fifo_wp = Gpu_Hal_Rd16(host,REG_CMD_WRITE);
 800e920:	4906      	ldr	r1, [pc, #24]	; (800e93c <Gpu_Hal_WaitCmdfifo_empty+0x40>)
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff fe4f 	bl	800e5c6 <Gpu_Hal_Rd16>
 800e928:	4603      	mov	r3, r0
 800e92a:	461a      	mov	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	811a      	strh	r2, [r3, #8]
}
 800e930:	bf00      	nop
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	bd90      	pop	{r4, r7, pc}
 800e938:	003020f8 	.word	0x003020f8
 800e93c:	003020fc 	.word	0x003020fc

0800e940 <Gpu_Hal_WrCmd32>:
 * Gpu_Hal_WrCmd32()
 */
void
Gpu_Hal_WrCmd32 (Gpu_Hal_Context_t  *host,
                 uint32_t            cmd)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
  Gpu_Hal_CheckCmdBuffer(host,sizeof(cmd));
 800e94a:	2104      	movs	r1, #4
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7ff ffc1 	bl	800e8d4 <Gpu_Hal_CheckCmdBuffer>
  Gpu_Hal_Wr32(host,RAM_CMD + host->cmd_fifo_wp,cmd);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	891b      	ldrh	r3, [r3, #8]
 800e956:	f503 1342 	add.w	r3, r3, #3178496	; 0x308000
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	4619      	mov	r1, r3
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7ff fe7b 	bl	800e65a <Gpu_Hal_Wr32>
  Gpu_Hal_Updatecmdfifo(host,sizeof(cmd));
 800e964:	2104      	movs	r1, #4
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7ff ff70 	bl	800e84c <Gpu_Hal_Updatecmdfifo>
}
 800e96c:	bf00      	nop
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <Gpu_ClearScreen>:
/*
 * Gpu_ClearScreen()
 */
void
Gpu_ClearScreen (Gpu_Hal_Context_t *host)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  Gpu_Hal_WrMem(host, RAM_DL,(uint8_t *)DLCODE_BOOTUP,sizeof(DLCODE_BOOTUP));
 800e97c:	230c      	movs	r3, #12
 800e97e:	4a07      	ldr	r2, [pc, #28]	; (800e99c <Gpu_ClearScreen+0x28>)
 800e980:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff fecf 	bl	800e728 <Gpu_Hal_WrMem>
  Gpu_Hal_Wr8(host, REG_DLSWAP,DLSWAP_FRAME);
 800e98a:	2202      	movs	r2, #2
 800e98c:	4904      	ldr	r1, [pc, #16]	; (800e9a0 <Gpu_ClearScreen+0x2c>)
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7ff fe33 	bl	800e5fa <Gpu_Hal_Wr8>
}
 800e994:	bf00      	nop
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	0800fc84 	.word	0x0800fc84
 800e9a0:	00302054 	.word	0x00302054

0800e9a4 <platform_init>:
#include "main.h"

/*
 * platform_init()
 */
bool_t platform_init(Gpu_HalInit_t *halinit) {
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]

	return TRUE;
 800e9ac:	2301      	movs	r3, #1
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	370c      	adds	r7, #12
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bc80      	pop	{r7}
 800e9b6:	4770      	bx	lr

0800e9b8 <platform_sleep_ms>:

/*
 * platform_sleep_ms()
 */
void platform_sleep_ms(uint32_t ms) {
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7f7 fe4f 	bl	8006664 <HAL_Delay>
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <platform_spi_init>:

/*
 * platform_spi_init()
 */
bool_t platform_spi_init(Gpu_Hal_Context_t *host) {
 800e9ce:	b480      	push	{r7}
 800e9d0:	b083      	sub	sp, #12
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
		return TRUE;
 800e9d6:	2301      	movs	r3, #1
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bc80      	pop	{r7}
 800e9e0:	4770      	bx	lr
	...

0800e9e4 <platform_spi_send_recv_byte>:

/*
 * platform_spi_send_recv_byte();
 */
uchar8_t platform_spi_send_recv_byte(Gpu_Hal_Context_t *host, uchar8_t data,
		uint32_t opt) {
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b088      	sub	sp, #32
 800e9e8:	af02      	add	r7, sp, #8
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	607a      	str	r2, [r7, #4]
 800e9f0:	72fb      	strb	r3, [r7, #11]
	uint8_t answer;

	HAL_SPI_TransmitReceive(&hspi1, &data, &answer, 1, HAL_MAX_DELAY);
 800e9f2:	f107 0217 	add.w	r2, r7, #23
 800e9f6:	f107 010b 	add.w	r1, r7, #11
 800e9fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	2301      	movs	r3, #1
 800ea02:	4804      	ldr	r0, [pc, #16]	; (800ea14 <platform_spi_send_recv_byte+0x30>)
 800ea04:	f7fa f83a 	bl	8008a7c <HAL_SPI_TransmitReceive>

	return answer;
 800ea08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3718      	adds	r7, #24
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	20000bcc 	.word	0x20000bcc

0800ea18 <platform_spi_send_data>:

/*
 * platform_spi_send_data()
 */
uint16_t platform_spi_send_data(Gpu_Hal_Context_t *host, uchar8_t *data,
		uint16_t size, uint32_t opt) {
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	603b      	str	r3, [r7, #0]
 800ea24:	4613      	mov	r3, r2
 800ea26:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800ea28:	88fa      	ldrh	r2, [r7, #6]
 800ea2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea2e:	68b9      	ldr	r1, [r7, #8]
 800ea30:	4803      	ldr	r0, [pc, #12]	; (800ea40 <platform_spi_send_data+0x28>)
 800ea32:	f7f9 fee7 	bl	8008804 <HAL_SPI_Transmit>

	return size;
 800ea36:	88fb      	ldrh	r3, [r7, #6]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	20000bcc 	.word	0x20000bcc

0800ea44 <platform_gpio_init>:
}

/*
 * platform_gpio_init()
 */
bool_t platform_gpio_init(Gpu_Hal_Context_t *host, gpio_name ngpio) {
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	70fb      	strb	r3, [r7, #3]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800ea50:	4b0f      	ldr	r3, [pc, #60]	; (800ea90 <platform_gpio_init+0x4c>)
 800ea52:	699b      	ldr	r3, [r3, #24]
 800ea54:	4a0e      	ldr	r2, [pc, #56]	; (800ea90 <platform_gpio_init+0x4c>)
 800ea56:	f043 0304 	orr.w	r3, r3, #4
 800ea5a:	6193      	str	r3, [r2, #24]
 800ea5c:	4b0c      	ldr	r3, [pc, #48]	; (800ea90 <platform_gpio_init+0x4c>)
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	f003 0304 	and.w	r3, r3, #4
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	617b      	str	r3, [r7, #20]
	gpio.Pin = ngpio;
 800ea6c:	78fb      	ldrb	r3, [r7, #3]
 800ea6e:	613b      	str	r3, [r7, #16]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800ea70:	2303      	movs	r3, #3
 800ea72:	61fb      	str	r3, [r7, #28]
	gpio.Pull = GPIO_NOPULL;
 800ea74:	2300      	movs	r3, #0
 800ea76:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &gpio);
 800ea78:	f107 0310 	add.w	r3, r7, #16
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4805      	ldr	r0, [pc, #20]	; (800ea94 <platform_gpio_init+0x50>)
 800ea80:	f7f9 f834 	bl	8007aec <HAL_GPIO_Init>

	return TRUE;
 800ea84:	2301      	movs	r3, #1
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3720      	adds	r7, #32
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	40021000 	.word	0x40021000
 800ea94:	40010800 	.word	0x40010800

0800ea98 <platform_gpio_value>:

/*
 * platform_gpio_value()
 */
bool_t platform_gpio_value(Gpu_Hal_Context_t *host, gpio_name ngpio,
		gpio_val vgpio) {
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOA, ngpio, vgpio);
 800eaa8:	78fb      	ldrb	r3, [r7, #3]
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	78ba      	ldrb	r2, [r7, #2]
 800eaae:	4619      	mov	r1, r3
 800eab0:	4803      	ldr	r0, [pc, #12]	; (800eac0 <platform_gpio_value+0x28>)
 800eab2:	f7f9 f99f 	bl	8007df4 <HAL_GPIO_WritePin>
	return TRUE;
 800eab6:	2301      	movs	r3, #1
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	40010800 	.word	0x40010800

0800eac4 <load_color_turquoise>:

extern int ui_color[5];
int popup_color[6];

// Font colors
void load_color_turquoise(void) {
 800eac4:	b580      	push	{r7, lr}
 800eac6:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(0, 206, 209));
 800eac8:	4b03      	ldr	r3, [pc, #12]	; (800ead8 <load_color_turquoise+0x14>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4903      	ldr	r1, [pc, #12]	; (800eadc <load_color_turquoise+0x18>)
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff f89c 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ead4:	bf00      	nop
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	20000bc8 	.word	0x20000bc8
 800eadc:	0400ced1 	.word	0x0400ced1

0800eae0 <load_color_blue>:

void load_color_blue(void) {
 800eae0:	b580      	push	{r7, lr}
 800eae2:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(92, 148, 255));
 800eae4:	4b03      	ldr	r3, [pc, #12]	; (800eaf4 <load_color_blue+0x14>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4903      	ldr	r1, [pc, #12]	; (800eaf8 <load_color_blue+0x18>)
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7ff f88e 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eaf0:	bf00      	nop
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20000bc8 	.word	0x20000bc8
 800eaf8:	045c94ff 	.word	0x045c94ff

0800eafc <load_color_black>:

void load_color_black(void) {
 800eafc:	b580      	push	{r7, lr}
 800eafe:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(0, 0, 0));
 800eb00:	4b04      	ldr	r3, [pc, #16]	; (800eb14 <load_color_black+0x18>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff f87f 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eb0e:	bf00      	nop
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20000bc8 	.word	0x20000bc8

0800eb18 <load_color_orange>:

void load_color_orange(void) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(255, 153, 0));
 800eb1c:	4b03      	ldr	r3, [pc, #12]	; (800eb2c <load_color_orange+0x14>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4903      	ldr	r1, [pc, #12]	; (800eb30 <load_color_orange+0x18>)
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7ff f872 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eb28:	bf00      	nop
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	20000bc8 	.word	0x20000bc8
 800eb30:	04ff9900 	.word	0x04ff9900

0800eb34 <load_color_sap_green>:

void load_color_sap_green(void) {
 800eb34:	b580      	push	{r7, lr}
 800eb36:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(0, 160, 47));
 800eb38:	4b03      	ldr	r3, [pc, #12]	; (800eb48 <load_color_sap_green+0x14>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4903      	ldr	r1, [pc, #12]	; (800eb4c <load_color_sap_green+0x18>)
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff f864 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eb44:	bf00      	nop
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	20000bc8 	.word	0x20000bc8
 800eb4c:	0400a02f 	.word	0x0400a02f

0800eb50 <load_color_red>:

void load_color_red(void) {
 800eb50:	b580      	push	{r7, lr}
 800eb52:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(255, 100, 100));
 800eb54:	4b03      	ldr	r3, [pc, #12]	; (800eb64 <load_color_red+0x14>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4903      	ldr	r1, [pc, #12]	; (800eb68 <load_color_red+0x18>)
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7ff f856 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eb60:	bf00      	nop
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	20000bc8 	.word	0x20000bc8
 800eb68:	04ff6464 	.word	0x04ff6464

0800eb6c <load_text_color>:

// Data color on UI
void load_text_color(void) {
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	af00      	add	r7, sp, #0
//	App_WrCoCmd_Buffer(phost, COLOR_RGB(ui_color[1][0], ui_color[1][1], ui_color[1][2]));
	App_WrCoCmd_Buffer(phost, ui_color[1]);
 800eb70:	4b04      	ldr	r3, [pc, #16]	; (800eb84 <load_text_color+0x18>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a04      	ldr	r2, [pc, #16]	; (800eb88 <load_text_color+0x1c>)
 800eb76:	6852      	ldr	r2, [r2, #4]
 800eb78:	4611      	mov	r1, r2
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff f846 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eb80:	bf00      	nop
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	20000bc8 	.word	0x20000bc8
 800eb88:	20000c50 	.word	0x20000c50

0800eb8c <load_color_lightMode_gray>:
// Sidelight Color
void load_sidelight_color(void) {
	App_WrCoCmd_Buffer(phost, COLOR_RGB(0, 206, 209));
}

void load_color_lightMode_gray(void) {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(184, 184, 184));
 800eb90:	4b03      	ldr	r3, [pc, #12]	; (800eba0 <load_color_lightMode_gray+0x14>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4903      	ldr	r1, [pc, #12]	; (800eba4 <load_color_lightMode_gray+0x18>)
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff f838 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eb9c:	bf00      	nop
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	20000bc8 	.word	0x20000bc8
 800eba4:	04b8b8b8 	.word	0x04b8b8b8

0800eba8 <load_color_white>:

void load_color_white(void) {
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	af00      	add	r7, sp, #0
//	App_WrCoCmd_Buffer(phost, COLOR_VAL(0xffffff));
	App_WrCoCmd_Buffer(phost, COLOR_RGB(255, 255, 255));
 800ebac:	4b04      	ldr	r3, [pc, #16]	; (800ebc0 <load_color_white+0x18>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f06f 417b 	mvn.w	r1, #4211081216	; 0xfb000000
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7ff f829 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ebba:	bf00      	nop
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	20000bc8 	.word	0x20000bc8

0800ebc4 <set_background_color_wallpaper>:
	App_WrCoCmd_Buffer(phost, ui_color[0]);
//	App_WrCoCmd_Buffer(phost, CLEAR_COLOR_RGB(ui_color[0][0], ui_color[0][1], ui_color[0][2]));
	App_WrCoCmd_Buffer(phost, CLEAR(1, 1, 1));
}

void set_background_color_wallpaper(void) {
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, ui_color[3]);
 800ebc8:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <set_background_color_wallpaper+0x24>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a07      	ldr	r2, [pc, #28]	; (800ebec <set_background_color_wallpaper+0x28>)
 800ebce:	68d2      	ldr	r2, [r2, #12]
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7ff f81a 	bl	800dc0c <App_WrCoCmd_Buffer>
//	App_WrCoCmd_Buffer(phost, COLOR_RGB(255, 255, 255));
//	App_WrCoCmd_Buffer(phost, COLOR_RGB(ui_color[3][0], ui_color[3][1], ui_color[3][2]));
	App_WrCoCmd_Buffer(phost, CLEAR(1, 1, 1));
 800ebd8:	4b03      	ldr	r3, [pc, #12]	; (800ebe8 <set_background_color_wallpaper+0x24>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4904      	ldr	r1, [pc, #16]	; (800ebf0 <set_background_color_wallpaper+0x2c>)
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7ff f814 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ebe4:	bf00      	nop
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	20000bc8 	.word	0x20000bc8
 800ebec:	20000c50 	.word	0x20000c50
 800ebf0:	26000007 	.word	0x26000007

0800ebf4 <background_color_black>:
void background_color_white(void) {
	App_WrCoCmd_Buffer(phost, CLEAR_COLOR_RGB(255, 255, 255));
	App_WrCoCmd_Buffer(phost, CLEAR(1, 1, 1));
}

void background_color_black(void) {
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(200, 100, 10));
 800ebf8:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <background_color_black+0x20>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4906      	ldr	r1, [pc, #24]	; (800ec18 <background_color_black+0x24>)
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7ff f804 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, CLEAR(1, 1, 1));
 800ec04:	4b03      	ldr	r3, [pc, #12]	; (800ec14 <background_color_black+0x20>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4904      	ldr	r1, [pc, #16]	; (800ec1c <background_color_black+0x28>)
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fe fffe 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ec10:	bf00      	nop
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20000bc8 	.word	0x20000bc8
 800ec18:	04c8640a 	.word	0x04c8640a
 800ec1c:	26000007 	.word	0x26000007

0800ec20 <background_color_grey_118>:

void background_color_grey_118(void) {
 800ec20:	b580      	push	{r7, lr}
 800ec22:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(118, 118, 118));
 800ec24:	4b06      	ldr	r3, [pc, #24]	; (800ec40 <background_color_grey_118+0x20>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4906      	ldr	r1, [pc, #24]	; (800ec44 <background_color_grey_118+0x24>)
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fe ffee 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, CLEAR(1, 1, 1));
 800ec30:	4b03      	ldr	r3, [pc, #12]	; (800ec40 <background_color_grey_118+0x20>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4904      	ldr	r1, [pc, #16]	; (800ec48 <background_color_grey_118+0x28>)
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe ffe8 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ec3c:	bf00      	nop
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	20000bc8 	.word	0x20000bc8
 800ec44:	04767676 	.word	0x04767676
 800ec48:	26000007 	.word	0x26000007

0800ec4c <load_color_lightMode_grey_137>:

void load_color_darkMode_gray(void) {
	App_WrCoCmd_Buffer(phost, COLOR_RGB(0, 0, 0));
}

void load_color_lightMode_grey_137(void) {
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(137, 137, 137));
 800ec50:	4b03      	ldr	r3, [pc, #12]	; (800ec60 <load_color_lightMode_grey_137+0x14>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4903      	ldr	r1, [pc, #12]	; (800ec64 <load_color_lightMode_grey_137+0x18>)
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fe ffd8 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ec5c:	bf00      	nop
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	20000bc8 	.word	0x20000bc8
 800ec64:	04898989 	.word	0x04898989

0800ec68 <load_color_lightMode_grey_196>:

void load_color_lightMode_grey_196() {
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(196, 196, 196));
 800ec6c:	4b03      	ldr	r3, [pc, #12]	; (800ec7c <load_color_lightMode_grey_196+0x14>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4903      	ldr	r1, [pc, #12]	; (800ec80 <load_color_lightMode_grey_196+0x18>)
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fe ffca 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ec78:	bf00      	nop
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	20000bc8 	.word	0x20000bc8
 800ec80:	04c4c4c4 	.word	0x04c4c4c4

0800ec84 <load_color_lightMode_grey_155>:

void load_color_lightMode_grey_155() {
 800ec84:	b580      	push	{r7, lr}
 800ec86:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(155, 155, 155));
 800ec88:	4b03      	ldr	r3, [pc, #12]	; (800ec98 <load_color_lightMode_grey_155+0x14>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4903      	ldr	r1, [pc, #12]	; (800ec9c <load_color_lightMode_grey_155+0x18>)
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe ffbc 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ec94:	bf00      	nop
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	20000bc8 	.word	0x20000bc8
 800ec9c:	049b9b9b 	.word	0x049b9b9b

0800eca0 <load_color_light_green>:

void load_color_light_green(){
 800eca0:	b580      	push	{r7, lr}
 800eca2:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(0, 217, 22));
 800eca4:	4b03      	ldr	r3, [pc, #12]	; (800ecb4 <load_color_light_green+0x14>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4903      	ldr	r1, [pc, #12]	; (800ecb8 <load_color_light_green+0x18>)
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fe ffae 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ecb0:	bf00      	nop
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	20000bc8 	.word	0x20000bc8
 800ecb8:	0400d916 	.word	0x0400d916

0800ecbc <load_color_dark_green>:

void load_color_dark_green(){
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(0, 185, 55));
 800ecc0:	4b03      	ldr	r3, [pc, #12]	; (800ecd0 <load_color_dark_green+0x14>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4903      	ldr	r1, [pc, #12]	; (800ecd4 <load_color_dark_green+0x18>)
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe ffa0 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800eccc:	bf00      	nop
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	20000bc8 	.word	0x20000bc8
 800ecd4:	0400b937 	.word	0x0400b937

0800ecd8 <load_color_grey_30>:

void load_color_grey_30(){
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(30, 30, 30));
 800ecdc:	4b03      	ldr	r3, [pc, #12]	; (800ecec <load_color_grey_30+0x14>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4903      	ldr	r1, [pc, #12]	; (800ecf0 <load_color_grey_30+0x18>)
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fe ff92 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ece8:	bf00      	nop
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	20000bc8 	.word	0x20000bc8
 800ecf0:	041e1e1e 	.word	0x041e1e1e

0800ecf4 <r2p>:

void r2p(void){
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, COLOR_RGB(r_value, g_value, b_value));
 800ecf8:	4b0b      	ldr	r3, [pc, #44]	; (800ed28 <r2p+0x34>)
 800ecfa:	6818      	ldr	r0, [r3, #0]
 800ecfc:	4b0b      	ldr	r3, [pc, #44]	; (800ed2c <r2p+0x38>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	041b      	lsls	r3, r3, #16
 800ed02:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 800ed06:	4b0a      	ldr	r3, [pc, #40]	; (800ed30 <r2p+0x3c>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	021b      	lsls	r3, r3, #8
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	431a      	orrs	r2, r3
 800ed10:	4b08      	ldr	r3, [pc, #32]	; (800ed34 <r2p+0x40>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	4313      	orrs	r3, r2
 800ed18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	f7fe ff75 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800ed22:	bf00      	nop
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20000bc8 	.word	0x20000bc8
 800ed2c:	20000494 	.word	0x20000494
 800ed30:	200007f4 	.word	0x200007f4
 800ed34:	2000081c 	.word	0x2000081c

0800ed38 <set_darkmode_ui_design_elements>:

void set_darkmode_ui_design_elements(void) {
 800ed38:	b480      	push	{r7}
 800ed3a:	af00      	add	r7, sp, #0

	// Background color
//	ui_color[0][0] = 35;
//	ui_color[0][1] = 35;
//	ui_color[0][2] = 35;
	ui_color[0] = CLEAR_COLOR_VAL(0x232323);
 800ed3c:	4b0a      	ldr	r3, [pc, #40]	; (800ed68 <set_darkmode_ui_design_elements+0x30>)
 800ed3e:	4a0b      	ldr	r2, [pc, #44]	; (800ed6c <set_darkmode_ui_design_elements+0x34>)
 800ed40:	601a      	str	r2, [r3, #0]

//	(ui_color[0] = (4UL<<24)|(((23)&255UL)<<16)|(((23)&255UL)<<8)|(((23)&255UL)<<0));

	// Text color
	ui_color[1] = COLOR_VAL(0xffffff);
 800ed42:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <set_darkmode_ui_design_elements+0x30>)
 800ed44:	f06f 427b 	mvn.w	r2, #4211081216	; 0xfb000000
 800ed48:	605a      	str	r2, [r3, #4]

	// Mode Value
//	ui_color[2][0] = 255;
//	ui_color[2][1] = 255;
//	ui_color[2][2] = 255;
	ui_color[2] = COLOR_VAL(0xffffff);
 800ed4a:	4b07      	ldr	r3, [pc, #28]	; (800ed68 <set_darkmode_ui_design_elements+0x30>)
 800ed4c:	f06f 427b 	mvn.w	r2, #4211081216	; 0xfb000000
 800ed50:	609a      	str	r2, [r3, #8]

	// Background Wallpaper color
//	ui_color[3][0] = 35;
//	ui_color[3][1] = 35;
//	ui_color[3][2] = 35;
	ui_color[3] = COLOR_VAL(0x232323);
 800ed52:	4b05      	ldr	r3, [pc, #20]	; (800ed68 <set_darkmode_ui_design_elements+0x30>)
 800ed54:	4a06      	ldr	r2, [pc, #24]	; (800ed70 <set_darkmode_ui_design_elements+0x38>)
 800ed56:	60da      	str	r2, [r3, #12]

	// Transparent film color
//	ui_color[4][0] = 200;
//	ui_color[4][1] = 200;
//	ui_color[4][2] = 200;
	ui_color[4] = COLOR_VAL(0xC8C8C8);
 800ed58:	4b03      	ldr	r3, [pc, #12]	; (800ed68 <set_darkmode_ui_design_elements+0x30>)
 800ed5a:	4a06      	ldr	r2, [pc, #24]	; (800ed74 <set_darkmode_ui_design_elements+0x3c>)
 800ed5c:	611a      	str	r2, [r3, #16]



//	// Transparency level [0 -> 255]
//	ui_color[5][0] = 150;
}
 800ed5e:	bf00      	nop
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bc80      	pop	{r7}
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	20000c50 	.word	0x20000c50
 800ed6c:	02232323 	.word	0x02232323
 800ed70:	04232323 	.word	0x04232323
 800ed74:	04c8c8c8 	.word	0x04c8c8c8

0800ed78 <set_lightmode_ui_design_elements>:

void set_lightmode_ui_design_elements(void) {
 800ed78:	b480      	push	{r7}
 800ed7a:	af00      	add	r7, sp, #0

	// Background color
//	ui_color[0][0] = 255;
//	ui_color[0][1] = 255;
//	ui_color[0][2] = 255;
	ui_color[0] = CLEAR_COLOR_VAL(0xffffff);
 800ed7c:	4b0b      	ldr	r3, [pc, #44]	; (800edac <set_lightmode_ui_design_elements+0x34>)
 800ed7e:	f06f 427d 	mvn.w	r2, #4244635648	; 0xfd000000
 800ed82:	601a      	str	r2, [r3, #0]

	// Text color
//	ui_color[1][0] = 0;
//	ui_color[1][1] = 0;
//	ui_color[1][2] = 0;
	ui_color[1] = COLOR_VAL(0x000000);
 800ed84:	4b09      	ldr	r3, [pc, #36]	; (800edac <set_lightmode_ui_design_elements+0x34>)
 800ed86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ed8a:	605a      	str	r2, [r3, #4]

	// Mode Value
//	ui_color[2][0] = 0;
//	ui_color[2][1] = 206;
//	ui_color[2][2] = 209;
	ui_color[2] = COLOR_VAL(0x00CED1);
 800ed8c:	4b07      	ldr	r3, [pc, #28]	; (800edac <set_lightmode_ui_design_elements+0x34>)
 800ed8e:	4a08      	ldr	r2, [pc, #32]	; (800edb0 <set_lightmode_ui_design_elements+0x38>)
 800ed90:	609a      	str	r2, [r3, #8]

	// Background Wallpaper color
//	ui_color[3][0] = 255;
//	ui_color[3][1] = 255;
//	ui_color[3][2] = 255;
	ui_color[3] = COLOR_VAL(0xffffff);
 800ed92:	4b06      	ldr	r3, [pc, #24]	; (800edac <set_lightmode_ui_design_elements+0x34>)
 800ed94:	f06f 427b 	mvn.w	r2, #4211081216	; 0xfb000000
 800ed98:	60da      	str	r2, [r3, #12]

	// Transparent film color
//	ui_color[4][0] = 255;
//	ui_color[4][1] = 255;
//	ui_color[4][2] = 255;
	ui_color[4] = COLOR_VAL(0xffffff);
 800ed9a:	4b04      	ldr	r3, [pc, #16]	; (800edac <set_lightmode_ui_design_elements+0x34>)
 800ed9c:	f06f 427b 	mvn.w	r2, #4211081216	; 0xfb000000
 800eda0:	611a      	str	r2, [r3, #16]

//	// Transparency level [0 -> 255]
//	ui_color[5][0] = 200;
}
 800eda2:	bf00      	nop
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bc80      	pop	{r7}
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	20000c50 	.word	0x20000c50
 800edb0:	0400ced1 	.word	0x0400ced1

0800edb4 <set_ui_mode>:

void set_ui_mode(void) {
 800edb4:	b580      	push	{r7, lr}
 800edb6:	af00      	add	r7, sp, #0

	switch (ui_mode) {
 800edb8:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <set_ui_mode+0x2c>)
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d002      	beq.n	800edc6 <set_ui_mode+0x12>
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d005      	beq.n	800edd0 <set_ui_mode+0x1c>
			// Dark Mode
			set_darkmode_ui_design_elements();
			set_dark_mode_pop_ui_elements_color_elements();
			break;
	}
}
 800edc4:	e009      	b.n	800edda <set_ui_mode+0x26>
			set_lightmode_ui_design_elements();
 800edc6:	f7ff ffd7 	bl	800ed78 <set_lightmode_ui_design_elements>
			set_light_mode_pop_ui_elements_color_elements();
 800edca:	f000 f80b 	bl	800ede4 <set_light_mode_pop_ui_elements_color_elements>
			break;
 800edce:	e004      	b.n	800edda <set_ui_mode+0x26>
			set_darkmode_ui_design_elements();
 800edd0:	f7ff ffb2 	bl	800ed38 <set_darkmode_ui_design_elements>
			set_dark_mode_pop_ui_elements_color_elements();
 800edd4:	f000 f82a 	bl	800ee2c <set_dark_mode_pop_ui_elements_color_elements>
			break;
 800edd8:	bf00      	nop
}
 800edda:	bf00      	nop
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	200009a4 	.word	0x200009a4

0800ede4 <set_light_mode_pop_ui_elements_color_elements>:
	App_WrCoCmd_Buffer(phost, ui_color[4]);
//	App_WrCoCmd_Buffer(phost, COLOR_RGB(ui_color[4][0], ui_color[4][1], ui_color[4][2]));
	App_WrCoCmd_Buffer(phost, CLEAR(1, 1, 1));
}

void set_light_mode_pop_ui_elements_color_elements(void){
 800ede4:	b480      	push	{r7}
 800ede6:	af00      	add	r7, sp, #0

	// pop-up wallpaper color
//	popup_color[0][0] = 210;
//	popup_color[0][1] = 210;
//	popup_color[0][2] = 210;
	popup_color[0] = COLOR_VAL(0xD2D2D2);
 800ede8:	4b0b      	ldr	r3, [pc, #44]	; (800ee18 <set_light_mode_pop_ui_elements_color_elements+0x34>)
 800edea:	4a0c      	ldr	r2, [pc, #48]	; (800ee1c <set_light_mode_pop_ui_elements_color_elements+0x38>)
 800edec:	601a      	str	r2, [r3, #0]

	// pop-up heading color
//	popup_color[1][0] = 0;
//	popup_color[1][1] = 0;
//	popup_color[1][2] = 0;
	popup_color[1] = COLOR_VAL(0x000000);
 800edee:	4b0a      	ldr	r3, [pc, #40]	; (800ee18 <set_light_mode_pop_ui_elements_color_elements+0x34>)
 800edf0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800edf4:	605a      	str	r2, [r3, #4]

	// pop-up content color
//	popup_color[2][0] = 0;
//	popup_color[2][1] = 0;
//	popup_color[2][2] = 0;
	popup_color[2] = COLOR_VAL(0x000000);
 800edf6:	4b08      	ldr	r3, [pc, #32]	; (800ee18 <set_light_mode_pop_ui_elements_color_elements+0x34>)
 800edf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800edfc:	609a      	str	r2, [r3, #8]

	// divider line color
//	popup_color[3][0] = 150;
//	popup_color[3][1] = 150;
//	popup_color[3][2] = 150;
	popup_color[3] = COLOR_VAL(0x969696);
 800edfe:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <set_light_mode_pop_ui_elements_color_elements+0x34>)
 800ee00:	4a07      	ldr	r2, [pc, #28]	; (800ee20 <set_light_mode_pop_ui_elements_color_elements+0x3c>)
 800ee02:	60da      	str	r2, [r3, #12]

	// transparent film color
//	popup_color[4][0] = 90;
//	popup_color[4][1] = 90;
//	popup_color[4][2] = 90;
	popup_color[4] = COLOR_VAL(0x5A5A5A);
 800ee04:	4b04      	ldr	r3, [pc, #16]	; (800ee18 <set_light_mode_pop_ui_elements_color_elements+0x34>)
 800ee06:	4a07      	ldr	r2, [pc, #28]	; (800ee24 <set_light_mode_pop_ui_elements_color_elements+0x40>)
 800ee08:	611a      	str	r2, [r3, #16]

	// transparent film color for kill switch film
//	popup_color[5][0] = 64;
//	popup_color[5][1] = 64;
//	popup_color[5][2] = 64;
	popup_color[5] = COLOR_VAL(0x404040);
 800ee0a:	4b03      	ldr	r3, [pc, #12]	; (800ee18 <set_light_mode_pop_ui_elements_color_elements+0x34>)
 800ee0c:	4a06      	ldr	r2, [pc, #24]	; (800ee28 <set_light_mode_pop_ui_elements_color_elements+0x44>)
 800ee0e:	615a      	str	r2, [r3, #20]



}
 800ee10:	bf00      	nop
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bc80      	pop	{r7}
 800ee16:	4770      	bx	lr
 800ee18:	20000c6c 	.word	0x20000c6c
 800ee1c:	04d2d2d2 	.word	0x04d2d2d2
 800ee20:	04969696 	.word	0x04969696
 800ee24:	045a5a5a 	.word	0x045a5a5a
 800ee28:	04404040 	.word	0x04404040

0800ee2c <set_dark_mode_pop_ui_elements_color_elements>:

void set_dark_mode_pop_ui_elements_color_elements(void){
 800ee2c:	b480      	push	{r7}
 800ee2e:	af00      	add	r7, sp, #0

	// pop-up wallpaper color
//	popup_color[0][0] = 50;
//	popup_color[0][1] = 50;
//	popup_color[0][2] = 50;
	popup_color[0] = COLOR_VAL(0x323232);
 800ee30:	4b0b      	ldr	r3, [pc, #44]	; (800ee60 <set_dark_mode_pop_ui_elements_color_elements+0x34>)
 800ee32:	4a0c      	ldr	r2, [pc, #48]	; (800ee64 <set_dark_mode_pop_ui_elements_color_elements+0x38>)
 800ee34:	601a      	str	r2, [r3, #0]

	// pop-up heading color
//	popup_color[1][0] = 200;
//	popup_color[1][1] = 200;
//	popup_color[1][2] = 200;
	popup_color[1] = COLOR_VAL(0x404040);
 800ee36:	4b0a      	ldr	r3, [pc, #40]	; (800ee60 <set_dark_mode_pop_ui_elements_color_elements+0x34>)
 800ee38:	4a0b      	ldr	r2, [pc, #44]	; (800ee68 <set_dark_mode_pop_ui_elements_color_elements+0x3c>)
 800ee3a:	605a      	str	r2, [r3, #4]

	// pop-up content color
//	popup_color[2][0] = 180;
//	popup_color[2][1] = 180;
//	popup_color[2][2] = 180;
	popup_color[2] = COLOR_VAL(0xB4B4B4);
 800ee3c:	4b08      	ldr	r3, [pc, #32]	; (800ee60 <set_dark_mode_pop_ui_elements_color_elements+0x34>)
 800ee3e:	4a0b      	ldr	r2, [pc, #44]	; (800ee6c <set_dark_mode_pop_ui_elements_color_elements+0x40>)
 800ee40:	609a      	str	r2, [r3, #8]

	// divider line color
//	popup_color[3][0] = 150;
//	popup_color[3][1] = 150;
//	popup_color[3][2] = 150;
	popup_color[3] = COLOR_VAL(0x969696);
 800ee42:	4b07      	ldr	r3, [pc, #28]	; (800ee60 <set_dark_mode_pop_ui_elements_color_elements+0x34>)
 800ee44:	4a0a      	ldr	r2, [pc, #40]	; (800ee70 <set_dark_mode_pop_ui_elements_color_elements+0x44>)
 800ee46:	60da      	str	r2, [r3, #12]

	// transparent film color
//	popup_color[4][0] = 0;
//	popup_color[4][1] = 0;
//	popup_color[4][2] = 0;
	popup_color[4] = COLOR_VAL(0x000000);
 800ee48:	4b05      	ldr	r3, [pc, #20]	; (800ee60 <set_dark_mode_pop_ui_elements_color_elements+0x34>)
 800ee4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ee4e:	611a      	str	r2, [r3, #16]
	// transparent film color for kill switch film
//	popup_color[5][0] = 64;
//	popup_color[5][1] = 64;
//	popup_color[5][2] = 64;
//	popup_color[5] = COLOR_VAL(0x000000);
	popup_color[5] = COLOR_VAL(0x404040);
 800ee50:	4b03      	ldr	r3, [pc, #12]	; (800ee60 <set_dark_mode_pop_ui_elements_color_elements+0x34>)
 800ee52:	4a05      	ldr	r2, [pc, #20]	; (800ee68 <set_dark_mode_pop_ui_elements_color_elements+0x3c>)
 800ee54:	615a      	str	r2, [r3, #20]

}
 800ee56:	bf00      	nop
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bc80      	pop	{r7}
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	20000c6c 	.word	0x20000c6c
 800ee64:	04323232 	.word	0x04323232
 800ee68:	04404040 	.word	0x04404040
 800ee6c:	04b4b4b4 	.word	0x04b4b4b4
 800ee70:	04969696 	.word	0x04969696

0800ee74 <Barlow_bold_12>:
// Load local libraries
#include "graphical_operations.h"
#include "fonts.h"

/* Font Addresses */
void Barlow_bold_12(void) {
 800ee74:	b580      	push	{r7, lr}
 800ee76:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 4096, 192);
 800ee78:	4b0b      	ldr	r3, [pc, #44]	; (800eea8 <Barlow_bold_12+0x34>)
 800ee7a:	6818      	ldr	r0, [r3, #0]
 800ee7c:	23c0      	movs	r3, #192	; 0xc0
 800ee7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ee82:	2100      	movs	r1, #0
 800ee84:	f7ff f98b 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800ee88:	4b07      	ldr	r3, [pc, #28]	; (800eea8 <Barlow_bold_12+0x34>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7ff fd35 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800ee92:	4b05      	ldr	r3, [pc, #20]	; (800eea8 <Barlow_bold_12+0x34>)
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	4b05      	ldr	r3, [pc, #20]	; (800eeac <Barlow_bold_12+0x38>)
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	2101      	movs	r1, #1
 800ee9e:	f7ff f95a 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800eea2:	bf00      	nop
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	20000bc8 	.word	0x20000bc8
 800eeac:	20000c24 	.word	0x20000c24

0800eeb0 <Barlow_bold_18>:

void Barlow_bold_18(void) {
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 20672, 192);
 800eeb4:	4b0b      	ldr	r3, [pc, #44]	; (800eee4 <Barlow_bold_18+0x34>)
 800eeb6:	6818      	ldr	r0, [r3, #0]
 800eeb8:	23c0      	movs	r3, #192	; 0xc0
 800eeba:	f245 02c0 	movw	r2, #20672	; 0x50c0
 800eebe:	2100      	movs	r1, #0
 800eec0:	f7ff f96d 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800eec4:	4b07      	ldr	r3, [pc, #28]	; (800eee4 <Barlow_bold_18+0x34>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7ff fd17 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800eece:	4b05      	ldr	r3, [pc, #20]	; (800eee4 <Barlow_bold_18+0x34>)
 800eed0:	6818      	ldr	r0, [r3, #0]
 800eed2:	4b05      	ldr	r3, [pc, #20]	; (800eee8 <Barlow_bold_18+0x38>)
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	2300      	movs	r3, #0
 800eed8:	2101      	movs	r1, #1
 800eeda:	f7ff f93c 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800eede:	bf00      	nop
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	20000bc8 	.word	0x20000bc8
 800eee8:	20000c24 	.word	0x20000c24

0800eeec <Barlow_bold_20>:

void Barlow_bold_20(void) {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 53632, 192);
 800eef0:	4b0b      	ldr	r3, [pc, #44]	; (800ef20 <Barlow_bold_20+0x34>)
 800eef2:	6818      	ldr	r0, [r3, #0]
 800eef4:	23c0      	movs	r3, #192	; 0xc0
 800eef6:	f24d 1280 	movw	r2, #53632	; 0xd180
 800eefa:	2100      	movs	r1, #0
 800eefc:	f7ff f94f 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800ef00:	4b07      	ldr	r3, [pc, #28]	; (800ef20 <Barlow_bold_20+0x34>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7ff fcf9 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800ef0a:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <Barlow_bold_20+0x34>)
 800ef0c:	6818      	ldr	r0, [r3, #0]
 800ef0e:	4b05      	ldr	r3, [pc, #20]	; (800ef24 <Barlow_bold_20+0x38>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	2300      	movs	r3, #0
 800ef14:	2101      	movs	r1, #1
 800ef16:	f7ff f91e 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800ef1a:	bf00      	nop
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	20000bc8 	.word	0x20000bc8
 800ef24:	20000c24 	.word	0x20000c24

0800ef28 <Barlow_bold_32>:

void Barlow_bold_32(void) {
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 103168, 192);
 800ef2c:	4b0a      	ldr	r3, [pc, #40]	; (800ef58 <Barlow_bold_32+0x30>)
 800ef2e:	6818      	ldr	r0, [r3, #0]
 800ef30:	23c0      	movs	r3, #192	; 0xc0
 800ef32:	4a0a      	ldr	r2, [pc, #40]	; (800ef5c <Barlow_bold_32+0x34>)
 800ef34:	2100      	movs	r1, #0
 800ef36:	f7ff f932 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800ef3a:	4b07      	ldr	r3, [pc, #28]	; (800ef58 <Barlow_bold_32+0x30>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7ff fcdc 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800ef44:	4b04      	ldr	r3, [pc, #16]	; (800ef58 <Barlow_bold_32+0x30>)
 800ef46:	6818      	ldr	r0, [r3, #0]
 800ef48:	4b05      	ldr	r3, [pc, #20]	; (800ef60 <Barlow_bold_32+0x38>)
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	2101      	movs	r1, #1
 800ef50:	f7ff f901 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800ef54:	bf00      	nop
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	20000bc8 	.word	0x20000bc8
 800ef5c:	00019300 	.word	0x00019300
 800ef60:	20000c24 	.word	0x20000c24

0800ef64 <Barlow_bold_24>:

void Barlow_bold_24(void) {
 800ef64:	b580      	push	{r7, lr}
 800ef66:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 78400, 192);
 800ef68:	4b0a      	ldr	r3, [pc, #40]	; (800ef94 <Barlow_bold_24+0x30>)
 800ef6a:	6818      	ldr	r0, [r3, #0]
 800ef6c:	23c0      	movs	r3, #192	; 0xc0
 800ef6e:	4a0a      	ldr	r2, [pc, #40]	; (800ef98 <Barlow_bold_24+0x34>)
 800ef70:	2100      	movs	r1, #0
 800ef72:	f7ff f914 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800ef76:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <Barlow_bold_24+0x30>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7ff fcbe 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800ef80:	4b04      	ldr	r3, [pc, #16]	; (800ef94 <Barlow_bold_24+0x30>)
 800ef82:	6818      	ldr	r0, [r3, #0]
 800ef84:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <Barlow_bold_24+0x38>)
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	f7ff f8e3 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800ef90:	bf00      	nop
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	20000bc8 	.word	0x20000bc8
 800ef98:	00013240 	.word	0x00013240
 800ef9c:	20000c24 	.word	0x20000c24

0800efa0 <Barlow_extrabold_24>:
	Gpu_CoCmd_FlashRead(phost, RAM_G, 136128, 192);
	Gpu_Hal_WaitCmdfifo_empty(phost);
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
}

void Barlow_extrabold_24(void) {
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 160896, 192);
 800efa4:	4b0a      	ldr	r3, [pc, #40]	; (800efd0 <Barlow_extrabold_24+0x30>)
 800efa6:	6818      	ldr	r0, [r3, #0]
 800efa8:	23c0      	movs	r3, #192	; 0xc0
 800efaa:	4a0a      	ldr	r2, [pc, #40]	; (800efd4 <Barlow_extrabold_24+0x34>)
 800efac:	2100      	movs	r1, #0
 800efae:	f7ff f8f6 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800efb2:	4b07      	ldr	r3, [pc, #28]	; (800efd0 <Barlow_extrabold_24+0x30>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff fca0 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800efbc:	4b04      	ldr	r3, [pc, #16]	; (800efd0 <Barlow_extrabold_24+0x30>)
 800efbe:	6818      	ldr	r0, [r3, #0]
 800efc0:	4b05      	ldr	r3, [pc, #20]	; (800efd8 <Barlow_extrabold_24+0x38>)
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	2300      	movs	r3, #0
 800efc6:	2101      	movs	r1, #1
 800efc8:	f7ff f8c5 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800efcc:	bf00      	nop
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	20000bc8 	.word	0x20000bc8
 800efd4:	00027480 	.word	0x00027480
 800efd8:	20000c24 	.word	0x20000c24

0800efdc <Barlow_extrabold_28>:

void Barlow_extrabold_28(void) {
 800efdc:	b580      	push	{r7, lr}
 800efde:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 185664, 192);
 800efe0:	4b0a      	ldr	r3, [pc, #40]	; (800f00c <Barlow_extrabold_28+0x30>)
 800efe2:	6818      	ldr	r0, [r3, #0]
 800efe4:	23c0      	movs	r3, #192	; 0xc0
 800efe6:	4a0a      	ldr	r2, [pc, #40]	; (800f010 <Barlow_extrabold_28+0x34>)
 800efe8:	2100      	movs	r1, #0
 800efea:	f7ff f8d8 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800efee:	4b07      	ldr	r3, [pc, #28]	; (800f00c <Barlow_extrabold_28+0x30>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7ff fc82 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800eff8:	4b04      	ldr	r3, [pc, #16]	; (800f00c <Barlow_extrabold_28+0x30>)
 800effa:	6818      	ldr	r0, [r3, #0]
 800effc:	4b05      	ldr	r3, [pc, #20]	; (800f014 <Barlow_extrabold_28+0x38>)
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	2300      	movs	r3, #0
 800f002:	2101      	movs	r1, #1
 800f004:	f7ff f8a7 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f008:	bf00      	nop
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	20000bc8 	.word	0x20000bc8
 800f010:	0002d540 	.word	0x0002d540
 800f014:	20000c24 	.word	0x20000c24

0800f018 <Barlow_extrabold_40>:

void Barlow_extrabold_40(void) {
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 1088832, 192);
 800f01c:	4b0a      	ldr	r3, [pc, #40]	; (800f048 <Barlow_extrabold_40+0x30>)
 800f01e:	6818      	ldr	r0, [r3, #0]
 800f020:	23c0      	movs	r3, #192	; 0xc0
 800f022:	4a0a      	ldr	r2, [pc, #40]	; (800f04c <Barlow_extrabold_40+0x34>)
 800f024:	2100      	movs	r1, #0
 800f026:	f7ff f8ba 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f02a:	4b07      	ldr	r3, [pc, #28]	; (800f048 <Barlow_extrabold_40+0x30>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff fc64 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f034:	4b04      	ldr	r3, [pc, #16]	; (800f048 <Barlow_extrabold_40+0x30>)
 800f036:	6818      	ldr	r0, [r3, #0]
 800f038:	4b05      	ldr	r3, [pc, #20]	; (800f050 <Barlow_extrabold_40+0x38>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	2300      	movs	r3, #0
 800f03e:	2101      	movs	r1, #1
 800f040:	f7ff f889 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f044:	bf00      	nop
 800f046:	bd80      	pop	{r7, pc}
 800f048:	20000bc8 	.word	0x20000bc8
 800f04c:	00109d40 	.word	0x00109d40
 800f050:	20000c24 	.word	0x20000c24

0800f054 <Barlow_medium_10>:

void Barlow_medium_10(void) {
 800f054:	b580      	push	{r7, lr}
 800f056:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 218624, 192);
 800f058:	4b0a      	ldr	r3, [pc, #40]	; (800f084 <Barlow_medium_10+0x30>)
 800f05a:	6818      	ldr	r0, [r3, #0]
 800f05c:	23c0      	movs	r3, #192	; 0xc0
 800f05e:	4a0a      	ldr	r2, [pc, #40]	; (800f088 <Barlow_medium_10+0x34>)
 800f060:	2100      	movs	r1, #0
 800f062:	f7ff f89c 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f066:	4b07      	ldr	r3, [pc, #28]	; (800f084 <Barlow_medium_10+0x30>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7ff fc46 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f070:	4b04      	ldr	r3, [pc, #16]	; (800f084 <Barlow_medium_10+0x30>)
 800f072:	6818      	ldr	r0, [r3, #0]
 800f074:	4b05      	ldr	r3, [pc, #20]	; (800f08c <Barlow_medium_10+0x38>)
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	2300      	movs	r3, #0
 800f07a:	2101      	movs	r1, #1
 800f07c:	f7ff f86b 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f080:	bf00      	nop
 800f082:	bd80      	pop	{r7, pc}
 800f084:	20000bc8 	.word	0x20000bc8
 800f088:	00035600 	.word	0x00035600
 800f08c:	20000c24 	.word	0x20000c24

0800f090 <Barlow_medium_12>:

void Barlow_medium_12(void) {
 800f090:	b580      	push	{r7, lr}
 800f092:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 227008, 192);
 800f094:	4b0a      	ldr	r3, [pc, #40]	; (800f0c0 <Barlow_medium_12+0x30>)
 800f096:	6818      	ldr	r0, [r3, #0]
 800f098:	23c0      	movs	r3, #192	; 0xc0
 800f09a:	4a0a      	ldr	r2, [pc, #40]	; (800f0c4 <Barlow_medium_12+0x34>)
 800f09c:	2100      	movs	r1, #0
 800f09e:	f7ff f87e 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f0a2:	4b07      	ldr	r3, [pc, #28]	; (800f0c0 <Barlow_medium_12+0x30>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff fc28 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f0ac:	4b04      	ldr	r3, [pc, #16]	; (800f0c0 <Barlow_medium_12+0x30>)
 800f0ae:	6818      	ldr	r0, [r3, #0]
 800f0b0:	4b05      	ldr	r3, [pc, #20]	; (800f0c8 <Barlow_medium_12+0x38>)
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	2101      	movs	r1, #1
 800f0b8:	f7ff f84d 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f0bc:	bf00      	nop
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20000bc8 	.word	0x20000bc8
 800f0c4:	000376c0 	.word	0x000376c0
 800f0c8:	20000c24 	.word	0x20000c24

0800f0cc <Barlow_semibold_14>:

void Barlow_semibold_14(void) {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 243584, 192);
 800f0d0:	4b0a      	ldr	r3, [pc, #40]	; (800f0fc <Barlow_semibold_14+0x30>)
 800f0d2:	6818      	ldr	r0, [r3, #0]
 800f0d4:	23c0      	movs	r3, #192	; 0xc0
 800f0d6:	4a0a      	ldr	r2, [pc, #40]	; (800f100 <Barlow_semibold_14+0x34>)
 800f0d8:	2100      	movs	r1, #0
 800f0da:	f7ff f860 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f0de:	4b07      	ldr	r3, [pc, #28]	; (800f0fc <Barlow_semibold_14+0x30>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7ff fc0a 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f0e8:	4b04      	ldr	r3, [pc, #16]	; (800f0fc <Barlow_semibold_14+0x30>)
 800f0ea:	6818      	ldr	r0, [r3, #0]
 800f0ec:	4b05      	ldr	r3, [pc, #20]	; (800f104 <Barlow_semibold_14+0x38>)
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	2101      	movs	r1, #1
 800f0f4:	f7ff f82f 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f0f8:	bf00      	nop
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	20000bc8 	.word	0x20000bc8
 800f100:	0003b780 	.word	0x0003b780
 800f104:	20000c24 	.word	0x20000c24

0800f108 <Barlow_semibold_20>:

void Barlow_semibold_20(void) {
 800f108:	b580      	push	{r7, lr}
 800f10a:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 260160, 192);
 800f10c:	4b0a      	ldr	r3, [pc, #40]	; (800f138 <Barlow_semibold_20+0x30>)
 800f10e:	6818      	ldr	r0, [r3, #0]
 800f110:	23c0      	movs	r3, #192	; 0xc0
 800f112:	4a0a      	ldr	r2, [pc, #40]	; (800f13c <Barlow_semibold_20+0x34>)
 800f114:	2100      	movs	r1, #0
 800f116:	f7ff f842 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f11a:	4b07      	ldr	r3, [pc, #28]	; (800f138 <Barlow_semibold_20+0x30>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4618      	mov	r0, r3
 800f120:	f7ff fbec 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f124:	4b04      	ldr	r3, [pc, #16]	; (800f138 <Barlow_semibold_20+0x30>)
 800f126:	6818      	ldr	r0, [r3, #0]
 800f128:	4b05      	ldr	r3, [pc, #20]	; (800f140 <Barlow_semibold_20+0x38>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	2300      	movs	r3, #0
 800f12e:	2101      	movs	r1, #1
 800f130:	f7ff f811 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f134:	bf00      	nop
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20000bc8 	.word	0x20000bc8
 800f13c:	0003f840 	.word	0x0003f840
 800f140:	20000c24 	.word	0x20000c24

0800f144 <Barlow_semibold_32>:

void Barlow_semibold_32(void) {
 800f144:	b580      	push	{r7, lr}
 800f146:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 284928, 192);
 800f148:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <Barlow_semibold_32+0x30>)
 800f14a:	6818      	ldr	r0, [r3, #0]
 800f14c:	23c0      	movs	r3, #192	; 0xc0
 800f14e:	4a0a      	ldr	r2, [pc, #40]	; (800f178 <Barlow_semibold_32+0x34>)
 800f150:	2100      	movs	r1, #0
 800f152:	f7ff f824 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f156:	4b07      	ldr	r3, [pc, #28]	; (800f174 <Barlow_semibold_32+0x30>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7ff fbce 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f160:	4b04      	ldr	r3, [pc, #16]	; (800f174 <Barlow_semibold_32+0x30>)
 800f162:	6818      	ldr	r0, [r3, #0]
 800f164:	4b05      	ldr	r3, [pc, #20]	; (800f17c <Barlow_semibold_32+0x38>)
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	2300      	movs	r3, #0
 800f16a:	2101      	movs	r1, #1
 800f16c:	f7fe fff3 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f170:	bf00      	nop
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20000bc8 	.word	0x20000bc8
 800f178:	00045900 	.word	0x00045900
 800f17c:	20000c24 	.word	0x20000c24

0800f180 <Barlow_semibold_48>:

void Barlow_semibold_48(void) {
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 317888, 192);
 800f184:	4b0a      	ldr	r3, [pc, #40]	; (800f1b0 <Barlow_semibold_48+0x30>)
 800f186:	6818      	ldr	r0, [r3, #0]
 800f188:	23c0      	movs	r3, #192	; 0xc0
 800f18a:	4a0a      	ldr	r2, [pc, #40]	; (800f1b4 <Barlow_semibold_48+0x34>)
 800f18c:	2100      	movs	r1, #0
 800f18e:	f7ff f806 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f192:	4b07      	ldr	r3, [pc, #28]	; (800f1b0 <Barlow_semibold_48+0x30>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff fbb0 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f19c:	4b04      	ldr	r3, [pc, #16]	; (800f1b0 <Barlow_semibold_48+0x30>)
 800f19e:	6818      	ldr	r0, [r3, #0]
 800f1a0:	4b05      	ldr	r3, [pc, #20]	; (800f1b8 <Barlow_semibold_48+0x38>)
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	2101      	movs	r1, #1
 800f1a8:	f7fe ffd5 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f1ac:	bf00      	nop
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20000bc8 	.word	0x20000bc8
 800f1b4:	0004d9c0 	.word	0x0004d9c0
 800f1b8:	20000c24 	.word	0x20000c24

0800f1bc <Barlow_semibold_112>:

void Barlow_semibold_112(void) {
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	af00      	add	r7, sp, #0
	Gpu_CoCmd_FlashRead(phost, RAM_G, 391808, 192);
 800f1c0:	4b0a      	ldr	r3, [pc, #40]	; (800f1ec <Barlow_semibold_112+0x30>)
 800f1c2:	6818      	ldr	r0, [r3, #0]
 800f1c4:	23c0      	movs	r3, #192	; 0xc0
 800f1c6:	4a0a      	ldr	r2, [pc, #40]	; (800f1f0 <Barlow_semibold_112+0x34>)
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	f7fe ffe8 	bl	800e19e <Gpu_CoCmd_FlashRead>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f1ce:	4b07      	ldr	r3, [pc, #28]	; (800f1ec <Barlow_semibold_112+0x30>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff fb92 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_SetFont2(phost, 1, fontAddr, 0);
 800f1d8:	4b04      	ldr	r3, [pc, #16]	; (800f1ec <Barlow_semibold_112+0x30>)
 800f1da:	6818      	ldr	r0, [r3, #0]
 800f1dc:	4b05      	ldr	r3, [pc, #20]	; (800f1f4 <Barlow_semibold_112+0x38>)
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	2101      	movs	r1, #1
 800f1e4:	f7fe ffb7 	bl	800e156 <Gpu_CoCmd_SetFont2>
}
 800f1e8:	bf00      	nop
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	20000bc8 	.word	0x20000bc8
 800f1f0:	0005fa80 	.word	0x0005fa80
 800f1f4:	20000c24 	.word	0x20000c24

0800f1f8 <initialize_graphics_controller>:
	phost = &host;
	App_Common_Init(&host);
}

// Setup Graphics Controller
void initialize_graphics_controller(void) {
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
	fontAddr = RAM_G;
 800f1fc:	4b12      	ldr	r3, [pc, #72]	; (800f248 <initialize_graphics_controller+0x50>)
 800f1fe:	2200      	movs	r2, #0
 800f200:	601a      	str	r2, [r3, #0]

	if (graphics_test_flag == 1){
 800f202:	4b12      	ldr	r3, [pc, #72]	; (800f24c <initialize_graphics_controller+0x54>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d01b      	beq.n	800f242 <initialize_graphics_controller+0x4a>
		return;
	}

	graphics_test_flag = 1;
 800f20a:	4b10      	ldr	r3, [pc, #64]	; (800f24c <initialize_graphics_controller+0x54>)
 800f20c:	2201      	movs	r2, #1
 800f20e:	601a      	str	r2, [r3, #0]

	Gpu_CoCmd_FlashFast(phost, 0);
 800f210:	4b0f      	ldr	r3, [pc, #60]	; (800f250 <initialize_graphics_controller+0x58>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2100      	movs	r1, #0
 800f216:	4618      	mov	r0, r3
 800f218:	f7fe ffff 	bl	800e21a <Gpu_CoCmd_FlashFast>
	App_Flush_Co_Buffer(phost);
 800f21c:	4b0c      	ldr	r3, [pc, #48]	; (800f250 <initialize_graphics_controller+0x58>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4618      	mov	r0, r3
 800f222:	f7fe fd07 	bl	800dc34 <App_Flush_Co_Buffer>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f226:	4b0a      	ldr	r3, [pc, #40]	; (800f250 <initialize_graphics_controller+0x58>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff fb66 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
	Gpu_CoCmd_Dlstart(phost);
 800f230:	4b07      	ldr	r3, [pc, #28]	; (800f250 <initialize_graphics_controller+0x58>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4618      	mov	r0, r3
 800f236:	f7fe ff4c 	bl	800e0d2 <Gpu_CoCmd_Dlstart>

	graphics_test_flag = 0;
 800f23a:	4b04      	ldr	r3, [pc, #16]	; (800f24c <initialize_graphics_controller+0x54>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	601a      	str	r2, [r3, #0]
 800f240:	e000      	b.n	800f244 <initialize_graphics_controller+0x4c>
		return;
 800f242:	bf00      	nop
}
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	20000c24 	.word	0x20000c24
 800f24c:	20000840 	.word	0x20000840
 800f250:	20000bc8 	.word	0x20000bc8

0800f254 <display_power_down>:

// Unset GPIO to power off the display
void display_power_down(void) {
 800f254:	b580      	push	{r7, lr}
 800f256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800f258:	2200      	movs	r2, #0
 800f25a:	2104      	movs	r1, #4
 800f25c:	4806      	ldr	r0, [pc, #24]	; (800f278 <display_power_down+0x24>)
 800f25e:	f7f8 fdc9 	bl	8007df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800f262:	2200      	movs	r2, #0
 800f264:	2110      	movs	r1, #16
 800f266:	4804      	ldr	r0, [pc, #16]	; (800f278 <display_power_down+0x24>)
 800f268:	f7f8 fdc4 	bl	8007df4 <HAL_GPIO_WritePin>
	UI_lastState = 0;
 800f26c:	4b03      	ldr	r3, [pc, #12]	; (800f27c <display_power_down+0x28>)
 800f26e:	2200      	movs	r2, #0
 800f270:	601a      	str	r2, [r3, #0]
}
 800f272:	bf00      	nop
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	40010800 	.word	0x40010800
 800f27c:	200009a0 	.word	0x200009a0

0800f280 <display_power_up>:

// Set GPIO to power on the display
void display_power_up(void) {
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800f284:	2201      	movs	r2, #1
 800f286:	2104      	movs	r1, #4
 800f288:	4806      	ldr	r0, [pc, #24]	; (800f2a4 <display_power_up+0x24>)
 800f28a:	f7f8 fdb3 	bl	8007df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800f28e:	2201      	movs	r2, #1
 800f290:	2110      	movs	r1, #16
 800f292:	4804      	ldr	r0, [pc, #16]	; (800f2a4 <display_power_up+0x24>)
 800f294:	f7f8 fdae 	bl	8007df4 <HAL_GPIO_WritePin>
	UI_lastState = 0;
 800f298:	4b03      	ldr	r3, [pc, #12]	; (800f2a8 <display_power_up+0x28>)
 800f29a:	2200      	movs	r2, #0
 800f29c:	601a      	str	r2, [r3, #0]
}
 800f29e:	bf00      	nop
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	40010800 	.word	0x40010800
 800f2a8:	200009a0 	.word	0x200009a0

0800f2ac <launch_dash>:

// Display a page
void launch_dash(void) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, DISPLAY());
 800f2b0:	4b03      	ldr	r3, [pc, #12]	; (800f2c0 <launch_dash+0x14>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2100      	movs	r1, #0
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fe fca8 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800f2bc:	bf00      	nop
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	20000bc8 	.word	0x20000bc8

0800f2c4 <clearscreen>:

// Clearscreen
void clearscreen(void) {
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	af00      	add	r7, sp, #0
	App_WrCoCmd_Buffer(phost, CLEAR(1, 1, 1));
 800f2c8:	4b03      	ldr	r3, [pc, #12]	; (800f2d8 <clearscreen+0x14>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4903      	ldr	r1, [pc, #12]	; (800f2dc <clearscreen+0x18>)
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe fc9c 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800f2d4:	bf00      	nop
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	20000bc8 	.word	0x20000bc8
 800f2dc:	26000007 	.word	0x26000007

0800f2e0 <clear_buffer>:

// Clears buffer in the end of every loop
void clear_buffer(void) {
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	af00      	add	r7, sp, #0
	Gpu_CoCmd_Swap(phost);
 800f2e4:	4b0a      	ldr	r3, [pc, #40]	; (800f310 <clear_buffer+0x30>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fe fe86 	bl	800dffa <Gpu_CoCmd_Swap>
	Gpu_CoCmd_Dlstart(phost);
 800f2ee:	4b08      	ldr	r3, [pc, #32]	; (800f310 <clear_buffer+0x30>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fe feed 	bl	800e0d2 <Gpu_CoCmd_Dlstart>
	App_Flush_Co_Buffer(phost);
 800f2f8:	4b05      	ldr	r3, [pc, #20]	; (800f310 <clear_buffer+0x30>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7fe fc99 	bl	800dc34 <App_Flush_Co_Buffer>
	Gpu_Hal_WaitCmdfifo_empty(phost);
 800f302:	4b03      	ldr	r3, [pc, #12]	; (800f310 <clear_buffer+0x30>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff faf8 	bl	800e8fc <Gpu_Hal_WaitCmdfifo_empty>
}
 800f30c:	bf00      	nop
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	20000bc8 	.word	0x20000bc8

0800f314 <Load_ImageASTC>:

// Load Images
void Load_ImageASTC(Gpu_Hal_Context_t *phost, uint32_t adr, uint16_t fmt, uint16_t iw, uint16_t ih, uint16_t position_X, uint16_t position_Y) {
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af02      	add	r7, sp, #8
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	4611      	mov	r1, r2
 800f320:	461a      	mov	r2, r3
 800f322:	460b      	mov	r3, r1
 800f324:	80fb      	strh	r3, [r7, #6]
 800f326:	4613      	mov	r3, r2
 800f328:	80bb      	strh	r3, [r7, #4]

//	Gpu_CoCmd_Dlstart(phost);
	Gpu_CoCmd_FlashSource(phost, adr);
 800f32a:	68b9      	ldr	r1, [r7, #8]
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7fe ff5a 	bl	800e1e6 <Gpu_CoCmd_FlashSource>

	// Set address of the flash to load the image
	Gpu_CoCmd_SetBitmap(phost, (0x800000 | adr / 32), fmt, iw, ih);
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	095b      	lsrs	r3, r3, #5
 800f336:	f443 0100 	orr.w	r1, r3, #8388608	; 0x800000
 800f33a:	88b8      	ldrh	r0, [r7, #4]
 800f33c:	88fa      	ldrh	r2, [r7, #6]
 800f33e:	8b3b      	ldrh	r3, [r7, #24]
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	4603      	mov	r3, r0
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f7fe fed9 	bl	800e0fc <Gpu_CoCmd_SetBitmap>

	// Load the image in the form of Bitmap
	App_WrCoCmd_Buffer(phost, BEGIN(BITMAPS));
 800f34a:	4910      	ldr	r1, [pc, #64]	; (800f38c <Load_ImageASTC+0x78>)
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f7fe fc5d 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, VERTEX2II(position_X, position_Y, 0, 0));
 800f352:	8bbb      	ldrh	r3, [r7, #28]
 800f354:	055b      	lsls	r3, r3, #21
 800f356:	4a0e      	ldr	r2, [pc, #56]	; (800f390 <Load_ImageASTC+0x7c>)
 800f358:	401a      	ands	r2, r3
 800f35a:	8c3b      	ldrh	r3, [r7, #32]
 800f35c:	0319      	lsls	r1, r3, #12
 800f35e:	4b0d      	ldr	r3, [pc, #52]	; (800f394 <Load_ImageASTC+0x80>)
 800f360:	400b      	ands	r3, r1
 800f362:	4313      	orrs	r3, r2
 800f364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f368:	4619      	mov	r1, r3
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f7fe fc4e 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, END());
 800f370:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f7fe fc49 	bl	800dc0c <App_WrCoCmd_Buffer>
	App_WrCoCmd_Buffer(phost, RESTORE_CONTEXT());
 800f37a:	f04f 510c 	mov.w	r1, #587202560	; 0x23000000
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f7fe fc44 	bl	800dc0c <App_WrCoCmd_Buffer>

//	Gpu_CoCmd_Swap(phost);
}
 800f384:	bf00      	nop
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	1f000001 	.word	0x1f000001
 800f390:	3fe00000 	.word	0x3fe00000
 800f394:	001ff000 	.word	0x001ff000

0800f398 <Draw_Triangle>:

/*
 *	(x_axis, y_axis) -> Mid-point of the base of the triangle
 *	height -> height of the triangle
 */
void Draw_Triangle(int x_axis, int y_axis, int height, int border_width, int rgb[3]){
 800f398:	b580      	push	{r7, lr}
 800f39a:	b088      	sub	sp, #32
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]

	int base_y_position	= y_axis;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	617b      	str	r3, [r7, #20]
	int top_y_position	= (y_axis - height);
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	613b      	str	r3, [r7, #16]
//	int colors = rgb[0];
//	int border_width	= 1;

	load_color_black();
 800f3b2:	f7ff fba3 	bl	800eafc <load_color_black>

	for (int i = 0; i < 20; i++){
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	61fb      	str	r3, [r7, #28]
 800f3ba:	e083      	b.n	800f4c4 <Draw_Triangle+0x12c>

		if (top_y_position + (i*2) <= (base_y_position + border_width)){
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	005a      	lsls	r2, r3, #1
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	441a      	add	r2, r3
 800f3c4:	6979      	ldr	r1, [r7, #20]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	440b      	add	r3, r1
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	dc77      	bgt.n	800f4be <Draw_Triangle+0x126>
			App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800f3ce:	4b90      	ldr	r3, [pc, #576]	; (800f610 <Draw_Triangle+0x278>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	4990      	ldr	r1, [pc, #576]	; (800f614 <Draw_Triangle+0x27c>)
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fe fc19 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, LINE_WIDTH(32));
 800f3da:	4b8d      	ldr	r3, [pc, #564]	; (800f610 <Draw_Triangle+0x278>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	498e      	ldr	r1, [pc, #568]	; (800f618 <Draw_Triangle+0x280>)
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fe fc13 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis + i, (top_y_position - border_width) + (i*2), 0, 0));
 800f3e6:	4b8a      	ldr	r3, [pc, #552]	; (800f610 <Draw_Triangle+0x278>)
 800f3e8:	6818      	ldr	r0, [r3, #0]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	4413      	add	r3, r2
 800f3f0:	055b      	lsls	r3, r3, #21
 800f3f2:	4a8a      	ldr	r2, [pc, #552]	; (800f61c <Draw_Triangle+0x284>)
 800f3f4:	401a      	ands	r2, r3
 800f3f6:	6939      	ldr	r1, [r7, #16]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	1ac9      	subs	r1, r1, r3
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	005b      	lsls	r3, r3, #1
 800f400:	440b      	add	r3, r1
 800f402:	0319      	lsls	r1, r3, #12
 800f404:	4b86      	ldr	r3, [pc, #536]	; (800f620 <Draw_Triangle+0x288>)
 800f406:	400b      	ands	r3, r1
 800f408:	4313      	orrs	r3, r2
 800f40a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f40e:	4619      	mov	r1, r3
 800f410:	f7fe fbfc 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis + i + 1, base_y_position + border_width, 0, 0));
 800f414:	4b7e      	ldr	r3, [pc, #504]	; (800f610 <Draw_Triangle+0x278>)
 800f416:	6818      	ldr	r0, [r3, #0]
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	4413      	add	r3, r2
 800f41e:	3301      	adds	r3, #1
 800f420:	055b      	lsls	r3, r3, #21
 800f422:	4a7e      	ldr	r2, [pc, #504]	; (800f61c <Draw_Triangle+0x284>)
 800f424:	401a      	ands	r2, r3
 800f426:	6979      	ldr	r1, [r7, #20]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	440b      	add	r3, r1
 800f42c:	0319      	lsls	r1, r3, #12
 800f42e:	4b7c      	ldr	r3, [pc, #496]	; (800f620 <Draw_Triangle+0x288>)
 800f430:	400b      	ands	r3, r1
 800f432:	4313      	orrs	r3, r2
 800f434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f438:	4619      	mov	r1, r3
 800f43a:	f7fe fbe7 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, END());
 800f43e:	4b74      	ldr	r3, [pc, #464]	; (800f610 <Draw_Triangle+0x278>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe fbe0 	bl	800dc0c <App_WrCoCmd_Buffer>

			App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800f44c:	4b70      	ldr	r3, [pc, #448]	; (800f610 <Draw_Triangle+0x278>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4970      	ldr	r1, [pc, #448]	; (800f614 <Draw_Triangle+0x27c>)
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe fbda 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis - i, (top_y_position - border_width) + (i*2), 0, 0));
 800f458:	4b6d      	ldr	r3, [pc, #436]	; (800f610 <Draw_Triangle+0x278>)
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	055b      	lsls	r3, r3, #21
 800f464:	4a6d      	ldr	r2, [pc, #436]	; (800f61c <Draw_Triangle+0x284>)
 800f466:	401a      	ands	r2, r3
 800f468:	6939      	ldr	r1, [r7, #16]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	1ac9      	subs	r1, r1, r3
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	440b      	add	r3, r1
 800f474:	0319      	lsls	r1, r3, #12
 800f476:	4b6a      	ldr	r3, [pc, #424]	; (800f620 <Draw_Triangle+0x288>)
 800f478:	400b      	ands	r3, r1
 800f47a:	4313      	orrs	r3, r2
 800f47c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f480:	4619      	mov	r1, r3
 800f482:	f7fe fbc3 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis - i - 1, base_y_position + border_width, 0, 0));
 800f486:	4b62      	ldr	r3, [pc, #392]	; (800f610 <Draw_Triangle+0x278>)
 800f488:	6818      	ldr	r0, [r3, #0]
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	3b01      	subs	r3, #1
 800f492:	055b      	lsls	r3, r3, #21
 800f494:	4a61      	ldr	r2, [pc, #388]	; (800f61c <Draw_Triangle+0x284>)
 800f496:	401a      	ands	r2, r3
 800f498:	6979      	ldr	r1, [r7, #20]
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	440b      	add	r3, r1
 800f49e:	0319      	lsls	r1, r3, #12
 800f4a0:	4b5f      	ldr	r3, [pc, #380]	; (800f620 <Draw_Triangle+0x288>)
 800f4a2:	400b      	ands	r3, r1
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	f7fe fbae 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, END());
 800f4b0:	4b57      	ldr	r3, [pc, #348]	; (800f610 <Draw_Triangle+0x278>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fe fba7 	bl	800dc0c <App_WrCoCmd_Buffer>
	for (int i = 0; i < 20; i++){
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	61fb      	str	r3, [r7, #28]
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	2b13      	cmp	r3, #19
 800f4c8:	f77f af78 	ble.w	800f3bc <Draw_Triangle+0x24>
		}
	}

	App_WrCoCmd_Buffer(phost, COLOR_RGB(rgb[0], rgb[1], rgb[2]));
 800f4cc:	4b50      	ldr	r3, [pc, #320]	; (800f610 <Draw_Triangle+0x278>)
 800f4ce:	6818      	ldr	r0, [r3, #0]
 800f4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	041b      	lsls	r3, r3, #16
 800f4d6:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 800f4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4dc:	3304      	adds	r3, #4
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	021b      	lsls	r3, r3, #8
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	431a      	orrs	r2, r3
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	3308      	adds	r3, #8
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	f7fe fb89 	bl	800dc0c <App_WrCoCmd_Buffer>
//	load_color_red();

	for (int i = 0; i < 20; i++){
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	61bb      	str	r3, [r7, #24]
 800f4fe:	e079      	b.n	800f5f4 <Draw_Triangle+0x25c>

		if (top_y_position + (i*2) <= base_y_position){
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	005a      	lsls	r2, r3, #1
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	4413      	add	r3, r2
 800f508:	697a      	ldr	r2, [r7, #20]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	db6f      	blt.n	800f5ee <Draw_Triangle+0x256>
			App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800f50e:	4b40      	ldr	r3, [pc, #256]	; (800f610 <Draw_Triangle+0x278>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4940      	ldr	r1, [pc, #256]	; (800f614 <Draw_Triangle+0x27c>)
 800f514:	4618      	mov	r0, r3
 800f516:	f7fe fb79 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, LINE_WIDTH(32));
 800f51a:	4b3d      	ldr	r3, [pc, #244]	; (800f610 <Draw_Triangle+0x278>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	493e      	ldr	r1, [pc, #248]	; (800f618 <Draw_Triangle+0x280>)
 800f520:	4618      	mov	r0, r3
 800f522:	f7fe fb73 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis + i, top_y_position + (i*2), 0, 0));
 800f526:	4b3a      	ldr	r3, [pc, #232]	; (800f610 <Draw_Triangle+0x278>)
 800f528:	6818      	ldr	r0, [r3, #0]
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	4413      	add	r3, r2
 800f530:	055b      	lsls	r3, r3, #21
 800f532:	4a3a      	ldr	r2, [pc, #232]	; (800f61c <Draw_Triangle+0x284>)
 800f534:	401a      	ands	r2, r3
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	0059      	lsls	r1, r3, #1
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	440b      	add	r3, r1
 800f53e:	0319      	lsls	r1, r3, #12
 800f540:	4b37      	ldr	r3, [pc, #220]	; (800f620 <Draw_Triangle+0x288>)
 800f542:	400b      	ands	r3, r1
 800f544:	4313      	orrs	r3, r2
 800f546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f54a:	4619      	mov	r1, r3
 800f54c:	f7fe fb5e 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis + i + 1, base_y_position, 0, 0));
 800f550:	4b2f      	ldr	r3, [pc, #188]	; (800f610 <Draw_Triangle+0x278>)
 800f552:	6818      	ldr	r0, [r3, #0]
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	4413      	add	r3, r2
 800f55a:	3301      	adds	r3, #1
 800f55c:	055b      	lsls	r3, r3, #21
 800f55e:	4a2f      	ldr	r2, [pc, #188]	; (800f61c <Draw_Triangle+0x284>)
 800f560:	401a      	ands	r2, r3
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	0319      	lsls	r1, r3, #12
 800f566:	4b2e      	ldr	r3, [pc, #184]	; (800f620 <Draw_Triangle+0x288>)
 800f568:	400b      	ands	r3, r1
 800f56a:	4313      	orrs	r3, r2
 800f56c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f570:	4619      	mov	r1, r3
 800f572:	f7fe fb4b 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, END());
 800f576:	4b26      	ldr	r3, [pc, #152]	; (800f610 <Draw_Triangle+0x278>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fe fb44 	bl	800dc0c <App_WrCoCmd_Buffer>

			App_WrCoCmd_Buffer(phost, BEGIN(RECTS));
 800f584:	4b22      	ldr	r3, [pc, #136]	; (800f610 <Draw_Triangle+0x278>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4922      	ldr	r1, [pc, #136]	; (800f614 <Draw_Triangle+0x27c>)
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe fb3e 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis - i, top_y_position + (i*2), 0, 0));
 800f590:	4b1f      	ldr	r3, [pc, #124]	; (800f610 <Draw_Triangle+0x278>)
 800f592:	6818      	ldr	r0, [r3, #0]
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	1ad3      	subs	r3, r2, r3
 800f59a:	055b      	lsls	r3, r3, #21
 800f59c:	4a1f      	ldr	r2, [pc, #124]	; (800f61c <Draw_Triangle+0x284>)
 800f59e:	401a      	ands	r2, r3
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	0059      	lsls	r1, r3, #1
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	440b      	add	r3, r1
 800f5a8:	0319      	lsls	r1, r3, #12
 800f5aa:	4b1d      	ldr	r3, [pc, #116]	; (800f620 <Draw_Triangle+0x288>)
 800f5ac:	400b      	ands	r3, r1
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	f7fe fb29 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, VERTEX2II(x_axis - i - 1, base_y_position, 0, 0));
 800f5ba:	4b15      	ldr	r3, [pc, #84]	; (800f610 <Draw_Triangle+0x278>)
 800f5bc:	6818      	ldr	r0, [r3, #0]
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	1ad3      	subs	r3, r2, r3
 800f5c4:	3b01      	subs	r3, #1
 800f5c6:	055b      	lsls	r3, r3, #21
 800f5c8:	4a14      	ldr	r2, [pc, #80]	; (800f61c <Draw_Triangle+0x284>)
 800f5ca:	401a      	ands	r2, r3
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	0319      	lsls	r1, r3, #12
 800f5d0:	4b13      	ldr	r3, [pc, #76]	; (800f620 <Draw_Triangle+0x288>)
 800f5d2:	400b      	ands	r3, r1
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f5da:	4619      	mov	r1, r3
 800f5dc:	f7fe fb16 	bl	800dc0c <App_WrCoCmd_Buffer>
			App_WrCoCmd_Buffer(phost, END());
 800f5e0:	4b0b      	ldr	r3, [pc, #44]	; (800f610 <Draw_Triangle+0x278>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fe fb0f 	bl	800dc0c <App_WrCoCmd_Buffer>
	for (int i = 0; i < 20; i++){
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	61bb      	str	r3, [r7, #24]
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	2b13      	cmp	r3, #19
 800f5f8:	dd82      	ble.n	800f500 <Draw_Triangle+0x168>
		}
	}

	App_WrCoCmd_Buffer(phost, LINE_WIDTH(12));
 800f5fa:	4b05      	ldr	r3, [pc, #20]	; (800f610 <Draw_Triangle+0x278>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4909      	ldr	r1, [pc, #36]	; (800f624 <Draw_Triangle+0x28c>)
 800f600:	4618      	mov	r0, r3
 800f602:	f7fe fb03 	bl	800dc0c <App_WrCoCmd_Buffer>
}
 800f606:	bf00      	nop
 800f608:	3720      	adds	r7, #32
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	20000bc8 	.word	0x20000bc8
 800f614:	1f000009 	.word	0x1f000009
 800f618:	0e000020 	.word	0x0e000020
 800f61c:	3fe00000 	.word	0x3fe00000
 800f620:	001ff000 	.word	0x001ff000
 800f624:	0e00000c 	.word	0x0e00000c

0800f628 <__libc_init_array>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	2600      	movs	r6, #0
 800f62c:	4d0c      	ldr	r5, [pc, #48]	; (800f660 <__libc_init_array+0x38>)
 800f62e:	4c0d      	ldr	r4, [pc, #52]	; (800f664 <__libc_init_array+0x3c>)
 800f630:	1b64      	subs	r4, r4, r5
 800f632:	10a4      	asrs	r4, r4, #2
 800f634:	42a6      	cmp	r6, r4
 800f636:	d109      	bne.n	800f64c <__libc_init_array+0x24>
 800f638:	f000 f830 	bl	800f69c <_init>
 800f63c:	2600      	movs	r6, #0
 800f63e:	4d0a      	ldr	r5, [pc, #40]	; (800f668 <__libc_init_array+0x40>)
 800f640:	4c0a      	ldr	r4, [pc, #40]	; (800f66c <__libc_init_array+0x44>)
 800f642:	1b64      	subs	r4, r4, r5
 800f644:	10a4      	asrs	r4, r4, #2
 800f646:	42a6      	cmp	r6, r4
 800f648:	d105      	bne.n	800f656 <__libc_init_array+0x2e>
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
 800f64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f650:	4798      	blx	r3
 800f652:	3601      	adds	r6, #1
 800f654:	e7ee      	b.n	800f634 <__libc_init_array+0xc>
 800f656:	f855 3b04 	ldr.w	r3, [r5], #4
 800f65a:	4798      	blx	r3
 800f65c:	3601      	adds	r6, #1
 800f65e:	e7f2      	b.n	800f646 <__libc_init_array+0x1e>
 800f660:	0800fc90 	.word	0x0800fc90
 800f664:	0800fc90 	.word	0x0800fc90
 800f668:	0800fc90 	.word	0x0800fc90
 800f66c:	0800fc94 	.word	0x0800fc94

0800f670 <memset>:
 800f670:	4603      	mov	r3, r0
 800f672:	4402      	add	r2, r0
 800f674:	4293      	cmp	r3, r2
 800f676:	d100      	bne.n	800f67a <memset+0xa>
 800f678:	4770      	bx	lr
 800f67a:	f803 1b01 	strb.w	r1, [r3], #1
 800f67e:	e7f9      	b.n	800f674 <memset+0x4>

0800f680 <strchr>:
 800f680:	4603      	mov	r3, r0
 800f682:	b2c9      	uxtb	r1, r1
 800f684:	4618      	mov	r0, r3
 800f686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f68a:	b112      	cbz	r2, 800f692 <strchr+0x12>
 800f68c:	428a      	cmp	r2, r1
 800f68e:	d1f9      	bne.n	800f684 <strchr+0x4>
 800f690:	4770      	bx	lr
 800f692:	2900      	cmp	r1, #0
 800f694:	bf18      	it	ne
 800f696:	2000      	movne	r0, #0
 800f698:	4770      	bx	lr
	...

0800f69c <_init>:
 800f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69e:	bf00      	nop
 800f6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6a2:	bc08      	pop	{r3}
 800f6a4:	469e      	mov	lr, r3
 800f6a6:	4770      	bx	lr

0800f6a8 <_fini>:
 800f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6aa:	bf00      	nop
 800f6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ae:	bc08      	pop	{r3}
 800f6b0:	469e      	mov	lr, r3
 800f6b2:	4770      	bx	lr
